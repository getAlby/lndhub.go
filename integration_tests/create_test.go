package integration_tests

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/getAlby/lndhub.go/controllers"
	v2controllers "github.com/getAlby/lndhub.go/controllers_v2"
	"github.com/getAlby/lndhub.go/lib"
	"github.com/getAlby/lndhub.go/lib/responses"
	"github.com/getAlby/lndhub.go/lib/service"
	"github.com/getAlby/lndhub.go/lib/tokens"
	"github.com/go-playground/validator/v10"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type CreateUserTestSuite struct {
	suite.Suite
	Service *service.LndhubService
}

func (suite *CreateUserTestSuite) SetupSuite() {
	svc, err := LndHubTestServiceInit(newDefaultMockLND())
	if err != nil {
		log.Fatalf("Error initializing test service: %v", err)
	}
	suite.Service = svc
}

func (suite *CreateUserTestSuite) TearDownSuite() {

}

func (suite *CreateUserTestSuite) TearDownTest() {
	err := clearTable(suite.Service, "users")
	if err != nil {
		fmt.Printf("Tear down test error %v\n", err.Error())
		return
	}
	fmt.Println("Tear down test success")
}

func (suite *CreateUserTestSuite) TestCreate() {
	e := echo.New()
	e.HTTPErrorHandler = responses.HTTPErrorHandler
	e.Validator = &lib.CustomValidator{Validator: validator.New()}
	/// TODO this test may fail because previously the create user (/users POST)
	///			endpoint returned an autogenerated login/password if one wasn't provided.
	/// 		because of our use of Nostr PubKey's we will not autogenerate any credentials.

	/// sample pubkey (via nostril --mine-pubkey --pow 12):
	/// * 0007508c45b2382b38b972c95b9dc2a5cd9c265f7e47f5b5669f12b1d3444808
	req := httptest.NewRequest(http.MethodPost, "/create", bytes.NewReader([]byte{}))
	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)
	controller := controllers.NewCreateUserController(suite.Service)
	responseBody := ExpectedCreateUserResponseBody{}
	if assert.NoError(suite.T(), controller.CreateUser(c)) {
		assert.Equal(suite.T(), http.StatusOK, rec.Code)
		assert.NoError(suite.T(), json.NewDecoder(rec.Body).Decode(&responseBody))
		assert.NotEmpty(suite.T(), responseBody.Pubkey)
		assert.NotEmpty(suite.T(), responseBody.Password)
		fmt.Printf("Sucessfully created user with pubkey %s\n", responseBody.Pubkey)
	}
}
func (suite *CreateUserTestSuite) TestAdminCreate() {
	adminToken := "admin_token"
	e := echo.New()
	e.HTTPErrorHandler = responses.HTTPErrorHandler
	e.Validator = &lib.CustomValidator{Validator: validator.New()}
	controller := controllers.NewCreateUserController(suite.Service)
	/// TODO this test may fail because previously the create user (/users POST)
	///			endpoint returned an autogenerated login/password if one wasn't provided.
	/// 		because of our use of Nostr PubKey's we will not autogenerate any credentials.

	/// sample pubkey (via nostril --mine-pubkey --pow 12):
	/// * 00019a2b912ad72ef1e94e259fe0d7cd79b9a4e04aee996b1e2b0b626b53da5e
	e.POST("/create", controller.CreateUser, tokens.AdminTokenMiddleware(adminToken))
	req := httptest.NewRequest(http.MethodPost, "/create", bytes.NewReader([]byte{}))
	rec := httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusBadRequest, rec.Code)
	req.Header.Set("Authorization", "Bearer not_the_admin_token")
	rec = httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusUnauthorized, rec.Code)
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", adminToken))
	rec = httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
}
func (suite *CreateUserTestSuite) TestAdminUpdate() {
	adminToken := "admin_token"
	e := echo.New()
	e.HTTPErrorHandler = responses.HTTPErrorHandler
	e.Validator = &lib.CustomValidator{Validator: validator.New()}
	createController := v2controllers.NewCreateUserController(suite.Service)
	updateController := v2controllers.NewUpdateUserController(suite.Service)
	authController := controllers.NewAuthController(suite.Service)
	/// TODO this test may fail because previously the create user (/users POST)
	///			endpoint returned an autogenerated login/password if one wasn't provided.
	/// 		because of our use of Nostr PubKey's we will not autogenerate any credentials.

	/// sample pubkey (via nostril --mine-pubkey --pow 12):
	/// * 
	e.POST("/create", createController.CreateUser, tokens.AdminTokenMiddleware(adminToken))
	e.PUT("/update", updateController.UpdateUser, tokens.AdminTokenMiddleware(adminToken))
	e.POST("/auth", authController.Auth)
	/// TODO this test may fail because previously the create user (/users POST)
	///			endpoint returned an autogenerated login/password if one wasn't provided.
	/// 		because of our use of Nostr PubKey's we will not autogenerate any credentials.

	/// sample pubkey (via nostril --mine-pubkey --pow 12):
	/// * 0001dd0d45361ac0598bbf631c02c726fb99ebc59875028e34acccc4db75ac1a
	req := httptest.NewRequest(http.MethodPost, "/create", bytes.NewReader([]byte{}))
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", adminToken))
	req.Header.Set("Content-type", "application/json")
	rec := httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
	//get id
	createUserResponse := &v2controllers.CreateUserResponseBody{}
	assert.NoError(suite.T(), json.NewDecoder(rec.Body).Decode(createUserResponse))
	//update user with new password, login
	var buf bytes.Buffer
	newPubkey := "000174d16776a6e3c57cd23daa690787dafb9c4195004b5fa6c398c75e511ba0"
	newPw := "new password"
	json.NewEncoder(&buf).Encode(&v2controllers.UpdateUserRequestBody{
		ID:       createUserResponse.ID,
		Pubkey:    &newPubkey,
		Password: &newPw,
	})
	req = httptest.NewRequest(http.MethodPut, "/update", &buf)
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", adminToken))
	req.Header.Set("Content-type", "application/json")
	rec = httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
	//check if user can fetch auth token with new login/pw
	rec = fetchToken(suite.T(), newPubkey, newPw, e)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
	//deactivate user
	deactivated := true
	json.NewEncoder(&buf).Encode(&v2controllers.UpdateUserRequestBody{
		ID:          createUserResponse.ID,
		Deactivated: &deactivated,
	})
	req = httptest.NewRequest(http.MethodPut, "/update", &buf)
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", adminToken))
	req.Header.Set("Content-type", "application/json")
	rec = httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	//check that user can no longer fetch a token and the correct error message is shown
	rec = fetchToken(suite.T(), newPubkey, newPw, e)
	assert.Equal(suite.T(), http.StatusUnauthorized, rec.Code)
	errorResp := &responses.ErrorResponse{}
	assert.NoError(suite.T(), json.NewDecoder(rec.Body).Decode(errorResp))
	assert.Equal(suite.T(), responses.AccountDeactivatedError.Message, errorResp.Message)
	//reactivate user
	deactivated = false
	json.NewEncoder(&buf).Encode(&v2controllers.UpdateUserRequestBody{
		ID:          createUserResponse.ID,
		Deactivated: &deactivated,
	})
	req = httptest.NewRequest(http.MethodPut, "/update", &buf)
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", adminToken))
	req.Header.Set("Content-type", "application/json")
	rec = httptest.NewRecorder()
	e.ServeHTTP(rec, req)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
	//check that user can fetch a token again
	rec = fetchToken(suite.T(), newPubkey, newPw, e)
	assert.Equal(suite.T(), http.StatusOK, rec.Code)
}

func fetchToken(t *testing.T, pubkey string, pw string, e *echo.Echo) (rec *httptest.ResponseRecorder) {
	rec = httptest.NewRecorder()
	var authBuf bytes.Buffer
	assert.NoError(t, json.NewEncoder(&authBuf).Encode(&ExpectedAuthRequestBody{
		Pubkey:    pubkey,
		Password: pw,
	}))
	req := httptest.NewRequest(http.MethodPost, "/auth", &authBuf)
	req.Header.Set("Content-type", "application/json")
	e.ServeHTTP(rec, req)
	return rec
}

func (suite *CreateUserTestSuite) TestCreateWithProvidedLoginAndPassword() {
	e := echo.New()
	e.HTTPErrorHandler = responses.HTTPErrorHandler
	e.Validator = &lib.CustomValidator{Validator: validator.New()}
	var buf bytes.Buffer
	const testPubkey = "000c9971df8924e6ca0f88b84e47779ee55fff87a3a502c960f9fe47754a5fad"
	const testPassword = "test password"
	json.NewEncoder(&buf).Encode(&ExpectedCreateUserRequestBody{
		Pubkey:    testPubkey,
		Password: testPassword,
	})
	/// TODO this test may fail because previously the create user (/users POST)
	///			endpoint returned an autogenerated login/password if one wasn't provided.
	/// 		because of our use of Nostr PubKey's we will not autogenerate any credentials.

	/// sample pubkey (via nostril --mine-pubkey --pow 12):
	/// * 0002e03659179ad4e2460c4a7a891e88af1032b4240e18740c8c6b680bc5acf0
	req := httptest.NewRequest(http.MethodPost, "/create", &buf)
	req.Header.Set(echo.HeaderContentType, echo.MIMEApplicationJSON)
	rec := httptest.NewRecorder()
	c := e.NewContext(req, rec)
	controller := controllers.NewCreateUserController(suite.Service)
	responseBody := ExpectedCreateUserResponseBody{}
	if assert.NoError(suite.T(), controller.CreateUser(c)) {
		assert.Equal(suite.T(), http.StatusOK, rec.Code)
		assert.NoError(suite.T(), json.NewDecoder(rec.Body).Decode(&responseBody))
		assert.Equal(suite.T(), testPubkey, responseBody.Pubkey)
		assert.Equal(suite.T(), testPassword, responseBody.Password)
		fmt.Printf("Sucessfully created user with login %s\n", responseBody.Pubkey)
	}
}

func TestCreateUserTestSuite(t *testing.T) {
	suite.Run(t, new(CreateUserTestSuite))
}
