// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: node.proto

package cln

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Getinfo.address[].type
type GetinfoAddress_GetinfoAddressType int32

const (
	GetinfoAddress_DNS       GetinfoAddress_GetinfoAddressType = 0
	GetinfoAddress_IPV4      GetinfoAddress_GetinfoAddressType = 1
	GetinfoAddress_IPV6      GetinfoAddress_GetinfoAddressType = 2
	GetinfoAddress_TORV2     GetinfoAddress_GetinfoAddressType = 3
	GetinfoAddress_TORV3     GetinfoAddress_GetinfoAddressType = 4
	GetinfoAddress_WEBSOCKET GetinfoAddress_GetinfoAddressType = 5
)

// Enum value maps for GetinfoAddress_GetinfoAddressType.
var (
	GetinfoAddress_GetinfoAddressType_name = map[int32]string{
		0: "DNS",
		1: "IPV4",
		2: "IPV6",
		3: "TORV2",
		4: "TORV3",
		5: "WEBSOCKET",
	}
	GetinfoAddress_GetinfoAddressType_value = map[string]int32{
		"DNS":       0,
		"IPV4":      1,
		"IPV6":      2,
		"TORV2":     3,
		"TORV3":     4,
		"WEBSOCKET": 5,
	}
)

func (x GetinfoAddress_GetinfoAddressType) Enum() *GetinfoAddress_GetinfoAddressType {
	p := new(GetinfoAddress_GetinfoAddressType)
	*p = x
	return p
}

func (x GetinfoAddress_GetinfoAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetinfoAddress_GetinfoAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[0].Descriptor()
}

func (GetinfoAddress_GetinfoAddressType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[0]
}

func (x GetinfoAddress_GetinfoAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetinfoAddress_GetinfoAddressType.Descriptor instead.
func (GetinfoAddress_GetinfoAddressType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3, 0}
}

// Getinfo.binding[].type
type GetinfoBinding_GetinfoBindingType int32

const (
	GetinfoBinding_LOCAL_SOCKET GetinfoBinding_GetinfoBindingType = 0
	GetinfoBinding_IPV4         GetinfoBinding_GetinfoBindingType = 1
	GetinfoBinding_IPV6         GetinfoBinding_GetinfoBindingType = 2
	GetinfoBinding_TORV2        GetinfoBinding_GetinfoBindingType = 3
	GetinfoBinding_TORV3        GetinfoBinding_GetinfoBindingType = 4
)

// Enum value maps for GetinfoBinding_GetinfoBindingType.
var (
	GetinfoBinding_GetinfoBindingType_name = map[int32]string{
		0: "LOCAL_SOCKET",
		1: "IPV4",
		2: "IPV6",
		3: "TORV2",
		4: "TORV3",
	}
	GetinfoBinding_GetinfoBindingType_value = map[string]int32{
		"LOCAL_SOCKET": 0,
		"IPV4":         1,
		"IPV6":         2,
		"TORV2":        3,
		"TORV3":        4,
	}
)

func (x GetinfoBinding_GetinfoBindingType) Enum() *GetinfoBinding_GetinfoBindingType {
	p := new(GetinfoBinding_GetinfoBindingType)
	*p = x
	return p
}

func (x GetinfoBinding_GetinfoBindingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetinfoBinding_GetinfoBindingType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[1].Descriptor()
}

func (GetinfoBinding_GetinfoBindingType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[1]
}

func (x GetinfoBinding_GetinfoBindingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetinfoBinding_GetinfoBindingType.Descriptor instead.
func (GetinfoBinding_GetinfoBindingType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4, 0}
}

// ListPeers.peers[].log[].type
type ListpeersPeersLog_ListpeersPeersLogType int32

const (
	ListpeersPeersLog_SKIPPED ListpeersPeersLog_ListpeersPeersLogType = 0
	ListpeersPeersLog_BROKEN  ListpeersPeersLog_ListpeersPeersLogType = 1
	ListpeersPeersLog_UNUSUAL ListpeersPeersLog_ListpeersPeersLogType = 2
	ListpeersPeersLog_INFO    ListpeersPeersLog_ListpeersPeersLogType = 3
	ListpeersPeersLog_DEBUG   ListpeersPeersLog_ListpeersPeersLogType = 4
	ListpeersPeersLog_IO_IN   ListpeersPeersLog_ListpeersPeersLogType = 5
	ListpeersPeersLog_IO_OUT  ListpeersPeersLog_ListpeersPeersLogType = 6
)

// Enum value maps for ListpeersPeersLog_ListpeersPeersLogType.
var (
	ListpeersPeersLog_ListpeersPeersLogType_name = map[int32]string{
		0: "SKIPPED",
		1: "BROKEN",
		2: "UNUSUAL",
		3: "INFO",
		4: "DEBUG",
		5: "IO_IN",
		6: "IO_OUT",
	}
	ListpeersPeersLog_ListpeersPeersLogType_value = map[string]int32{
		"SKIPPED": 0,
		"BROKEN":  1,
		"UNUSUAL": 2,
		"INFO":    3,
		"DEBUG":   4,
		"IO_IN":   5,
		"IO_OUT":  6,
	}
)

func (x ListpeersPeersLog_ListpeersPeersLogType) Enum() *ListpeersPeersLog_ListpeersPeersLogType {
	p := new(ListpeersPeersLog_ListpeersPeersLogType)
	*p = x
	return p
}

func (x ListpeersPeersLog_ListpeersPeersLogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListpeersPeersLog_ListpeersPeersLogType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[2].Descriptor()
}

func (ListpeersPeersLog_ListpeersPeersLogType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[2]
}

func (x ListpeersPeersLog_ListpeersPeersLogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListpeersPeersLog_ListpeersPeersLogType.Descriptor instead.
func (ListpeersPeersLog_ListpeersPeersLogType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{8, 0}
}

// ListPeers.peers[].channels[].state
type ListpeersPeersChannels_ListpeersPeersChannelsState int32

const (
	ListpeersPeersChannels_OPENINGD                  ListpeersPeersChannels_ListpeersPeersChannelsState = 0
	ListpeersPeersChannels_CHANNELD_AWAITING_LOCKIN  ListpeersPeersChannels_ListpeersPeersChannelsState = 1
	ListpeersPeersChannels_CHANNELD_NORMAL           ListpeersPeersChannels_ListpeersPeersChannelsState = 2
	ListpeersPeersChannels_CHANNELD_SHUTTING_DOWN    ListpeersPeersChannels_ListpeersPeersChannelsState = 3
	ListpeersPeersChannels_CLOSINGD_SIGEXCHANGE      ListpeersPeersChannels_ListpeersPeersChannelsState = 4
	ListpeersPeersChannels_CLOSINGD_COMPLETE         ListpeersPeersChannels_ListpeersPeersChannelsState = 5
	ListpeersPeersChannels_AWAITING_UNILATERAL       ListpeersPeersChannels_ListpeersPeersChannelsState = 6
	ListpeersPeersChannels_FUNDING_SPEND_SEEN        ListpeersPeersChannels_ListpeersPeersChannelsState = 7
	ListpeersPeersChannels_ONCHAIN                   ListpeersPeersChannels_ListpeersPeersChannelsState = 8
	ListpeersPeersChannels_DUALOPEND_OPEN_INIT       ListpeersPeersChannels_ListpeersPeersChannelsState = 9
	ListpeersPeersChannels_DUALOPEND_AWAITING_LOCKIN ListpeersPeersChannels_ListpeersPeersChannelsState = 10
)

// Enum value maps for ListpeersPeersChannels_ListpeersPeersChannelsState.
var (
	ListpeersPeersChannels_ListpeersPeersChannelsState_name = map[int32]string{
		0:  "OPENINGD",
		1:  "CHANNELD_AWAITING_LOCKIN",
		2:  "CHANNELD_NORMAL",
		3:  "CHANNELD_SHUTTING_DOWN",
		4:  "CLOSINGD_SIGEXCHANGE",
		5:  "CLOSINGD_COMPLETE",
		6:  "AWAITING_UNILATERAL",
		7:  "FUNDING_SPEND_SEEN",
		8:  "ONCHAIN",
		9:  "DUALOPEND_OPEN_INIT",
		10: "DUALOPEND_AWAITING_LOCKIN",
	}
	ListpeersPeersChannels_ListpeersPeersChannelsState_value = map[string]int32{
		"OPENINGD":                  0,
		"CHANNELD_AWAITING_LOCKIN":  1,
		"CHANNELD_NORMAL":           2,
		"CHANNELD_SHUTTING_DOWN":    3,
		"CLOSINGD_SIGEXCHANGE":      4,
		"CLOSINGD_COMPLETE":         5,
		"AWAITING_UNILATERAL":       6,
		"FUNDING_SPEND_SEEN":        7,
		"ONCHAIN":                   8,
		"DUALOPEND_OPEN_INIT":       9,
		"DUALOPEND_AWAITING_LOCKIN": 10,
	}
)

func (x ListpeersPeersChannels_ListpeersPeersChannelsState) Enum() *ListpeersPeersChannels_ListpeersPeersChannelsState {
	p := new(ListpeersPeersChannels_ListpeersPeersChannelsState)
	*p = x
	return p
}

func (x ListpeersPeersChannels_ListpeersPeersChannelsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListpeersPeersChannels_ListpeersPeersChannelsState) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[3].Descriptor()
}

func (ListpeersPeersChannels_ListpeersPeersChannelsState) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[3]
}

func (x ListpeersPeersChannels_ListpeersPeersChannelsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListpeersPeersChannels_ListpeersPeersChannelsState.Descriptor instead.
func (ListpeersPeersChannels_ListpeersPeersChannelsState) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{9, 0}
}

// ListPeers.peers[].channels[].htlcs[].direction
type ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection int32

const (
	ListpeersPeersChannelsHtlcs_IN  ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection = 0
	ListpeersPeersChannelsHtlcs_OUT ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection = 1
)

// Enum value maps for ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection.
var (
	ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection_name = map[int32]string{
		0: "IN",
		1: "OUT",
	}
	ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection_value = map[string]int32{
		"IN":  0,
		"OUT": 1,
	}
)

func (x ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) Enum() *ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection {
	p := new(ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection)
	*p = x
	return p
}

func (x ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[4].Descriptor()
}

func (ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[4]
}

func (x ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection.Descriptor instead.
func (ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{13, 0}
}

// ListFunds.outputs[].status
type ListfundsOutputs_ListfundsOutputsStatus int32

const (
	ListfundsOutputs_UNCONFIRMED ListfundsOutputs_ListfundsOutputsStatus = 0
	ListfundsOutputs_CONFIRMED   ListfundsOutputs_ListfundsOutputsStatus = 1
	ListfundsOutputs_SPENT       ListfundsOutputs_ListfundsOutputsStatus = 2
)

// Enum value maps for ListfundsOutputs_ListfundsOutputsStatus.
var (
	ListfundsOutputs_ListfundsOutputsStatus_name = map[int32]string{
		0: "UNCONFIRMED",
		1: "CONFIRMED",
		2: "SPENT",
	}
	ListfundsOutputs_ListfundsOutputsStatus_value = map[string]int32{
		"UNCONFIRMED": 0,
		"CONFIRMED":   1,
		"SPENT":       2,
	}
)

func (x ListfundsOutputs_ListfundsOutputsStatus) Enum() *ListfundsOutputs_ListfundsOutputsStatus {
	p := new(ListfundsOutputs_ListfundsOutputsStatus)
	*p = x
	return p
}

func (x ListfundsOutputs_ListfundsOutputsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListfundsOutputs_ListfundsOutputsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[5].Descriptor()
}

func (ListfundsOutputs_ListfundsOutputsStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[5]
}

func (x ListfundsOutputs_ListfundsOutputsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListfundsOutputs_ListfundsOutputsStatus.Descriptor instead.
func (ListfundsOutputs_ListfundsOutputsStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{16, 0}
}

// SendPay.status
type SendpayResponse_SendpayStatus int32

const (
	SendpayResponse_PENDING  SendpayResponse_SendpayStatus = 0
	SendpayResponse_COMPLETE SendpayResponse_SendpayStatus = 1
)

// Enum value maps for SendpayResponse_SendpayStatus.
var (
	SendpayResponse_SendpayStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETE",
	}
	SendpayResponse_SendpayStatus_value = map[string]int32{
		"PENDING":  0,
		"COMPLETE": 1,
	}
)

func (x SendpayResponse_SendpayStatus) Enum() *SendpayResponse_SendpayStatus {
	p := new(SendpayResponse_SendpayStatus)
	*p = x
	return p
}

func (x SendpayResponse_SendpayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendpayResponse_SendpayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[6].Descriptor()
}

func (SendpayResponse_SendpayStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[6]
}

func (x SendpayResponse_SendpayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendpayResponse_SendpayStatus.Descriptor instead.
func (SendpayResponse_SendpayStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{19, 0}
}

// Close.type
type CloseResponse_CloseType int32

const (
	CloseResponse_MUTUAL     CloseResponse_CloseType = 0
	CloseResponse_UNILATERAL CloseResponse_CloseType = 1
	CloseResponse_UNOPENED   CloseResponse_CloseType = 2
)

// Enum value maps for CloseResponse_CloseType.
var (
	CloseResponse_CloseType_name = map[int32]string{
		0: "MUTUAL",
		1: "UNILATERAL",
		2: "UNOPENED",
	}
	CloseResponse_CloseType_value = map[string]int32{
		"MUTUAL":     0,
		"UNILATERAL": 1,
		"UNOPENED":   2,
	}
)

func (x CloseResponse_CloseType) Enum() *CloseResponse_CloseType {
	p := new(CloseResponse_CloseType)
	*p = x
	return p
}

func (x CloseResponse_CloseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseResponse_CloseType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[7].Descriptor()
}

func (CloseResponse_CloseType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[7]
}

func (x CloseResponse_CloseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseResponse_CloseType.Descriptor instead.
func (CloseResponse_CloseType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{31, 0}
}

// Connect.direction
type ConnectResponse_ConnectDirection int32

const (
	ConnectResponse_IN  ConnectResponse_ConnectDirection = 0
	ConnectResponse_OUT ConnectResponse_ConnectDirection = 1
)

// Enum value maps for ConnectResponse_ConnectDirection.
var (
	ConnectResponse_ConnectDirection_name = map[int32]string{
		0: "IN",
		1: "OUT",
	}
	ConnectResponse_ConnectDirection_value = map[string]int32{
		"IN":  0,
		"OUT": 1,
	}
)

func (x ConnectResponse_ConnectDirection) Enum() *ConnectResponse_ConnectDirection {
	p := new(ConnectResponse_ConnectDirection)
	*p = x
	return p
}

func (x ConnectResponse_ConnectDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectResponse_ConnectDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[8].Descriptor()
}

func (ConnectResponse_ConnectDirection) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[8]
}

func (x ConnectResponse_ConnectDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectResponse_ConnectDirection.Descriptor instead.
func (ConnectResponse_ConnectDirection) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{33, 0}
}

// Connect.address.type
type ConnectAddress_ConnectAddressType int32

const (
	ConnectAddress_LOCAL_SOCKET ConnectAddress_ConnectAddressType = 0
	ConnectAddress_IPV4         ConnectAddress_ConnectAddressType = 1
	ConnectAddress_IPV6         ConnectAddress_ConnectAddressType = 2
	ConnectAddress_TORV2        ConnectAddress_ConnectAddressType = 3
	ConnectAddress_TORV3        ConnectAddress_ConnectAddressType = 4
)

// Enum value maps for ConnectAddress_ConnectAddressType.
var (
	ConnectAddress_ConnectAddressType_name = map[int32]string{
		0: "LOCAL_SOCKET",
		1: "IPV4",
		2: "IPV6",
		3: "TORV2",
		4: "TORV3",
	}
	ConnectAddress_ConnectAddressType_value = map[string]int32{
		"LOCAL_SOCKET": 0,
		"IPV4":         1,
		"IPV6":         2,
		"TORV2":        3,
		"TORV3":        4,
	}
)

func (x ConnectAddress_ConnectAddressType) Enum() *ConnectAddress_ConnectAddressType {
	p := new(ConnectAddress_ConnectAddressType)
	*p = x
	return p
}

func (x ConnectAddress_ConnectAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectAddress_ConnectAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[9].Descriptor()
}

func (ConnectAddress_ConnectAddressType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[9]
}

func (x ConnectAddress_ConnectAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectAddress_ConnectAddressType.Descriptor instead.
func (ConnectAddress_ConnectAddressType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{34, 0}
}

// CreateInvoice.status
type CreateinvoiceResponse_CreateinvoiceStatus int32

const (
	CreateinvoiceResponse_PAID    CreateinvoiceResponse_CreateinvoiceStatus = 0
	CreateinvoiceResponse_EXPIRED CreateinvoiceResponse_CreateinvoiceStatus = 1
	CreateinvoiceResponse_UNPAID  CreateinvoiceResponse_CreateinvoiceStatus = 2
)

// Enum value maps for CreateinvoiceResponse_CreateinvoiceStatus.
var (
	CreateinvoiceResponse_CreateinvoiceStatus_name = map[int32]string{
		0: "PAID",
		1: "EXPIRED",
		2: "UNPAID",
	}
	CreateinvoiceResponse_CreateinvoiceStatus_value = map[string]int32{
		"PAID":    0,
		"EXPIRED": 1,
		"UNPAID":  2,
	}
)

func (x CreateinvoiceResponse_CreateinvoiceStatus) Enum() *CreateinvoiceResponse_CreateinvoiceStatus {
	p := new(CreateinvoiceResponse_CreateinvoiceStatus)
	*p = x
	return p
}

func (x CreateinvoiceResponse_CreateinvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateinvoiceResponse_CreateinvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[10].Descriptor()
}

func (CreateinvoiceResponse_CreateinvoiceStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[10]
}

func (x CreateinvoiceResponse_CreateinvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateinvoiceResponse_CreateinvoiceStatus.Descriptor instead.
func (CreateinvoiceResponse_CreateinvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{36, 0}
}

// Datastore.mode
type DatastoreRequest_DatastoreMode int32

const (
	DatastoreRequest_MUST_CREATE       DatastoreRequest_DatastoreMode = 0
	DatastoreRequest_MUST_REPLACE      DatastoreRequest_DatastoreMode = 1
	DatastoreRequest_CREATE_OR_REPLACE DatastoreRequest_DatastoreMode = 2
	DatastoreRequest_MUST_APPEND       DatastoreRequest_DatastoreMode = 3
	DatastoreRequest_CREATE_OR_APPEND  DatastoreRequest_DatastoreMode = 4
)

// Enum value maps for DatastoreRequest_DatastoreMode.
var (
	DatastoreRequest_DatastoreMode_name = map[int32]string{
		0: "MUST_CREATE",
		1: "MUST_REPLACE",
		2: "CREATE_OR_REPLACE",
		3: "MUST_APPEND",
		4: "CREATE_OR_APPEND",
	}
	DatastoreRequest_DatastoreMode_value = map[string]int32{
		"MUST_CREATE":       0,
		"MUST_REPLACE":      1,
		"CREATE_OR_REPLACE": 2,
		"MUST_APPEND":       3,
		"CREATE_OR_APPEND":  4,
	}
)

func (x DatastoreRequest_DatastoreMode) Enum() *DatastoreRequest_DatastoreMode {
	p := new(DatastoreRequest_DatastoreMode)
	*p = x
	return p
}

func (x DatastoreRequest_DatastoreMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatastoreRequest_DatastoreMode) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[11].Descriptor()
}

func (DatastoreRequest_DatastoreMode) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[11]
}

func (x DatastoreRequest_DatastoreMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatastoreRequest_DatastoreMode.Descriptor instead.
func (DatastoreRequest_DatastoreMode) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{37, 0}
}

// DelInvoice.status
type DelinvoiceRequest_DelinvoiceStatus int32

const (
	DelinvoiceRequest_PAID    DelinvoiceRequest_DelinvoiceStatus = 0
	DelinvoiceRequest_EXPIRED DelinvoiceRequest_DelinvoiceStatus = 1
	DelinvoiceRequest_UNPAID  DelinvoiceRequest_DelinvoiceStatus = 2
)

// Enum value maps for DelinvoiceRequest_DelinvoiceStatus.
var (
	DelinvoiceRequest_DelinvoiceStatus_name = map[int32]string{
		0: "PAID",
		1: "EXPIRED",
		2: "UNPAID",
	}
	DelinvoiceRequest_DelinvoiceStatus_value = map[string]int32{
		"PAID":    0,
		"EXPIRED": 1,
		"UNPAID":  2,
	}
)

func (x DelinvoiceRequest_DelinvoiceStatus) Enum() *DelinvoiceRequest_DelinvoiceStatus {
	p := new(DelinvoiceRequest_DelinvoiceStatus)
	*p = x
	return p
}

func (x DelinvoiceRequest_DelinvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelinvoiceRequest_DelinvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[12].Descriptor()
}

func (DelinvoiceRequest_DelinvoiceStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[12]
}

func (x DelinvoiceRequest_DelinvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelinvoiceRequest_DelinvoiceStatus.Descriptor instead.
func (DelinvoiceRequest_DelinvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{46, 0}
}

// DelInvoice.status
type DelinvoiceResponse_DelinvoiceStatus int32

const (
	DelinvoiceResponse_PAID    DelinvoiceResponse_DelinvoiceStatus = 0
	DelinvoiceResponse_EXPIRED DelinvoiceResponse_DelinvoiceStatus = 1
	DelinvoiceResponse_UNPAID  DelinvoiceResponse_DelinvoiceStatus = 2
)

// Enum value maps for DelinvoiceResponse_DelinvoiceStatus.
var (
	DelinvoiceResponse_DelinvoiceStatus_name = map[int32]string{
		0: "PAID",
		1: "EXPIRED",
		2: "UNPAID",
	}
	DelinvoiceResponse_DelinvoiceStatus_value = map[string]int32{
		"PAID":    0,
		"EXPIRED": 1,
		"UNPAID":  2,
	}
)

func (x DelinvoiceResponse_DelinvoiceStatus) Enum() *DelinvoiceResponse_DelinvoiceStatus {
	p := new(DelinvoiceResponse_DelinvoiceStatus)
	*p = x
	return p
}

func (x DelinvoiceResponse_DelinvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DelinvoiceResponse_DelinvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[13].Descriptor()
}

func (DelinvoiceResponse_DelinvoiceStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[13]
}

func (x DelinvoiceResponse_DelinvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DelinvoiceResponse_DelinvoiceStatus.Descriptor instead.
func (DelinvoiceResponse_DelinvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{47, 0}
}

// ListInvoices.invoices[].status
type ListinvoicesInvoices_ListinvoicesInvoicesStatus int32

const (
	ListinvoicesInvoices_UNPAID  ListinvoicesInvoices_ListinvoicesInvoicesStatus = 0
	ListinvoicesInvoices_PAID    ListinvoicesInvoices_ListinvoicesInvoicesStatus = 1
	ListinvoicesInvoices_EXPIRED ListinvoicesInvoices_ListinvoicesInvoicesStatus = 2
)

// Enum value maps for ListinvoicesInvoices_ListinvoicesInvoicesStatus.
var (
	ListinvoicesInvoices_ListinvoicesInvoicesStatus_name = map[int32]string{
		0: "UNPAID",
		1: "PAID",
		2: "EXPIRED",
	}
	ListinvoicesInvoices_ListinvoicesInvoicesStatus_value = map[string]int32{
		"UNPAID":  0,
		"PAID":    1,
		"EXPIRED": 2,
	}
)

func (x ListinvoicesInvoices_ListinvoicesInvoicesStatus) Enum() *ListinvoicesInvoices_ListinvoicesInvoicesStatus {
	p := new(ListinvoicesInvoices_ListinvoicesInvoicesStatus)
	*p = x
	return p
}

func (x ListinvoicesInvoices_ListinvoicesInvoicesStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListinvoicesInvoices_ListinvoicesInvoicesStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[14].Descriptor()
}

func (ListinvoicesInvoices_ListinvoicesInvoicesStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[14]
}

func (x ListinvoicesInvoices_ListinvoicesInvoicesStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListinvoicesInvoices_ListinvoicesInvoicesStatus.Descriptor instead.
func (ListinvoicesInvoices_ListinvoicesInvoicesStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{55, 0}
}

// SendOnion.status
type SendonionResponse_SendonionStatus int32

const (
	SendonionResponse_PENDING  SendonionResponse_SendonionStatus = 0
	SendonionResponse_COMPLETE SendonionResponse_SendonionStatus = 1
)

// Enum value maps for SendonionResponse_SendonionStatus.
var (
	SendonionResponse_SendonionStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETE",
	}
	SendonionResponse_SendonionStatus_value = map[string]int32{
		"PENDING":  0,
		"COMPLETE": 1,
	}
)

func (x SendonionResponse_SendonionStatus) Enum() *SendonionResponse_SendonionStatus {
	p := new(SendonionResponse_SendonionStatus)
	*p = x
	return p
}

func (x SendonionResponse_SendonionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendonionResponse_SendonionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[15].Descriptor()
}

func (SendonionResponse_SendonionStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[15]
}

func (x SendonionResponse_SendonionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendonionResponse_SendonionStatus.Descriptor instead.
func (SendonionResponse_SendonionStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{57, 0}
}

// ListSendPays.status
type ListsendpaysRequest_ListsendpaysStatus int32

const (
	ListsendpaysRequest_PENDING  ListsendpaysRequest_ListsendpaysStatus = 0
	ListsendpaysRequest_COMPLETE ListsendpaysRequest_ListsendpaysStatus = 1
	ListsendpaysRequest_FAILED   ListsendpaysRequest_ListsendpaysStatus = 2
)

// Enum value maps for ListsendpaysRequest_ListsendpaysStatus.
var (
	ListsendpaysRequest_ListsendpaysStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETE",
		2: "FAILED",
	}
	ListsendpaysRequest_ListsendpaysStatus_value = map[string]int32{
		"PENDING":  0,
		"COMPLETE": 1,
		"FAILED":   2,
	}
)

func (x ListsendpaysRequest_ListsendpaysStatus) Enum() *ListsendpaysRequest_ListsendpaysStatus {
	p := new(ListsendpaysRequest_ListsendpaysStatus)
	*p = x
	return p
}

func (x ListsendpaysRequest_ListsendpaysStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListsendpaysRequest_ListsendpaysStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[16].Descriptor()
}

func (ListsendpaysRequest_ListsendpaysStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[16]
}

func (x ListsendpaysRequest_ListsendpaysStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListsendpaysRequest_ListsendpaysStatus.Descriptor instead.
func (ListsendpaysRequest_ListsendpaysStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{59, 0}
}

// ListSendPays.payments[].status
type ListsendpaysPayments_ListsendpaysPaymentsStatus int32

const (
	ListsendpaysPayments_PENDING  ListsendpaysPayments_ListsendpaysPaymentsStatus = 0
	ListsendpaysPayments_FAILED   ListsendpaysPayments_ListsendpaysPaymentsStatus = 1
	ListsendpaysPayments_COMPLETE ListsendpaysPayments_ListsendpaysPaymentsStatus = 2
)

// Enum value maps for ListsendpaysPayments_ListsendpaysPaymentsStatus.
var (
	ListsendpaysPayments_ListsendpaysPaymentsStatus_name = map[int32]string{
		0: "PENDING",
		1: "FAILED",
		2: "COMPLETE",
	}
	ListsendpaysPayments_ListsendpaysPaymentsStatus_value = map[string]int32{
		"PENDING":  0,
		"FAILED":   1,
		"COMPLETE": 2,
	}
)

func (x ListsendpaysPayments_ListsendpaysPaymentsStatus) Enum() *ListsendpaysPayments_ListsendpaysPaymentsStatus {
	p := new(ListsendpaysPayments_ListsendpaysPaymentsStatus)
	*p = x
	return p
}

func (x ListsendpaysPayments_ListsendpaysPaymentsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListsendpaysPayments_ListsendpaysPaymentsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[17].Descriptor()
}

func (ListsendpaysPayments_ListsendpaysPaymentsStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[17]
}

func (x ListsendpaysPayments_ListsendpaysPaymentsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListsendpaysPayments_ListsendpaysPaymentsStatus.Descriptor instead.
func (ListsendpaysPayments_ListsendpaysPaymentsStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{61, 0}
}

// ListTransactions.transactions[].inputs[].type
type ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType int32

const (
	ListtransactionsTransactionsInputs_THEIRS                   ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 0
	ListtransactionsTransactionsInputs_DEPOSIT                  ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 1
	ListtransactionsTransactionsInputs_WITHDRAW                 ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 2
	ListtransactionsTransactionsInputs_CHANNEL_FUNDING          ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 3
	ListtransactionsTransactionsInputs_CHANNEL_MUTUAL_CLOSE     ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 4
	ListtransactionsTransactionsInputs_CHANNEL_UNILATERAL_CLOSE ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 5
	ListtransactionsTransactionsInputs_CHANNEL_SWEEP            ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 6
	ListtransactionsTransactionsInputs_CHANNEL_HTLC_SUCCESS     ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 7
	ListtransactionsTransactionsInputs_CHANNEL_HTLC_TIMEOUT     ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 8
	ListtransactionsTransactionsInputs_CHANNEL_PENALTY          ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 9
	ListtransactionsTransactionsInputs_CHANNEL_UNILATERAL_CHEAT ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType = 10
)

// Enum value maps for ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType.
var (
	ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType_name = map[int32]string{
		0:  "THEIRS",
		1:  "DEPOSIT",
		2:  "WITHDRAW",
		3:  "CHANNEL_FUNDING",
		4:  "CHANNEL_MUTUAL_CLOSE",
		5:  "CHANNEL_UNILATERAL_CLOSE",
		6:  "CHANNEL_SWEEP",
		7:  "CHANNEL_HTLC_SUCCESS",
		8:  "CHANNEL_HTLC_TIMEOUT",
		9:  "CHANNEL_PENALTY",
		10: "CHANNEL_UNILATERAL_CHEAT",
	}
	ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType_value = map[string]int32{
		"THEIRS":                   0,
		"DEPOSIT":                  1,
		"WITHDRAW":                 2,
		"CHANNEL_FUNDING":          3,
		"CHANNEL_MUTUAL_CLOSE":     4,
		"CHANNEL_UNILATERAL_CLOSE": 5,
		"CHANNEL_SWEEP":            6,
		"CHANNEL_HTLC_SUCCESS":     7,
		"CHANNEL_HTLC_TIMEOUT":     8,
		"CHANNEL_PENALTY":          9,
		"CHANNEL_UNILATERAL_CHEAT": 10,
	}
)

func (x ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) Enum() *ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType {
	p := new(ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType)
	*p = x
	return p
}

func (x ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[18].Descriptor()
}

func (ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[18]
}

func (x ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType.Descriptor instead.
func (ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{65, 0}
}

// ListTransactions.transactions[].outputs[].type
type ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType int32

const (
	ListtransactionsTransactionsOutputs_THEIRS                   ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 0
	ListtransactionsTransactionsOutputs_DEPOSIT                  ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 1
	ListtransactionsTransactionsOutputs_WITHDRAW                 ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 2
	ListtransactionsTransactionsOutputs_CHANNEL_FUNDING          ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 3
	ListtransactionsTransactionsOutputs_CHANNEL_MUTUAL_CLOSE     ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 4
	ListtransactionsTransactionsOutputs_CHANNEL_UNILATERAL_CLOSE ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 5
	ListtransactionsTransactionsOutputs_CHANNEL_SWEEP            ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 6
	ListtransactionsTransactionsOutputs_CHANNEL_HTLC_SUCCESS     ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 7
	ListtransactionsTransactionsOutputs_CHANNEL_HTLC_TIMEOUT     ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 8
	ListtransactionsTransactionsOutputs_CHANNEL_PENALTY          ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 9
	ListtransactionsTransactionsOutputs_CHANNEL_UNILATERAL_CHEAT ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType = 10
)

// Enum value maps for ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType.
var (
	ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType_name = map[int32]string{
		0:  "THEIRS",
		1:  "DEPOSIT",
		2:  "WITHDRAW",
		3:  "CHANNEL_FUNDING",
		4:  "CHANNEL_MUTUAL_CLOSE",
		5:  "CHANNEL_UNILATERAL_CLOSE",
		6:  "CHANNEL_SWEEP",
		7:  "CHANNEL_HTLC_SUCCESS",
		8:  "CHANNEL_HTLC_TIMEOUT",
		9:  "CHANNEL_PENALTY",
		10: "CHANNEL_UNILATERAL_CHEAT",
	}
	ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType_value = map[string]int32{
		"THEIRS":                   0,
		"DEPOSIT":                  1,
		"WITHDRAW":                 2,
		"CHANNEL_FUNDING":          3,
		"CHANNEL_MUTUAL_CLOSE":     4,
		"CHANNEL_UNILATERAL_CLOSE": 5,
		"CHANNEL_SWEEP":            6,
		"CHANNEL_HTLC_SUCCESS":     7,
		"CHANNEL_HTLC_TIMEOUT":     8,
		"CHANNEL_PENALTY":          9,
		"CHANNEL_UNILATERAL_CHEAT": 10,
	}
)

func (x ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) Enum() *ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType {
	p := new(ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType)
	*p = x
	return p
}

func (x ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[19].Descriptor()
}

func (ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[19]
}

func (x ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType.Descriptor instead.
func (ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{66, 0}
}

// Pay.status
type PayResponse_PayStatus int32

const (
	PayResponse_COMPLETE PayResponse_PayStatus = 0
	PayResponse_PENDING  PayResponse_PayStatus = 1
	PayResponse_FAILED   PayResponse_PayStatus = 2
)

// Enum value maps for PayResponse_PayStatus.
var (
	PayResponse_PayStatus_name = map[int32]string{
		0: "COMPLETE",
		1: "PENDING",
		2: "FAILED",
	}
	PayResponse_PayStatus_value = map[string]int32{
		"COMPLETE": 0,
		"PENDING":  1,
		"FAILED":   2,
	}
)

func (x PayResponse_PayStatus) Enum() *PayResponse_PayStatus {
	p := new(PayResponse_PayStatus)
	*p = x
	return p
}

func (x PayResponse_PayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayResponse_PayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[20].Descriptor()
}

func (PayResponse_PayStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[20]
}

func (x PayResponse_PayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayResponse_PayStatus.Descriptor instead.
func (PayResponse_PayStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{68, 0}
}

// ListNodes.nodes[].addresses[].type
type ListnodesNodesAddresses_ListnodesNodesAddressesType int32

const (
	ListnodesNodesAddresses_DNS       ListnodesNodesAddresses_ListnodesNodesAddressesType = 0
	ListnodesNodesAddresses_IPV4      ListnodesNodesAddresses_ListnodesNodesAddressesType = 1
	ListnodesNodesAddresses_IPV6      ListnodesNodesAddresses_ListnodesNodesAddressesType = 2
	ListnodesNodesAddresses_TORV2     ListnodesNodesAddresses_ListnodesNodesAddressesType = 3
	ListnodesNodesAddresses_TORV3     ListnodesNodesAddresses_ListnodesNodesAddressesType = 4
	ListnodesNodesAddresses_WEBSOCKET ListnodesNodesAddresses_ListnodesNodesAddressesType = 5
)

// Enum value maps for ListnodesNodesAddresses_ListnodesNodesAddressesType.
var (
	ListnodesNodesAddresses_ListnodesNodesAddressesType_name = map[int32]string{
		0: "DNS",
		1: "IPV4",
		2: "IPV6",
		3: "TORV2",
		4: "TORV3",
		5: "WEBSOCKET",
	}
	ListnodesNodesAddresses_ListnodesNodesAddressesType_value = map[string]int32{
		"DNS":       0,
		"IPV4":      1,
		"IPV6":      2,
		"TORV2":     3,
		"TORV3":     4,
		"WEBSOCKET": 5,
	}
)

func (x ListnodesNodesAddresses_ListnodesNodesAddressesType) Enum() *ListnodesNodesAddresses_ListnodesNodesAddressesType {
	p := new(ListnodesNodesAddresses_ListnodesNodesAddressesType)
	*p = x
	return p
}

func (x ListnodesNodesAddresses_ListnodesNodesAddressesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListnodesNodesAddresses_ListnodesNodesAddressesType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[21].Descriptor()
}

func (ListnodesNodesAddresses_ListnodesNodesAddressesType) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[21]
}

func (x ListnodesNodesAddresses_ListnodesNodesAddressesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListnodesNodesAddresses_ListnodesNodesAddressesType.Descriptor instead.
func (ListnodesNodesAddresses_ListnodesNodesAddressesType) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{72, 0}
}

// WaitAnyInvoice.status
type WaitanyinvoiceResponse_WaitanyinvoiceStatus int32

const (
	WaitanyinvoiceResponse_PAID    WaitanyinvoiceResponse_WaitanyinvoiceStatus = 0
	WaitanyinvoiceResponse_EXPIRED WaitanyinvoiceResponse_WaitanyinvoiceStatus = 1
)

// Enum value maps for WaitanyinvoiceResponse_WaitanyinvoiceStatus.
var (
	WaitanyinvoiceResponse_WaitanyinvoiceStatus_name = map[int32]string{
		0: "PAID",
		1: "EXPIRED",
	}
	WaitanyinvoiceResponse_WaitanyinvoiceStatus_value = map[string]int32{
		"PAID":    0,
		"EXPIRED": 1,
	}
)

func (x WaitanyinvoiceResponse_WaitanyinvoiceStatus) Enum() *WaitanyinvoiceResponse_WaitanyinvoiceStatus {
	p := new(WaitanyinvoiceResponse_WaitanyinvoiceStatus)
	*p = x
	return p
}

func (x WaitanyinvoiceResponse_WaitanyinvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitanyinvoiceResponse_WaitanyinvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[22].Descriptor()
}

func (WaitanyinvoiceResponse_WaitanyinvoiceStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[22]
}

func (x WaitanyinvoiceResponse_WaitanyinvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitanyinvoiceResponse_WaitanyinvoiceStatus.Descriptor instead.
func (WaitanyinvoiceResponse_WaitanyinvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{74, 0}
}

// WaitInvoice.status
type WaitinvoiceResponse_WaitinvoiceStatus int32

const (
	WaitinvoiceResponse_PAID    WaitinvoiceResponse_WaitinvoiceStatus = 0
	WaitinvoiceResponse_EXPIRED WaitinvoiceResponse_WaitinvoiceStatus = 1
)

// Enum value maps for WaitinvoiceResponse_WaitinvoiceStatus.
var (
	WaitinvoiceResponse_WaitinvoiceStatus_name = map[int32]string{
		0: "PAID",
		1: "EXPIRED",
	}
	WaitinvoiceResponse_WaitinvoiceStatus_value = map[string]int32{
		"PAID":    0,
		"EXPIRED": 1,
	}
)

func (x WaitinvoiceResponse_WaitinvoiceStatus) Enum() *WaitinvoiceResponse_WaitinvoiceStatus {
	p := new(WaitinvoiceResponse_WaitinvoiceStatus)
	*p = x
	return p
}

func (x WaitinvoiceResponse_WaitinvoiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitinvoiceResponse_WaitinvoiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[23].Descriptor()
}

func (WaitinvoiceResponse_WaitinvoiceStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[23]
}

func (x WaitinvoiceResponse_WaitinvoiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitinvoiceResponse_WaitinvoiceStatus.Descriptor instead.
func (WaitinvoiceResponse_WaitinvoiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{76, 0}
}

// WaitSendPay.status
type WaitsendpayResponse_WaitsendpayStatus int32

const (
	WaitsendpayResponse_COMPLETE WaitsendpayResponse_WaitsendpayStatus = 0
)

// Enum value maps for WaitsendpayResponse_WaitsendpayStatus.
var (
	WaitsendpayResponse_WaitsendpayStatus_name = map[int32]string{
		0: "COMPLETE",
	}
	WaitsendpayResponse_WaitsendpayStatus_value = map[string]int32{
		"COMPLETE": 0,
	}
)

func (x WaitsendpayResponse_WaitsendpayStatus) Enum() *WaitsendpayResponse_WaitsendpayStatus {
	p := new(WaitsendpayResponse_WaitsendpayStatus)
	*p = x
	return p
}

func (x WaitsendpayResponse_WaitsendpayStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitsendpayResponse_WaitsendpayStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[24].Descriptor()
}

func (WaitsendpayResponse_WaitsendpayStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[24]
}

func (x WaitsendpayResponse_WaitsendpayStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitsendpayResponse_WaitsendpayStatus.Descriptor instead.
func (WaitsendpayResponse_WaitsendpayStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{78, 0}
}

// NewAddr.addresstype
type NewaddrRequest_NewaddrAddresstype int32

const (
	NewaddrRequest_BECH32      NewaddrRequest_NewaddrAddresstype = 0
	NewaddrRequest_P2SH_SEGWIT NewaddrRequest_NewaddrAddresstype = 1
	NewaddrRequest_ALL         NewaddrRequest_NewaddrAddresstype = 2
)

// Enum value maps for NewaddrRequest_NewaddrAddresstype.
var (
	NewaddrRequest_NewaddrAddresstype_name = map[int32]string{
		0: "BECH32",
		1: "P2SH_SEGWIT",
		2: "ALL",
	}
	NewaddrRequest_NewaddrAddresstype_value = map[string]int32{
		"BECH32":      0,
		"P2SH_SEGWIT": 1,
		"ALL":         2,
	}
)

func (x NewaddrRequest_NewaddrAddresstype) Enum() *NewaddrRequest_NewaddrAddresstype {
	p := new(NewaddrRequest_NewaddrAddresstype)
	*p = x
	return p
}

func (x NewaddrRequest_NewaddrAddresstype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewaddrRequest_NewaddrAddresstype) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[25].Descriptor()
}

func (NewaddrRequest_NewaddrAddresstype) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[25]
}

func (x NewaddrRequest_NewaddrAddresstype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewaddrRequest_NewaddrAddresstype.Descriptor instead.
func (NewaddrRequest_NewaddrAddresstype) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{79, 0}
}

// KeySend.status
type KeysendResponse_KeysendStatus int32

const (
	KeysendResponse_COMPLETE KeysendResponse_KeysendStatus = 0
)

// Enum value maps for KeysendResponse_KeysendStatus.
var (
	KeysendResponse_KeysendStatus_name = map[int32]string{
		0: "COMPLETE",
	}
	KeysendResponse_KeysendStatus_value = map[string]int32{
		"COMPLETE": 0,
	}
)

func (x KeysendResponse_KeysendStatus) Enum() *KeysendResponse_KeysendStatus {
	p := new(KeysendResponse_KeysendStatus)
	*p = x
	return p
}

func (x KeysendResponse_KeysendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeysendResponse_KeysendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[26].Descriptor()
}

func (KeysendResponse_KeysendStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[26]
}

func (x KeysendResponse_KeysendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeysendResponse_KeysendStatus.Descriptor instead.
func (KeysendResponse_KeysendStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{84, 0}
}

// Feerates.style
type FeeratesRequest_FeeratesStyle int32

const (
	FeeratesRequest_PERKB FeeratesRequest_FeeratesStyle = 0
	FeeratesRequest_PERKW FeeratesRequest_FeeratesStyle = 1
)

// Enum value maps for FeeratesRequest_FeeratesStyle.
var (
	FeeratesRequest_FeeratesStyle_name = map[int32]string{
		0: "PERKB",
		1: "PERKW",
	}
	FeeratesRequest_FeeratesStyle_value = map[string]int32{
		"PERKB": 0,
		"PERKW": 1,
	}
)

func (x FeeratesRequest_FeeratesStyle) Enum() *FeeratesRequest_FeeratesStyle {
	p := new(FeeratesRequest_FeeratesStyle)
	*p = x
	return p
}

func (x FeeratesRequest_FeeratesStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeratesRequest_FeeratesStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[27].Descriptor()
}

func (FeeratesRequest_FeeratesStyle) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[27]
}

func (x FeeratesRequest_FeeratesStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeratesRequest_FeeratesStyle.Descriptor instead.
func (FeeratesRequest_FeeratesStyle) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{104, 0}
}

// GetRoute.route[].style
type GetrouteRoute_GetrouteRouteStyle int32

const (
	GetrouteRoute_TLV GetrouteRoute_GetrouteRouteStyle = 0
)

// Enum value maps for GetrouteRoute_GetrouteRouteStyle.
var (
	GetrouteRoute_GetrouteRouteStyle_name = map[int32]string{
		0: "TLV",
	}
	GetrouteRoute_GetrouteRouteStyle_value = map[string]int32{
		"TLV": 0,
	}
)

func (x GetrouteRoute_GetrouteRouteStyle) Enum() *GetrouteRoute_GetrouteRouteStyle {
	p := new(GetrouteRoute_GetrouteRouteStyle)
	*p = x
	return p
}

func (x GetrouteRoute_GetrouteRouteStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetrouteRoute_GetrouteRouteStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[28].Descriptor()
}

func (GetrouteRoute_GetrouteRouteStyle) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[28]
}

func (x GetrouteRoute_GetrouteRouteStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetrouteRoute_GetrouteRouteStyle.Descriptor instead.
func (GetrouteRoute_GetrouteRouteStyle) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{111, 0}
}

// ListForwards.status
type ListforwardsRequest_ListforwardsStatus int32

const (
	ListforwardsRequest_OFFERED      ListforwardsRequest_ListforwardsStatus = 0
	ListforwardsRequest_SETTLED      ListforwardsRequest_ListforwardsStatus = 1
	ListforwardsRequest_LOCAL_FAILED ListforwardsRequest_ListforwardsStatus = 2
	ListforwardsRequest_FAILED       ListforwardsRequest_ListforwardsStatus = 3
)

// Enum value maps for ListforwardsRequest_ListforwardsStatus.
var (
	ListforwardsRequest_ListforwardsStatus_name = map[int32]string{
		0: "OFFERED",
		1: "SETTLED",
		2: "LOCAL_FAILED",
		3: "FAILED",
	}
	ListforwardsRequest_ListforwardsStatus_value = map[string]int32{
		"OFFERED":      0,
		"SETTLED":      1,
		"LOCAL_FAILED": 2,
		"FAILED":       3,
	}
)

func (x ListforwardsRequest_ListforwardsStatus) Enum() *ListforwardsRequest_ListforwardsStatus {
	p := new(ListforwardsRequest_ListforwardsStatus)
	*p = x
	return p
}

func (x ListforwardsRequest_ListforwardsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListforwardsRequest_ListforwardsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[29].Descriptor()
}

func (ListforwardsRequest_ListforwardsStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[29]
}

func (x ListforwardsRequest_ListforwardsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListforwardsRequest_ListforwardsStatus.Descriptor instead.
func (ListforwardsRequest_ListforwardsStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{112, 0}
}

// ListForwards.forwards[].status
type ListforwardsForwards_ListforwardsForwardsStatus int32

const (
	ListforwardsForwards_OFFERED      ListforwardsForwards_ListforwardsForwardsStatus = 0
	ListforwardsForwards_SETTLED      ListforwardsForwards_ListforwardsForwardsStatus = 1
	ListforwardsForwards_LOCAL_FAILED ListforwardsForwards_ListforwardsForwardsStatus = 2
	ListforwardsForwards_FAILED       ListforwardsForwards_ListforwardsForwardsStatus = 3
)

// Enum value maps for ListforwardsForwards_ListforwardsForwardsStatus.
var (
	ListforwardsForwards_ListforwardsForwardsStatus_name = map[int32]string{
		0: "OFFERED",
		1: "SETTLED",
		2: "LOCAL_FAILED",
		3: "FAILED",
	}
	ListforwardsForwards_ListforwardsForwardsStatus_value = map[string]int32{
		"OFFERED":      0,
		"SETTLED":      1,
		"LOCAL_FAILED": 2,
		"FAILED":       3,
	}
)

func (x ListforwardsForwards_ListforwardsForwardsStatus) Enum() *ListforwardsForwards_ListforwardsForwardsStatus {
	p := new(ListforwardsForwards_ListforwardsForwardsStatus)
	*p = x
	return p
}

func (x ListforwardsForwards_ListforwardsForwardsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListforwardsForwards_ListforwardsForwardsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[30].Descriptor()
}

func (ListforwardsForwards_ListforwardsForwardsStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[30]
}

func (x ListforwardsForwards_ListforwardsForwardsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListforwardsForwards_ListforwardsForwardsStatus.Descriptor instead.
func (ListforwardsForwards_ListforwardsForwardsStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{114, 0}
}

// ListForwards.forwards[].style
type ListforwardsForwards_ListforwardsForwardsStyle int32

const (
	ListforwardsForwards_LEGACY ListforwardsForwards_ListforwardsForwardsStyle = 0
	ListforwardsForwards_TLV    ListforwardsForwards_ListforwardsForwardsStyle = 1
)

// Enum value maps for ListforwardsForwards_ListforwardsForwardsStyle.
var (
	ListforwardsForwards_ListforwardsForwardsStyle_name = map[int32]string{
		0: "LEGACY",
		1: "TLV",
	}
	ListforwardsForwards_ListforwardsForwardsStyle_value = map[string]int32{
		"LEGACY": 0,
		"TLV":    1,
	}
)

func (x ListforwardsForwards_ListforwardsForwardsStyle) Enum() *ListforwardsForwards_ListforwardsForwardsStyle {
	p := new(ListforwardsForwards_ListforwardsForwardsStyle)
	*p = x
	return p
}

func (x ListforwardsForwards_ListforwardsForwardsStyle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListforwardsForwards_ListforwardsForwardsStyle) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[31].Descriptor()
}

func (ListforwardsForwards_ListforwardsForwardsStyle) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[31]
}

func (x ListforwardsForwards_ListforwardsForwardsStyle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListforwardsForwards_ListforwardsForwardsStyle.Descriptor instead.
func (ListforwardsForwards_ListforwardsForwardsStyle) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{114, 1}
}

// ListPays.status
type ListpaysRequest_ListpaysStatus int32

const (
	ListpaysRequest_PENDING  ListpaysRequest_ListpaysStatus = 0
	ListpaysRequest_COMPLETE ListpaysRequest_ListpaysStatus = 1
	ListpaysRequest_FAILED   ListpaysRequest_ListpaysStatus = 2
)

// Enum value maps for ListpaysRequest_ListpaysStatus.
var (
	ListpaysRequest_ListpaysStatus_name = map[int32]string{
		0: "PENDING",
		1: "COMPLETE",
		2: "FAILED",
	}
	ListpaysRequest_ListpaysStatus_value = map[string]int32{
		"PENDING":  0,
		"COMPLETE": 1,
		"FAILED":   2,
	}
)

func (x ListpaysRequest_ListpaysStatus) Enum() *ListpaysRequest_ListpaysStatus {
	p := new(ListpaysRequest_ListpaysStatus)
	*p = x
	return p
}

func (x ListpaysRequest_ListpaysStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListpaysRequest_ListpaysStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[32].Descriptor()
}

func (ListpaysRequest_ListpaysStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[32]
}

func (x ListpaysRequest_ListpaysStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListpaysRequest_ListpaysStatus.Descriptor instead.
func (ListpaysRequest_ListpaysStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{115, 0}
}

// ListPays.pays[].status
type ListpaysPays_ListpaysPaysStatus int32

const (
	ListpaysPays_PENDING  ListpaysPays_ListpaysPaysStatus = 0
	ListpaysPays_FAILED   ListpaysPays_ListpaysPaysStatus = 1
	ListpaysPays_COMPLETE ListpaysPays_ListpaysPaysStatus = 2
)

// Enum value maps for ListpaysPays_ListpaysPaysStatus.
var (
	ListpaysPays_ListpaysPaysStatus_name = map[int32]string{
		0: "PENDING",
		1: "FAILED",
		2: "COMPLETE",
	}
	ListpaysPays_ListpaysPaysStatus_value = map[string]int32{
		"PENDING":  0,
		"FAILED":   1,
		"COMPLETE": 2,
	}
)

func (x ListpaysPays_ListpaysPaysStatus) Enum() *ListpaysPays_ListpaysPaysStatus {
	p := new(ListpaysPays_ListpaysPaysStatus)
	*p = x
	return p
}

func (x ListpaysPays_ListpaysPaysStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListpaysPays_ListpaysPaysStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_node_proto_enumTypes[33].Descriptor()
}

func (ListpaysPays_ListpaysPaysStatus) Type() protoreflect.EnumType {
	return &file_node_proto_enumTypes[33]
}

func (x ListpaysPays_ListpaysPaysStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListpaysPays_ListpaysPaysStatus.Descriptor instead.
func (ListpaysPays_ListpaysPaysStatus) EnumDescriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{117, 0}
}

type GetinfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetinfoRequest) Reset() {
	*x = GetinfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetinfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetinfoRequest) ProtoMessage() {}

func (x *GetinfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetinfoRequest.ProtoReflect.Descriptor instead.
func (*GetinfoRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

type GetinfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    []byte            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Alias                 string            `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Color                 []byte            `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	NumPeers              uint32            `protobuf:"varint,4,opt,name=num_peers,json=numPeers,proto3" json:"num_peers,omitempty"`
	NumPendingChannels    uint32            `protobuf:"varint,5,opt,name=num_pending_channels,json=numPendingChannels,proto3" json:"num_pending_channels,omitempty"`
	NumActiveChannels     uint32            `protobuf:"varint,6,opt,name=num_active_channels,json=numActiveChannels,proto3" json:"num_active_channels,omitempty"`
	NumInactiveChannels   uint32            `protobuf:"varint,7,opt,name=num_inactive_channels,json=numInactiveChannels,proto3" json:"num_inactive_channels,omitempty"`
	Version               string            `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	LightningDir          string            `protobuf:"bytes,9,opt,name=lightning_dir,json=lightningDir,proto3" json:"lightning_dir,omitempty"`
	Blockheight           uint32            `protobuf:"varint,11,opt,name=blockheight,proto3" json:"blockheight,omitempty"`
	Network               string            `protobuf:"bytes,12,opt,name=network,proto3" json:"network,omitempty"`
	FeesCollectedMsat     *Amount           `protobuf:"bytes,13,opt,name=fees_collected_msat,json=feesCollectedMsat,proto3" json:"fees_collected_msat,omitempty"`
	Address               []*GetinfoAddress `protobuf:"bytes,14,rep,name=address,proto3" json:"address,omitempty"`
	Binding               []*GetinfoBinding `protobuf:"bytes,15,rep,name=binding,proto3" json:"binding,omitempty"`
	WarningBitcoindSync   *string           `protobuf:"bytes,16,opt,name=warning_bitcoind_sync,json=warningBitcoindSync,proto3,oneof" json:"warning_bitcoind_sync,omitempty"`
	WarningLightningdSync *string           `protobuf:"bytes,17,opt,name=warning_lightningd_sync,json=warningLightningdSync,proto3,oneof" json:"warning_lightningd_sync,omitempty"`
}

func (x *GetinfoResponse) Reset() {
	*x = GetinfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetinfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetinfoResponse) ProtoMessage() {}

func (x *GetinfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetinfoResponse.ProtoReflect.Descriptor instead.
func (*GetinfoResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *GetinfoResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetinfoResponse) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GetinfoResponse) GetColor() []byte {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *GetinfoResponse) GetNumPeers() uint32 {
	if x != nil {
		return x.NumPeers
	}
	return 0
}

func (x *GetinfoResponse) GetNumPendingChannels() uint32 {
	if x != nil {
		return x.NumPendingChannels
	}
	return 0
}

func (x *GetinfoResponse) GetNumActiveChannels() uint32 {
	if x != nil {
		return x.NumActiveChannels
	}
	return 0
}

func (x *GetinfoResponse) GetNumInactiveChannels() uint32 {
	if x != nil {
		return x.NumInactiveChannels
	}
	return 0
}

func (x *GetinfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetinfoResponse) GetLightningDir() string {
	if x != nil {
		return x.LightningDir
	}
	return ""
}

func (x *GetinfoResponse) GetBlockheight() uint32 {
	if x != nil {
		return x.Blockheight
	}
	return 0
}

func (x *GetinfoResponse) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *GetinfoResponse) GetFeesCollectedMsat() *Amount {
	if x != nil {
		return x.FeesCollectedMsat
	}
	return nil
}

func (x *GetinfoResponse) GetAddress() []*GetinfoAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetinfoResponse) GetBinding() []*GetinfoBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *GetinfoResponse) GetWarningBitcoindSync() string {
	if x != nil && x.WarningBitcoindSync != nil {
		return *x.WarningBitcoindSync
	}
	return ""
}

func (x *GetinfoResponse) GetWarningLightningdSync() string {
	if x != nil && x.WarningLightningdSync != nil {
		return *x.WarningLightningdSync
	}
	return ""
}

type GetinfoOurFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Init    []byte `protobuf:"bytes,1,opt,name=init,proto3" json:"init,omitempty"`
	Node    []byte `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Channel []byte `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Invoice []byte `protobuf:"bytes,4,opt,name=invoice,proto3" json:"invoice,omitempty"`
}

func (x *GetinfoOurFeatures) Reset() {
	*x = GetinfoOurFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetinfoOurFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetinfoOurFeatures) ProtoMessage() {}

func (x *GetinfoOurFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetinfoOurFeatures.ProtoReflect.Descriptor instead.
func (*GetinfoOurFeatures) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *GetinfoOurFeatures) GetInit() []byte {
	if x != nil {
		return x.Init
	}
	return nil
}

func (x *GetinfoOurFeatures) GetNode() []byte {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *GetinfoOurFeatures) GetChannel() []byte {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *GetinfoOurFeatures) GetInvoice() []byte {
	if x != nil {
		return x.Invoice
	}
	return nil
}

type GetinfoAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType GetinfoAddress_GetinfoAddressType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.GetinfoAddress_GetinfoAddressType" json:"item_type,omitempty"`
	Port     uint32                            `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Address  *string                           `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (x *GetinfoAddress) Reset() {
	*x = GetinfoAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetinfoAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetinfoAddress) ProtoMessage() {}

func (x *GetinfoAddress) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetinfoAddress.ProtoReflect.Descriptor instead.
func (*GetinfoAddress) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *GetinfoAddress) GetItemType() GetinfoAddress_GetinfoAddressType {
	if x != nil {
		return x.ItemType
	}
	return GetinfoAddress_DNS
}

func (x *GetinfoAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetinfoAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type GetinfoBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType GetinfoBinding_GetinfoBindingType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.GetinfoBinding_GetinfoBindingType" json:"item_type,omitempty"`
	Address  *string                           `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Port     *uint32                           `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Socket   *string                           `protobuf:"bytes,4,opt,name=socket,proto3,oneof" json:"socket,omitempty"`
}

func (x *GetinfoBinding) Reset() {
	*x = GetinfoBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetinfoBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetinfoBinding) ProtoMessage() {}

func (x *GetinfoBinding) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetinfoBinding.ProtoReflect.Descriptor instead.
func (*GetinfoBinding) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

func (x *GetinfoBinding) GetItemType() GetinfoBinding_GetinfoBindingType {
	if x != nil {
		return x.ItemType
	}
	return GetinfoBinding_LOCAL_SOCKET
}

func (x *GetinfoBinding) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *GetinfoBinding) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *GetinfoBinding) GetSocket() string {
	if x != nil && x.Socket != nil {
		return *x.Socket
	}
	return ""
}

type ListpeersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte  `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Level *string `protobuf:"bytes,2,opt,name=level,proto3,oneof" json:"level,omitempty"`
}

func (x *ListpeersRequest) Reset() {
	*x = ListpeersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersRequest) ProtoMessage() {}

func (x *ListpeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersRequest.ProtoReflect.Descriptor instead.
func (*ListpeersRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *ListpeersRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListpeersRequest) GetLevel() string {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ""
}

type ListpeersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers []*ListpeersPeers `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *ListpeersResponse) Reset() {
	*x = ListpeersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersResponse) ProtoMessage() {}

func (x *ListpeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersResponse.ProtoReflect.Descriptor instead.
func (*ListpeersResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{6}
}

func (x *ListpeersResponse) GetPeers() []*ListpeersPeers {
	if x != nil {
		return x.Peers
	}
	return nil
}

type ListpeersPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Connected bool                      `protobuf:"varint,2,opt,name=connected,proto3" json:"connected,omitempty"`
	Log       []*ListpeersPeersLog      `protobuf:"bytes,3,rep,name=log,proto3" json:"log,omitempty"`
	Channels  []*ListpeersPeersChannels `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	Netaddr   []string                  `protobuf:"bytes,5,rep,name=netaddr,proto3" json:"netaddr,omitempty"`
	Features  []byte                    `protobuf:"bytes,6,opt,name=features,proto3,oneof" json:"features,omitempty"`
}

func (x *ListpeersPeers) Reset() {
	*x = ListpeersPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeers) ProtoMessage() {}

func (x *ListpeersPeers) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeers.ProtoReflect.Descriptor instead.
func (*ListpeersPeers) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{7}
}

func (x *ListpeersPeers) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ListpeersPeers) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *ListpeersPeers) GetLog() []*ListpeersPeersLog {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *ListpeersPeers) GetChannels() []*ListpeersPeersChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *ListpeersPeers) GetNetaddr() []string {
	if x != nil {
		return x.Netaddr
	}
	return nil
}

func (x *ListpeersPeers) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

type ListpeersPeersLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType   ListpeersPeersLog_ListpeersPeersLogType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.ListpeersPeersLog_ListpeersPeersLogType" json:"item_type,omitempty"`
	NumSkipped *uint32                                 `protobuf:"varint,2,opt,name=num_skipped,json=numSkipped,proto3,oneof" json:"num_skipped,omitempty"`
	Time       *string                                 `protobuf:"bytes,3,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Source     *string                                 `protobuf:"bytes,4,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Log        *string                                 `protobuf:"bytes,5,opt,name=log,proto3,oneof" json:"log,omitempty"`
	NodeId     []byte                                  `protobuf:"bytes,6,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	Data       []byte                                  `protobuf:"bytes,7,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (x *ListpeersPeersLog) Reset() {
	*x = ListpeersPeersLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersLog) ProtoMessage() {}

func (x *ListpeersPeersLog) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersLog.ProtoReflect.Descriptor instead.
func (*ListpeersPeersLog) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{8}
}

func (x *ListpeersPeersLog) GetItemType() ListpeersPeersLog_ListpeersPeersLogType {
	if x != nil {
		return x.ItemType
	}
	return ListpeersPeersLog_SKIPPED
}

func (x *ListpeersPeersLog) GetNumSkipped() uint32 {
	if x != nil && x.NumSkipped != nil {
		return *x.NumSkipped
	}
	return 0
}

func (x *ListpeersPeersLog) GetTime() string {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return ""
}

func (x *ListpeersPeersLog) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ListpeersPeersLog) GetLog() string {
	if x != nil && x.Log != nil {
		return *x.Log
	}
	return ""
}

func (x *ListpeersPeersLog) GetNodeId() []byte {
	if x != nil {
		return x.NodeId
	}
	return nil
}

func (x *ListpeersPeersLog) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListpeersPeersChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State                     ListpeersPeersChannels_ListpeersPeersChannelsState `protobuf:"varint,1,opt,name=state,proto3,enum=cln.ListpeersPeersChannels_ListpeersPeersChannelsState" json:"state,omitempty"`
	ScratchTxid               []byte                                             `protobuf:"bytes,2,opt,name=scratch_txid,json=scratchTxid,proto3,oneof" json:"scratch_txid,omitempty"`
	Owner                     *string                                            `protobuf:"bytes,4,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	ShortChannelId            *string                                            `protobuf:"bytes,5,opt,name=short_channel_id,json=shortChannelId,proto3,oneof" json:"short_channel_id,omitempty"`
	ChannelId                 []byte                                             `protobuf:"bytes,6,opt,name=channel_id,json=channelId,proto3,oneof" json:"channel_id,omitempty"`
	FundingTxid               []byte                                             `protobuf:"bytes,7,opt,name=funding_txid,json=fundingTxid,proto3,oneof" json:"funding_txid,omitempty"`
	FundingOutnum             *uint32                                            `protobuf:"varint,8,opt,name=funding_outnum,json=fundingOutnum,proto3,oneof" json:"funding_outnum,omitempty"`
	InitialFeerate            *string                                            `protobuf:"bytes,9,opt,name=initial_feerate,json=initialFeerate,proto3,oneof" json:"initial_feerate,omitempty"`
	LastFeerate               *string                                            `protobuf:"bytes,10,opt,name=last_feerate,json=lastFeerate,proto3,oneof" json:"last_feerate,omitempty"`
	NextFeerate               *string                                            `protobuf:"bytes,11,opt,name=next_feerate,json=nextFeerate,proto3,oneof" json:"next_feerate,omitempty"`
	NextFeeStep               *uint32                                            `protobuf:"varint,12,opt,name=next_fee_step,json=nextFeeStep,proto3,oneof" json:"next_fee_step,omitempty"`
	Inflight                  []*ListpeersPeersChannelsInflight                  `protobuf:"bytes,13,rep,name=inflight,proto3" json:"inflight,omitempty"`
	CloseTo                   []byte                                             `protobuf:"bytes,14,opt,name=close_to,json=closeTo,proto3,oneof" json:"close_to,omitempty"`
	Private                   *bool                                              `protobuf:"varint,15,opt,name=private,proto3,oneof" json:"private,omitempty"`
	Opener                    ChannelSide                                        `protobuf:"varint,16,opt,name=opener,proto3,enum=cln.ChannelSide" json:"opener,omitempty"`
	Features                  []string                                           `protobuf:"bytes,18,rep,name=features,proto3" json:"features,omitempty"`
	ToUsMsat                  *Amount                                            `protobuf:"bytes,20,opt,name=to_us_msat,json=toUsMsat,proto3,oneof" json:"to_us_msat,omitempty"`
	MinToUsMsat               *Amount                                            `protobuf:"bytes,21,opt,name=min_to_us_msat,json=minToUsMsat,proto3,oneof" json:"min_to_us_msat,omitempty"`
	MaxToUsMsat               *Amount                                            `protobuf:"bytes,22,opt,name=max_to_us_msat,json=maxToUsMsat,proto3,oneof" json:"max_to_us_msat,omitempty"`
	TotalMsat                 *Amount                                            `protobuf:"bytes,23,opt,name=total_msat,json=totalMsat,proto3,oneof" json:"total_msat,omitempty"`
	FeeBaseMsat               *Amount                                            `protobuf:"bytes,24,opt,name=fee_base_msat,json=feeBaseMsat,proto3,oneof" json:"fee_base_msat,omitempty"`
	FeeProportionalMillionths *uint32                                            `protobuf:"varint,25,opt,name=fee_proportional_millionths,json=feeProportionalMillionths,proto3,oneof" json:"fee_proportional_millionths,omitempty"`
	DustLimitMsat             *Amount                                            `protobuf:"bytes,26,opt,name=dust_limit_msat,json=dustLimitMsat,proto3,oneof" json:"dust_limit_msat,omitempty"`
	MaxTotalHtlcInMsat        *Amount                                            `protobuf:"bytes,27,opt,name=max_total_htlc_in_msat,json=maxTotalHtlcInMsat,proto3,oneof" json:"max_total_htlc_in_msat,omitempty"`
	TheirReserveMsat          *Amount                                            `protobuf:"bytes,28,opt,name=their_reserve_msat,json=theirReserveMsat,proto3,oneof" json:"their_reserve_msat,omitempty"`
	OurReserveMsat            *Amount                                            `protobuf:"bytes,29,opt,name=our_reserve_msat,json=ourReserveMsat,proto3,oneof" json:"our_reserve_msat,omitempty"`
	SpendableMsat             *Amount                                            `protobuf:"bytes,30,opt,name=spendable_msat,json=spendableMsat,proto3,oneof" json:"spendable_msat,omitempty"`
	ReceivableMsat            *Amount                                            `protobuf:"bytes,31,opt,name=receivable_msat,json=receivableMsat,proto3,oneof" json:"receivable_msat,omitempty"`
	MinimumHtlcInMsat         *Amount                                            `protobuf:"bytes,32,opt,name=minimum_htlc_in_msat,json=minimumHtlcInMsat,proto3,oneof" json:"minimum_htlc_in_msat,omitempty"`
	MinimumHtlcOutMsat        *Amount                                            `protobuf:"bytes,48,opt,name=minimum_htlc_out_msat,json=minimumHtlcOutMsat,proto3,oneof" json:"minimum_htlc_out_msat,omitempty"`
	MaximumHtlcOutMsat        *Amount                                            `protobuf:"bytes,49,opt,name=maximum_htlc_out_msat,json=maximumHtlcOutMsat,proto3,oneof" json:"maximum_htlc_out_msat,omitempty"`
	TheirToSelfDelay          *uint32                                            `protobuf:"varint,33,opt,name=their_to_self_delay,json=theirToSelfDelay,proto3,oneof" json:"their_to_self_delay,omitempty"`
	OurToSelfDelay            *uint32                                            `protobuf:"varint,34,opt,name=our_to_self_delay,json=ourToSelfDelay,proto3,oneof" json:"our_to_self_delay,omitempty"`
	MaxAcceptedHtlcs          *uint32                                            `protobuf:"varint,35,opt,name=max_accepted_htlcs,json=maxAcceptedHtlcs,proto3,oneof" json:"max_accepted_htlcs,omitempty"`
	Status                    []string                                           `protobuf:"bytes,37,rep,name=status,proto3" json:"status,omitempty"`
	InPaymentsOffered         *uint64                                            `protobuf:"varint,38,opt,name=in_payments_offered,json=inPaymentsOffered,proto3,oneof" json:"in_payments_offered,omitempty"`
	InOfferedMsat             *Amount                                            `protobuf:"bytes,39,opt,name=in_offered_msat,json=inOfferedMsat,proto3,oneof" json:"in_offered_msat,omitempty"`
	InPaymentsFulfilled       *uint64                                            `protobuf:"varint,40,opt,name=in_payments_fulfilled,json=inPaymentsFulfilled,proto3,oneof" json:"in_payments_fulfilled,omitempty"`
	InFulfilledMsat           *Amount                                            `protobuf:"bytes,41,opt,name=in_fulfilled_msat,json=inFulfilledMsat,proto3,oneof" json:"in_fulfilled_msat,omitempty"`
	OutPaymentsOffered        *uint64                                            `protobuf:"varint,42,opt,name=out_payments_offered,json=outPaymentsOffered,proto3,oneof" json:"out_payments_offered,omitempty"`
	OutOfferedMsat            *Amount                                            `protobuf:"bytes,43,opt,name=out_offered_msat,json=outOfferedMsat,proto3,oneof" json:"out_offered_msat,omitempty"`
	OutPaymentsFulfilled      *uint64                                            `protobuf:"varint,44,opt,name=out_payments_fulfilled,json=outPaymentsFulfilled,proto3,oneof" json:"out_payments_fulfilled,omitempty"`
	OutFulfilledMsat          *Amount                                            `protobuf:"bytes,45,opt,name=out_fulfilled_msat,json=outFulfilledMsat,proto3,oneof" json:"out_fulfilled_msat,omitempty"`
	Htlcs                     []*ListpeersPeersChannelsHtlcs                     `protobuf:"bytes,46,rep,name=htlcs,proto3" json:"htlcs,omitempty"`
	CloseToAddr               *string                                            `protobuf:"bytes,47,opt,name=close_to_addr,json=closeToAddr,proto3,oneof" json:"close_to_addr,omitempty"`
}

func (x *ListpeersPeersChannels) Reset() {
	*x = ListpeersPeersChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersChannels) ProtoMessage() {}

func (x *ListpeersPeersChannels) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersChannels.ProtoReflect.Descriptor instead.
func (*ListpeersPeersChannels) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{9}
}

func (x *ListpeersPeersChannels) GetState() ListpeersPeersChannels_ListpeersPeersChannelsState {
	if x != nil {
		return x.State
	}
	return ListpeersPeersChannels_OPENINGD
}

func (x *ListpeersPeersChannels) GetScratchTxid() []byte {
	if x != nil {
		return x.ScratchTxid
	}
	return nil
}

func (x *ListpeersPeersChannels) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ListpeersPeersChannels) GetShortChannelId() string {
	if x != nil && x.ShortChannelId != nil {
		return *x.ShortChannelId
	}
	return ""
}

func (x *ListpeersPeersChannels) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *ListpeersPeersChannels) GetFundingTxid() []byte {
	if x != nil {
		return x.FundingTxid
	}
	return nil
}

func (x *ListpeersPeersChannels) GetFundingOutnum() uint32 {
	if x != nil && x.FundingOutnum != nil {
		return *x.FundingOutnum
	}
	return 0
}

func (x *ListpeersPeersChannels) GetInitialFeerate() string {
	if x != nil && x.InitialFeerate != nil {
		return *x.InitialFeerate
	}
	return ""
}

func (x *ListpeersPeersChannels) GetLastFeerate() string {
	if x != nil && x.LastFeerate != nil {
		return *x.LastFeerate
	}
	return ""
}

func (x *ListpeersPeersChannels) GetNextFeerate() string {
	if x != nil && x.NextFeerate != nil {
		return *x.NextFeerate
	}
	return ""
}

func (x *ListpeersPeersChannels) GetNextFeeStep() uint32 {
	if x != nil && x.NextFeeStep != nil {
		return *x.NextFeeStep
	}
	return 0
}

func (x *ListpeersPeersChannels) GetInflight() []*ListpeersPeersChannelsInflight {
	if x != nil {
		return x.Inflight
	}
	return nil
}

func (x *ListpeersPeersChannels) GetCloseTo() []byte {
	if x != nil {
		return x.CloseTo
	}
	return nil
}

func (x *ListpeersPeersChannels) GetPrivate() bool {
	if x != nil && x.Private != nil {
		return *x.Private
	}
	return false
}

func (x *ListpeersPeersChannels) GetOpener() ChannelSide {
	if x != nil {
		return x.Opener
	}
	return ChannelSide_IN
}

func (x *ListpeersPeersChannels) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ListpeersPeersChannels) GetToUsMsat() *Amount {
	if x != nil {
		return x.ToUsMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMinToUsMsat() *Amount {
	if x != nil {
		return x.MinToUsMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMaxToUsMsat() *Amount {
	if x != nil {
		return x.MaxToUsMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetTotalMsat() *Amount {
	if x != nil {
		return x.TotalMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetFeeBaseMsat() *Amount {
	if x != nil {
		return x.FeeBaseMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetFeeProportionalMillionths() uint32 {
	if x != nil && x.FeeProportionalMillionths != nil {
		return *x.FeeProportionalMillionths
	}
	return 0
}

func (x *ListpeersPeersChannels) GetDustLimitMsat() *Amount {
	if x != nil {
		return x.DustLimitMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMaxTotalHtlcInMsat() *Amount {
	if x != nil {
		return x.MaxTotalHtlcInMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetTheirReserveMsat() *Amount {
	if x != nil {
		return x.TheirReserveMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetOurReserveMsat() *Amount {
	if x != nil {
		return x.OurReserveMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetSpendableMsat() *Amount {
	if x != nil {
		return x.SpendableMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetReceivableMsat() *Amount {
	if x != nil {
		return x.ReceivableMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMinimumHtlcInMsat() *Amount {
	if x != nil {
		return x.MinimumHtlcInMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMinimumHtlcOutMsat() *Amount {
	if x != nil {
		return x.MinimumHtlcOutMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetMaximumHtlcOutMsat() *Amount {
	if x != nil {
		return x.MaximumHtlcOutMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetTheirToSelfDelay() uint32 {
	if x != nil && x.TheirToSelfDelay != nil {
		return *x.TheirToSelfDelay
	}
	return 0
}

func (x *ListpeersPeersChannels) GetOurToSelfDelay() uint32 {
	if x != nil && x.OurToSelfDelay != nil {
		return *x.OurToSelfDelay
	}
	return 0
}

func (x *ListpeersPeersChannels) GetMaxAcceptedHtlcs() uint32 {
	if x != nil && x.MaxAcceptedHtlcs != nil {
		return *x.MaxAcceptedHtlcs
	}
	return 0
}

func (x *ListpeersPeersChannels) GetStatus() []string {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListpeersPeersChannels) GetInPaymentsOffered() uint64 {
	if x != nil && x.InPaymentsOffered != nil {
		return *x.InPaymentsOffered
	}
	return 0
}

func (x *ListpeersPeersChannels) GetInOfferedMsat() *Amount {
	if x != nil {
		return x.InOfferedMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetInPaymentsFulfilled() uint64 {
	if x != nil && x.InPaymentsFulfilled != nil {
		return *x.InPaymentsFulfilled
	}
	return 0
}

func (x *ListpeersPeersChannels) GetInFulfilledMsat() *Amount {
	if x != nil {
		return x.InFulfilledMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetOutPaymentsOffered() uint64 {
	if x != nil && x.OutPaymentsOffered != nil {
		return *x.OutPaymentsOffered
	}
	return 0
}

func (x *ListpeersPeersChannels) GetOutOfferedMsat() *Amount {
	if x != nil {
		return x.OutOfferedMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetOutPaymentsFulfilled() uint64 {
	if x != nil && x.OutPaymentsFulfilled != nil {
		return *x.OutPaymentsFulfilled
	}
	return 0
}

func (x *ListpeersPeersChannels) GetOutFulfilledMsat() *Amount {
	if x != nil {
		return x.OutFulfilledMsat
	}
	return nil
}

func (x *ListpeersPeersChannels) GetHtlcs() []*ListpeersPeersChannelsHtlcs {
	if x != nil {
		return x.Htlcs
	}
	return nil
}

func (x *ListpeersPeersChannels) GetCloseToAddr() string {
	if x != nil && x.CloseToAddr != nil {
		return *x.CloseToAddr
	}
	return ""
}

type ListpeersPeersChannelsFeerate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perkw uint32 `protobuf:"varint,1,opt,name=perkw,proto3" json:"perkw,omitempty"`
	Perkb uint32 `protobuf:"varint,2,opt,name=perkb,proto3" json:"perkb,omitempty"`
}

func (x *ListpeersPeersChannelsFeerate) Reset() {
	*x = ListpeersPeersChannelsFeerate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersChannelsFeerate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersChannelsFeerate) ProtoMessage() {}

func (x *ListpeersPeersChannelsFeerate) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersChannelsFeerate.ProtoReflect.Descriptor instead.
func (*ListpeersPeersChannelsFeerate) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{10}
}

func (x *ListpeersPeersChannelsFeerate) GetPerkw() uint32 {
	if x != nil {
		return x.Perkw
	}
	return 0
}

func (x *ListpeersPeersChannelsFeerate) GetPerkb() uint32 {
	if x != nil {
		return x.Perkb
	}
	return 0
}

type ListpeersPeersChannelsInflight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundingTxid      []byte  `protobuf:"bytes,1,opt,name=funding_txid,json=fundingTxid,proto3" json:"funding_txid,omitempty"`
	FundingOutnum    uint32  `protobuf:"varint,2,opt,name=funding_outnum,json=fundingOutnum,proto3" json:"funding_outnum,omitempty"`
	Feerate          string  `protobuf:"bytes,3,opt,name=feerate,proto3" json:"feerate,omitempty"`
	TotalFundingMsat *Amount `protobuf:"bytes,4,opt,name=total_funding_msat,json=totalFundingMsat,proto3" json:"total_funding_msat,omitempty"`
	OurFundingMsat   *Amount `protobuf:"bytes,5,opt,name=our_funding_msat,json=ourFundingMsat,proto3" json:"our_funding_msat,omitempty"`
	ScratchTxid      []byte  `protobuf:"bytes,6,opt,name=scratch_txid,json=scratchTxid,proto3" json:"scratch_txid,omitempty"`
}

func (x *ListpeersPeersChannelsInflight) Reset() {
	*x = ListpeersPeersChannelsInflight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersChannelsInflight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersChannelsInflight) ProtoMessage() {}

func (x *ListpeersPeersChannelsInflight) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersChannelsInflight.ProtoReflect.Descriptor instead.
func (*ListpeersPeersChannelsInflight) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{11}
}

func (x *ListpeersPeersChannelsInflight) GetFundingTxid() []byte {
	if x != nil {
		return x.FundingTxid
	}
	return nil
}

func (x *ListpeersPeersChannelsInflight) GetFundingOutnum() uint32 {
	if x != nil {
		return x.FundingOutnum
	}
	return 0
}

func (x *ListpeersPeersChannelsInflight) GetFeerate() string {
	if x != nil {
		return x.Feerate
	}
	return ""
}

func (x *ListpeersPeersChannelsInflight) GetTotalFundingMsat() *Amount {
	if x != nil {
		return x.TotalFundingMsat
	}
	return nil
}

func (x *ListpeersPeersChannelsInflight) GetOurFundingMsat() *Amount {
	if x != nil {
		return x.OurFundingMsat
	}
	return nil
}

func (x *ListpeersPeersChannelsInflight) GetScratchTxid() []byte {
	if x != nil {
		return x.ScratchTxid
	}
	return nil
}

type ListpeersPeersChannelsFunding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalMsat  *Amount `protobuf:"bytes,1,opt,name=local_msat,json=localMsat,proto3" json:"local_msat,omitempty"`
	RemoteMsat *Amount `protobuf:"bytes,2,opt,name=remote_msat,json=remoteMsat,proto3" json:"remote_msat,omitempty"`
	PushedMsat *Amount `protobuf:"bytes,3,opt,name=pushed_msat,json=pushedMsat,proto3" json:"pushed_msat,omitempty"`
}

func (x *ListpeersPeersChannelsFunding) Reset() {
	*x = ListpeersPeersChannelsFunding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersChannelsFunding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersChannelsFunding) ProtoMessage() {}

func (x *ListpeersPeersChannelsFunding) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersChannelsFunding.ProtoReflect.Descriptor instead.
func (*ListpeersPeersChannelsFunding) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{12}
}

func (x *ListpeersPeersChannelsFunding) GetLocalMsat() *Amount {
	if x != nil {
		return x.LocalMsat
	}
	return nil
}

func (x *ListpeersPeersChannelsFunding) GetRemoteMsat() *Amount {
	if x != nil {
		return x.RemoteMsat
	}
	return nil
}

func (x *ListpeersPeersChannelsFunding) GetPushedMsat() *Amount {
	if x != nil {
		return x.PushedMsat
	}
	return nil
}

type ListpeersPeersChannelsHtlcs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction    ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=cln.ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection" json:"direction,omitempty"`
	Id           uint64                                                           `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AmountMsat   *Amount                                                          `protobuf:"bytes,3,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	Expiry       uint32                                                           `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
	PaymentHash  []byte                                                           `protobuf:"bytes,5,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	LocalTrimmed *bool                                                            `protobuf:"varint,6,opt,name=local_trimmed,json=localTrimmed,proto3,oneof" json:"local_trimmed,omitempty"`
	Status       *string                                                          `protobuf:"bytes,7,opt,name=status,proto3,oneof" json:"status,omitempty"`
}

func (x *ListpeersPeersChannelsHtlcs) Reset() {
	*x = ListpeersPeersChannelsHtlcs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpeersPeersChannelsHtlcs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpeersPeersChannelsHtlcs) ProtoMessage() {}

func (x *ListpeersPeersChannelsHtlcs) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpeersPeersChannelsHtlcs.ProtoReflect.Descriptor instead.
func (*ListpeersPeersChannelsHtlcs) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{13}
}

func (x *ListpeersPeersChannelsHtlcs) GetDirection() ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection {
	if x != nil {
		return x.Direction
	}
	return ListpeersPeersChannelsHtlcs_IN
}

func (x *ListpeersPeersChannelsHtlcs) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListpeersPeersChannelsHtlcs) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListpeersPeersChannelsHtlcs) GetExpiry() uint32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ListpeersPeersChannelsHtlcs) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListpeersPeersChannelsHtlcs) GetLocalTrimmed() bool {
	if x != nil && x.LocalTrimmed != nil {
		return *x.LocalTrimmed
	}
	return false
}

func (x *ListpeersPeersChannelsHtlcs) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

type ListfundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spent *bool `protobuf:"varint,1,opt,name=spent,proto3,oneof" json:"spent,omitempty"`
}

func (x *ListfundsRequest) Reset() {
	*x = ListfundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListfundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListfundsRequest) ProtoMessage() {}

func (x *ListfundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListfundsRequest.ProtoReflect.Descriptor instead.
func (*ListfundsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{14}
}

func (x *ListfundsRequest) GetSpent() bool {
	if x != nil && x.Spent != nil {
		return *x.Spent
	}
	return false
}

type ListfundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs  []*ListfundsOutputs  `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Channels []*ListfundsChannels `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ListfundsResponse) Reset() {
	*x = ListfundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListfundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListfundsResponse) ProtoMessage() {}

func (x *ListfundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListfundsResponse.ProtoReflect.Descriptor instead.
func (*ListfundsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{15}
}

func (x *ListfundsResponse) GetOutputs() []*ListfundsOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ListfundsResponse) GetChannels() []*ListfundsChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ListfundsOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid         []byte                                  `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Output       uint32                                  `protobuf:"varint,2,opt,name=output,proto3" json:"output,omitempty"`
	AmountMsat   *Amount                                 `protobuf:"bytes,3,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	Scriptpubkey []byte                                  `protobuf:"bytes,4,opt,name=scriptpubkey,proto3" json:"scriptpubkey,omitempty"`
	Address      *string                                 `protobuf:"bytes,5,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Redeemscript []byte                                  `protobuf:"bytes,6,opt,name=redeemscript,proto3,oneof" json:"redeemscript,omitempty"`
	Status       ListfundsOutputs_ListfundsOutputsStatus `protobuf:"varint,7,opt,name=status,proto3,enum=cln.ListfundsOutputs_ListfundsOutputsStatus" json:"status,omitempty"`
	Blockheight  *uint32                                 `protobuf:"varint,8,opt,name=blockheight,proto3,oneof" json:"blockheight,omitempty"`
}

func (x *ListfundsOutputs) Reset() {
	*x = ListfundsOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListfundsOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListfundsOutputs) ProtoMessage() {}

func (x *ListfundsOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListfundsOutputs.ProtoReflect.Descriptor instead.
func (*ListfundsOutputs) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{16}
}

func (x *ListfundsOutputs) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *ListfundsOutputs) GetOutput() uint32 {
	if x != nil {
		return x.Output
	}
	return 0
}

func (x *ListfundsOutputs) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListfundsOutputs) GetScriptpubkey() []byte {
	if x != nil {
		return x.Scriptpubkey
	}
	return nil
}

func (x *ListfundsOutputs) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ListfundsOutputs) GetRedeemscript() []byte {
	if x != nil {
		return x.Redeemscript
	}
	return nil
}

func (x *ListfundsOutputs) GetStatus() ListfundsOutputs_ListfundsOutputsStatus {
	if x != nil {
		return x.Status
	}
	return ListfundsOutputs_UNCONFIRMED
}

func (x *ListfundsOutputs) GetBlockheight() uint32 {
	if x != nil && x.Blockheight != nil {
		return *x.Blockheight
	}
	return 0
}

type ListfundsChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId         []byte       `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	OurAmountMsat  *Amount      `protobuf:"bytes,2,opt,name=our_amount_msat,json=ourAmountMsat,proto3" json:"our_amount_msat,omitempty"`
	AmountMsat     *Amount      `protobuf:"bytes,3,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	FundingTxid    []byte       `protobuf:"bytes,4,opt,name=funding_txid,json=fundingTxid,proto3" json:"funding_txid,omitempty"`
	FundingOutput  uint32       `protobuf:"varint,5,opt,name=funding_output,json=fundingOutput,proto3" json:"funding_output,omitempty"`
	Connected      bool         `protobuf:"varint,6,opt,name=connected,proto3" json:"connected,omitempty"`
	State          ChannelState `protobuf:"varint,7,opt,name=state,proto3,enum=cln.ChannelState" json:"state,omitempty"`
	ShortChannelId *string      `protobuf:"bytes,8,opt,name=short_channel_id,json=shortChannelId,proto3,oneof" json:"short_channel_id,omitempty"`
}

func (x *ListfundsChannels) Reset() {
	*x = ListfundsChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListfundsChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListfundsChannels) ProtoMessage() {}

func (x *ListfundsChannels) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListfundsChannels.ProtoReflect.Descriptor instead.
func (*ListfundsChannels) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{17}
}

func (x *ListfundsChannels) GetPeerId() []byte {
	if x != nil {
		return x.PeerId
	}
	return nil
}

func (x *ListfundsChannels) GetOurAmountMsat() *Amount {
	if x != nil {
		return x.OurAmountMsat
	}
	return nil
}

func (x *ListfundsChannels) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListfundsChannels) GetFundingTxid() []byte {
	if x != nil {
		return x.FundingTxid
	}
	return nil
}

func (x *ListfundsChannels) GetFundingOutput() uint32 {
	if x != nil {
		return x.FundingOutput
	}
	return 0
}

func (x *ListfundsChannels) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *ListfundsChannels) GetState() ChannelState {
	if x != nil {
		return x.State
	}
	return ChannelState_Openingd
}

func (x *ListfundsChannels) GetShortChannelId() string {
	if x != nil && x.ShortChannelId != nil {
		return *x.ShortChannelId
	}
	return ""
}

type SendpayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route         []*SendpayRoute `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
	PaymentHash   []byte          `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Label         *string         `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Msatoshi      *Amount         `protobuf:"bytes,4,opt,name=msatoshi,proto3,oneof" json:"msatoshi,omitempty"`
	Bolt11        *string         `protobuf:"bytes,5,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	PaymentSecret []byte          `protobuf:"bytes,6,opt,name=payment_secret,json=paymentSecret,proto3,oneof" json:"payment_secret,omitempty"`
	Partid        *uint32         `protobuf:"varint,7,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	Localofferid  []byte          `protobuf:"bytes,8,opt,name=localofferid,proto3,oneof" json:"localofferid,omitempty"`
	Groupid       *uint64         `protobuf:"varint,9,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
}

func (x *SendpayRequest) Reset() {
	*x = SendpayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendpayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendpayRequest) ProtoMessage() {}

func (x *SendpayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendpayRequest.ProtoReflect.Descriptor instead.
func (*SendpayRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{18}
}

func (x *SendpayRequest) GetRoute() []*SendpayRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *SendpayRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *SendpayRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *SendpayRequest) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *SendpayRequest) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *SendpayRequest) GetPaymentSecret() []byte {
	if x != nil {
		return x.PaymentSecret
	}
	return nil
}

func (x *SendpayRequest) GetPartid() uint32 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *SendpayRequest) GetLocalofferid() []byte {
	if x != nil {
		return x.Localofferid
	}
	return nil
}

func (x *SendpayRequest) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

type SendpayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Groupid         *uint64                       `protobuf:"varint,2,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
	PaymentHash     []byte                        `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status          SendpayResponse_SendpayStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.SendpayResponse_SendpayStatus" json:"status,omitempty"`
	AmountMsat      *Amount                       `protobuf:"bytes,5,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Destination     []byte                        `protobuf:"bytes,6,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	CreatedAt       uint64                        `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AmountSentMsat  *Amount                       `protobuf:"bytes,8,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	Label           *string                       `protobuf:"bytes,9,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Partid          *uint64                       `protobuf:"varint,10,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	Bolt11          *string                       `protobuf:"bytes,11,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12          *string                       `protobuf:"bytes,12,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PaymentPreimage []byte                        `protobuf:"bytes,13,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
	Message         *string                       `protobuf:"bytes,14,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SendpayResponse) Reset() {
	*x = SendpayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendpayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendpayResponse) ProtoMessage() {}

func (x *SendpayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendpayResponse.ProtoReflect.Descriptor instead.
func (*SendpayResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{19}
}

func (x *SendpayResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendpayResponse) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *SendpayResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *SendpayResponse) GetStatus() SendpayResponse_SendpayStatus {
	if x != nil {
		return x.Status
	}
	return SendpayResponse_PENDING
}

func (x *SendpayResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *SendpayResponse) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendpayResponse) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SendpayResponse) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *SendpayResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *SendpayResponse) GetPartid() uint64 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *SendpayResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *SendpayResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *SendpayResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *SendpayResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type SendpayRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msatoshi *Amount `protobuf:"bytes,1,opt,name=msatoshi,proto3" json:"msatoshi,omitempty"`
	Id       []byte  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Delay    uint32  `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
	Channel  string  `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *SendpayRoute) Reset() {
	*x = SendpayRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendpayRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendpayRoute) ProtoMessage() {}

func (x *SendpayRoute) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendpayRoute.ProtoReflect.Descriptor instead.
func (*SendpayRoute) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{20}
}

func (x *SendpayRoute) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *SendpayRoute) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SendpayRoute) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *SendpayRoute) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

type ListchannelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortChannelId *string `protobuf:"bytes,1,opt,name=short_channel_id,json=shortChannelId,proto3,oneof" json:"short_channel_id,omitempty"`
	Source         []byte  `protobuf:"bytes,2,opt,name=source,proto3,oneof" json:"source,omitempty"`
	Destination    []byte  `protobuf:"bytes,3,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
}

func (x *ListchannelsRequest) Reset() {
	*x = ListchannelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListchannelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListchannelsRequest) ProtoMessage() {}

func (x *ListchannelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListchannelsRequest.ProtoReflect.Descriptor instead.
func (*ListchannelsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{21}
}

func (x *ListchannelsRequest) GetShortChannelId() string {
	if x != nil && x.ShortChannelId != nil {
		return *x.ShortChannelId
	}
	return ""
}

func (x *ListchannelsRequest) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListchannelsRequest) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

type ListchannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*ListchannelsChannels `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
}

func (x *ListchannelsResponse) Reset() {
	*x = ListchannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListchannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListchannelsResponse) ProtoMessage() {}

func (x *ListchannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListchannelsResponse.ProtoReflect.Descriptor instead.
func (*ListchannelsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{22}
}

func (x *ListchannelsResponse) GetChannels() []*ListchannelsChannels {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ListchannelsChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source              []byte  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination         []byte  `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	ShortChannelId      string  `protobuf:"bytes,3,opt,name=short_channel_id,json=shortChannelId,proto3" json:"short_channel_id,omitempty"`
	Public              bool    `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	AmountMsat          *Amount `protobuf:"bytes,5,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	MessageFlags        uint32  `protobuf:"varint,6,opt,name=message_flags,json=messageFlags,proto3" json:"message_flags,omitempty"`
	ChannelFlags        uint32  `protobuf:"varint,7,opt,name=channel_flags,json=channelFlags,proto3" json:"channel_flags,omitempty"`
	Active              bool    `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	LastUpdate          uint32  `protobuf:"varint,9,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	BaseFeeMillisatoshi uint32  `protobuf:"varint,10,opt,name=base_fee_millisatoshi,json=baseFeeMillisatoshi,proto3" json:"base_fee_millisatoshi,omitempty"`
	FeePerMillionth     uint32  `protobuf:"varint,11,opt,name=fee_per_millionth,json=feePerMillionth,proto3" json:"fee_per_millionth,omitempty"`
	Delay               uint32  `protobuf:"varint,12,opt,name=delay,proto3" json:"delay,omitempty"`
	HtlcMinimumMsat     *Amount `protobuf:"bytes,13,opt,name=htlc_minimum_msat,json=htlcMinimumMsat,proto3" json:"htlc_minimum_msat,omitempty"`
	HtlcMaximumMsat     *Amount `protobuf:"bytes,14,opt,name=htlc_maximum_msat,json=htlcMaximumMsat,proto3,oneof" json:"htlc_maximum_msat,omitempty"`
	Features            []byte  `protobuf:"bytes,15,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *ListchannelsChannels) Reset() {
	*x = ListchannelsChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListchannelsChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListchannelsChannels) ProtoMessage() {}

func (x *ListchannelsChannels) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListchannelsChannels.ProtoReflect.Descriptor instead.
func (*ListchannelsChannels) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{23}
}

func (x *ListchannelsChannels) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListchannelsChannels) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *ListchannelsChannels) GetShortChannelId() string {
	if x != nil {
		return x.ShortChannelId
	}
	return ""
}

func (x *ListchannelsChannels) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *ListchannelsChannels) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListchannelsChannels) GetMessageFlags() uint32 {
	if x != nil {
		return x.MessageFlags
	}
	return 0
}

func (x *ListchannelsChannels) GetChannelFlags() uint32 {
	if x != nil {
		return x.ChannelFlags
	}
	return 0
}

func (x *ListchannelsChannels) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ListchannelsChannels) GetLastUpdate() uint32 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *ListchannelsChannels) GetBaseFeeMillisatoshi() uint32 {
	if x != nil {
		return x.BaseFeeMillisatoshi
	}
	return 0
}

func (x *ListchannelsChannels) GetFeePerMillionth() uint32 {
	if x != nil {
		return x.FeePerMillionth
	}
	return 0
}

func (x *ListchannelsChannels) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *ListchannelsChannels) GetHtlcMinimumMsat() *Amount {
	if x != nil {
		return x.HtlcMinimumMsat
	}
	return nil
}

func (x *ListchannelsChannels) GetHtlcMaximumMsat() *Amount {
	if x != nil {
		return x.HtlcMaximumMsat
	}
	return nil
}

func (x *ListchannelsChannels) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

type AddgossipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddgossipRequest) Reset() {
	*x = AddgossipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddgossipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddgossipRequest) ProtoMessage() {}

func (x *AddgossipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddgossipRequest.ProtoReflect.Descriptor instead.
func (*AddgossipRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{24}
}

func (x *AddgossipRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type AddgossipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddgossipResponse) Reset() {
	*x = AddgossipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddgossipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddgossipResponse) ProtoMessage() {}

func (x *AddgossipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddgossipResponse.ProtoReflect.Descriptor instead.
func (*AddgossipResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{25}
}

type AutocleaninvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiredBy    *uint64 `protobuf:"varint,1,opt,name=expired_by,json=expiredBy,proto3,oneof" json:"expired_by,omitempty"`
	CycleSeconds *uint64 `protobuf:"varint,2,opt,name=cycle_seconds,json=cycleSeconds,proto3,oneof" json:"cycle_seconds,omitempty"`
}

func (x *AutocleaninvoiceRequest) Reset() {
	*x = AutocleaninvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutocleaninvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutocleaninvoiceRequest) ProtoMessage() {}

func (x *AutocleaninvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutocleaninvoiceRequest.ProtoReflect.Descriptor instead.
func (*AutocleaninvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{26}
}

func (x *AutocleaninvoiceRequest) GetExpiredBy() uint64 {
	if x != nil && x.ExpiredBy != nil {
		return *x.ExpiredBy
	}
	return 0
}

func (x *AutocleaninvoiceRequest) GetCycleSeconds() uint64 {
	if x != nil && x.CycleSeconds != nil {
		return *x.CycleSeconds
	}
	return 0
}

type AutocleaninvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ExpiredBy    *uint64 `protobuf:"varint,2,opt,name=expired_by,json=expiredBy,proto3,oneof" json:"expired_by,omitempty"`
	CycleSeconds *uint64 `protobuf:"varint,3,opt,name=cycle_seconds,json=cycleSeconds,proto3,oneof" json:"cycle_seconds,omitempty"`
}

func (x *AutocleaninvoiceResponse) Reset() {
	*x = AutocleaninvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutocleaninvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutocleaninvoiceResponse) ProtoMessage() {}

func (x *AutocleaninvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutocleaninvoiceResponse.ProtoReflect.Descriptor instead.
func (*AutocleaninvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{27}
}

func (x *AutocleaninvoiceResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AutocleaninvoiceResponse) GetExpiredBy() uint64 {
	if x != nil && x.ExpiredBy != nil {
		return *x.ExpiredBy
	}
	return 0
}

func (x *AutocleaninvoiceResponse) GetCycleSeconds() uint64 {
	if x != nil && x.CycleSeconds != nil {
		return *x.CycleSeconds
	}
	return 0
}

type CheckmessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Zbase   string `protobuf:"bytes,2,opt,name=zbase,proto3" json:"zbase,omitempty"`
	Pubkey  []byte `protobuf:"bytes,3,opt,name=pubkey,proto3,oneof" json:"pubkey,omitempty"`
}

func (x *CheckmessageRequest) Reset() {
	*x = CheckmessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckmessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckmessageRequest) ProtoMessage() {}

func (x *CheckmessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckmessageRequest.ProtoReflect.Descriptor instead.
func (*CheckmessageRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{28}
}

func (x *CheckmessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckmessageRequest) GetZbase() string {
	if x != nil {
		return x.Zbase
	}
	return ""
}

func (x *CheckmessageRequest) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type CheckmessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verified bool   `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
	Pubkey   []byte `protobuf:"bytes,2,opt,name=pubkey,proto3,oneof" json:"pubkey,omitempty"`
}

func (x *CheckmessageResponse) Reset() {
	*x = CheckmessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckmessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckmessageResponse) ProtoMessage() {}

func (x *CheckmessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckmessageResponse.ProtoReflect.Descriptor instead.
func (*CheckmessageResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{29}
}

func (x *CheckmessageResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *CheckmessageResponse) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Unilateraltimeout  *uint32    `protobuf:"varint,2,opt,name=unilateraltimeout,proto3,oneof" json:"unilateraltimeout,omitempty"`
	Destination        *string    `protobuf:"bytes,3,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	FeeNegotiationStep *string    `protobuf:"bytes,4,opt,name=fee_negotiation_step,json=feeNegotiationStep,proto3,oneof" json:"fee_negotiation_step,omitempty"`
	WrongFunding       []byte     `protobuf:"bytes,5,opt,name=wrong_funding,json=wrongFunding,proto3,oneof" json:"wrong_funding,omitempty"`
	ForceLeaseClosed   *bool      `protobuf:"varint,6,opt,name=force_lease_closed,json=forceLeaseClosed,proto3,oneof" json:"force_lease_closed,omitempty"`
	Feerange           []*Feerate `protobuf:"bytes,7,rep,name=feerange,proto3" json:"feerange,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{30}
}

func (x *CloseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CloseRequest) GetUnilateraltimeout() uint32 {
	if x != nil && x.Unilateraltimeout != nil {
		return *x.Unilateraltimeout
	}
	return 0
}

func (x *CloseRequest) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *CloseRequest) GetFeeNegotiationStep() string {
	if x != nil && x.FeeNegotiationStep != nil {
		return *x.FeeNegotiationStep
	}
	return ""
}

func (x *CloseRequest) GetWrongFunding() []byte {
	if x != nil {
		return x.WrongFunding
	}
	return nil
}

func (x *CloseRequest) GetForceLeaseClosed() bool {
	if x != nil && x.ForceLeaseClosed != nil {
		return *x.ForceLeaseClosed
	}
	return false
}

func (x *CloseRequest) GetFeerange() []*Feerate {
	if x != nil {
		return x.Feerange
	}
	return nil
}

type CloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType CloseResponse_CloseType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.CloseResponse_CloseType" json:"item_type,omitempty"`
	Tx       []byte                  `protobuf:"bytes,2,opt,name=tx,proto3,oneof" json:"tx,omitempty"`
	Txid     []byte                  `protobuf:"bytes,3,opt,name=txid,proto3,oneof" json:"txid,omitempty"`
}

func (x *CloseResponse) Reset() {
	*x = CloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponse) ProtoMessage() {}

func (x *CloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponse.ProtoReflect.Descriptor instead.
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{31}
}

func (x *CloseResponse) GetItemType() CloseResponse_CloseType {
	if x != nil {
		return x.ItemType
	}
	return CloseResponse_MUTUAL
}

func (x *CloseResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CloseResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type ConnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Host *string `protobuf:"bytes,2,opt,name=host,proto3,oneof" json:"host,omitempty"`
	Port *uint32 `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{32}
}

func (x *ConnectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectRequest) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *ConnectRequest) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type ConnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Features  []byte                           `protobuf:"bytes,2,opt,name=features,proto3" json:"features,omitempty"`
	Direction ConnectResponse_ConnectDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=cln.ConnectResponse_ConnectDirection" json:"direction,omitempty"`
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{33}
}

func (x *ConnectResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConnectResponse) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ConnectResponse) GetDirection() ConnectResponse_ConnectDirection {
	if x != nil {
		return x.Direction
	}
	return ConnectResponse_IN
}

type ConnectAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType ConnectAddress_ConnectAddressType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.ConnectAddress_ConnectAddressType" json:"item_type,omitempty"`
	Socket   *string                           `protobuf:"bytes,2,opt,name=socket,proto3,oneof" json:"socket,omitempty"`
	Address  *string                           `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Port     *uint32                           `protobuf:"varint,4,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *ConnectAddress) Reset() {
	*x = ConnectAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAddress) ProtoMessage() {}

func (x *ConnectAddress) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAddress.ProtoReflect.Descriptor instead.
func (*ConnectAddress) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{34}
}

func (x *ConnectAddress) GetItemType() ConnectAddress_ConnectAddressType {
	if x != nil {
		return x.ItemType
	}
	return ConnectAddress_LOCAL_SOCKET
}

func (x *ConnectAddress) GetSocket() string {
	if x != nil && x.Socket != nil {
		return *x.Socket
	}
	return ""
}

func (x *ConnectAddress) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *ConnectAddress) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type CreateinvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invstring string `protobuf:"bytes,1,opt,name=invstring,proto3" json:"invstring,omitempty"`
	Label     string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Preimage  []byte `protobuf:"bytes,3,opt,name=preimage,proto3" json:"preimage,omitempty"`
}

func (x *CreateinvoiceRequest) Reset() {
	*x = CreateinvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateinvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateinvoiceRequest) ProtoMessage() {}

func (x *CreateinvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateinvoiceRequest.ProtoReflect.Descriptor instead.
func (*CreateinvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{35}
}

func (x *CreateinvoiceRequest) GetInvstring() string {
	if x != nil {
		return x.Invstring
	}
	return ""
}

func (x *CreateinvoiceRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateinvoiceRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

type CreateinvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label              string                                    `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Bolt11             *string                                   `protobuf:"bytes,2,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12             *string                                   `protobuf:"bytes,3,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PaymentHash        []byte                                    `protobuf:"bytes,4,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	AmountMsat         *Amount                                   `protobuf:"bytes,5,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Status             CreateinvoiceResponse_CreateinvoiceStatus `protobuf:"varint,6,opt,name=status,proto3,enum=cln.CreateinvoiceResponse_CreateinvoiceStatus" json:"status,omitempty"`
	Description        string                                    `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	ExpiresAt          uint64                                    `protobuf:"varint,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	PayIndex           *uint64                                   `protobuf:"varint,9,opt,name=pay_index,json=payIndex,proto3,oneof" json:"pay_index,omitempty"`
	AmountReceivedMsat *Amount                                   `protobuf:"bytes,10,opt,name=amount_received_msat,json=amountReceivedMsat,proto3,oneof" json:"amount_received_msat,omitempty"`
	PaidAt             *uint64                                   `protobuf:"varint,11,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
	PaymentPreimage    []byte                                    `protobuf:"bytes,12,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
	LocalOfferId       []byte                                    `protobuf:"bytes,13,opt,name=local_offer_id,json=localOfferId,proto3,oneof" json:"local_offer_id,omitempty"`
	PayerNote          *string                                   `protobuf:"bytes,14,opt,name=payer_note,json=payerNote,proto3,oneof" json:"payer_note,omitempty"`
}

func (x *CreateinvoiceResponse) Reset() {
	*x = CreateinvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateinvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateinvoiceResponse) ProtoMessage() {}

func (x *CreateinvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateinvoiceResponse.ProtoReflect.Descriptor instead.
func (*CreateinvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{36}
}

func (x *CreateinvoiceResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *CreateinvoiceResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *CreateinvoiceResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *CreateinvoiceResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *CreateinvoiceResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *CreateinvoiceResponse) GetStatus() CreateinvoiceResponse_CreateinvoiceStatus {
	if x != nil {
		return x.Status
	}
	return CreateinvoiceResponse_PAID
}

func (x *CreateinvoiceResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateinvoiceResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *CreateinvoiceResponse) GetPayIndex() uint64 {
	if x != nil && x.PayIndex != nil {
		return *x.PayIndex
	}
	return 0
}

func (x *CreateinvoiceResponse) GetAmountReceivedMsat() *Amount {
	if x != nil {
		return x.AmountReceivedMsat
	}
	return nil
}

func (x *CreateinvoiceResponse) GetPaidAt() uint64 {
	if x != nil && x.PaidAt != nil {
		return *x.PaidAt
	}
	return 0
}

func (x *CreateinvoiceResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *CreateinvoiceResponse) GetLocalOfferId() []byte {
	if x != nil {
		return x.LocalOfferId
	}
	return nil
}

func (x *CreateinvoiceResponse) GetPayerNote() string {
	if x != nil && x.PayerNote != nil {
		return *x.PayerNote
	}
	return ""
}

type DatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []string                        `protobuf:"bytes,5,rep,name=key,proto3" json:"key,omitempty"`
	String_    *string                         `protobuf:"bytes,6,opt,name=string,proto3,oneof" json:"string,omitempty"`
	Hex        []byte                          `protobuf:"bytes,2,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
	Mode       *DatastoreRequest_DatastoreMode `protobuf:"varint,3,opt,name=mode,proto3,enum=cln.DatastoreRequest_DatastoreMode,oneof" json:"mode,omitempty"`
	Generation *uint64                         `protobuf:"varint,4,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
}

func (x *DatastoreRequest) Reset() {
	*x = DatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreRequest) ProtoMessage() {}

func (x *DatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreRequest.ProtoReflect.Descriptor instead.
func (*DatastoreRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{37}
}

func (x *DatastoreRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DatastoreRequest) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *DatastoreRequest) GetHex() []byte {
	if x != nil {
		return x.Hex
	}
	return nil
}

func (x *DatastoreRequest) GetMode() DatastoreRequest_DatastoreMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return DatastoreRequest_MUST_CREATE
}

func (x *DatastoreRequest) GetGeneration() uint64 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

type DatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []string `protobuf:"bytes,5,rep,name=key,proto3" json:"key,omitempty"`
	Generation *uint64  `protobuf:"varint,2,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
	Hex        []byte   `protobuf:"bytes,3,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
	String_    *string  `protobuf:"bytes,4,opt,name=string,proto3,oneof" json:"string,omitempty"`
}

func (x *DatastoreResponse) Reset() {
	*x = DatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatastoreResponse) ProtoMessage() {}

func (x *DatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatastoreResponse.ProtoReflect.Descriptor instead.
func (*DatastoreResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{38}
}

func (x *DatastoreResponse) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DatastoreResponse) GetGeneration() uint64 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *DatastoreResponse) GetHex() []byte {
	if x != nil {
		return x.Hex
	}
	return nil
}

func (x *DatastoreResponse) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type CreateonionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops       []*CreateonionHops `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
	Assocdata  []byte             `protobuf:"bytes,2,opt,name=assocdata,proto3" json:"assocdata,omitempty"`
	SessionKey []byte             `protobuf:"bytes,3,opt,name=session_key,json=sessionKey,proto3,oneof" json:"session_key,omitempty"`
	OnionSize  *uint32            `protobuf:"varint,4,opt,name=onion_size,json=onionSize,proto3,oneof" json:"onion_size,omitempty"`
}

func (x *CreateonionRequest) Reset() {
	*x = CreateonionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateonionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateonionRequest) ProtoMessage() {}

func (x *CreateonionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateonionRequest.ProtoReflect.Descriptor instead.
func (*CreateonionRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{39}
}

func (x *CreateonionRequest) GetHops() []*CreateonionHops {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *CreateonionRequest) GetAssocdata() []byte {
	if x != nil {
		return x.Assocdata
	}
	return nil
}

func (x *CreateonionRequest) GetSessionKey() []byte {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

func (x *CreateonionRequest) GetOnionSize() uint32 {
	if x != nil && x.OnionSize != nil {
		return *x.OnionSize
	}
	return 0
}

type CreateonionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Onion         []byte   `protobuf:"bytes,1,opt,name=onion,proto3" json:"onion,omitempty"`
	SharedSecrets [][]byte `protobuf:"bytes,2,rep,name=shared_secrets,json=sharedSecrets,proto3" json:"shared_secrets,omitempty"`
}

func (x *CreateonionResponse) Reset() {
	*x = CreateonionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateonionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateonionResponse) ProtoMessage() {}

func (x *CreateonionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateonionResponse.ProtoReflect.Descriptor instead.
func (*CreateonionResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{40}
}

func (x *CreateonionResponse) GetOnion() []byte {
	if x != nil {
		return x.Onion
	}
	return nil
}

func (x *CreateonionResponse) GetSharedSecrets() [][]byte {
	if x != nil {
		return x.SharedSecrets
	}
	return nil
}

type CreateonionHops struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkey  []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateonionHops) Reset() {
	*x = CreateonionHops{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateonionHops) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateonionHops) ProtoMessage() {}

func (x *CreateonionHops) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateonionHops.ProtoReflect.Descriptor instead.
func (*CreateonionHops) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{41}
}

func (x *CreateonionHops) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *CreateonionHops) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type DeldatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []string `protobuf:"bytes,3,rep,name=key,proto3" json:"key,omitempty"`
	Generation *uint64  `protobuf:"varint,2,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
}

func (x *DeldatastoreRequest) Reset() {
	*x = DeldatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeldatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeldatastoreRequest) ProtoMessage() {}

func (x *DeldatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeldatastoreRequest.ProtoReflect.Descriptor instead.
func (*DeldatastoreRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{42}
}

func (x *DeldatastoreRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeldatastoreRequest) GetGeneration() uint64 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

type DeldatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []string `protobuf:"bytes,5,rep,name=key,proto3" json:"key,omitempty"`
	Generation *uint64  `protobuf:"varint,2,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
	Hex        []byte   `protobuf:"bytes,3,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
	String_    *string  `protobuf:"bytes,4,opt,name=string,proto3,oneof" json:"string,omitempty"`
}

func (x *DeldatastoreResponse) Reset() {
	*x = DeldatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeldatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeldatastoreResponse) ProtoMessage() {}

func (x *DeldatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeldatastoreResponse.ProtoReflect.Descriptor instead.
func (*DeldatastoreResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{43}
}

func (x *DeldatastoreResponse) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DeldatastoreResponse) GetGeneration() uint64 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *DeldatastoreResponse) GetHex() []byte {
	if x != nil {
		return x.Hex
	}
	return nil
}

func (x *DeldatastoreResponse) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type DelexpiredinvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maxexpirytime *uint64 `protobuf:"varint,1,opt,name=maxexpirytime,proto3,oneof" json:"maxexpirytime,omitempty"`
}

func (x *DelexpiredinvoiceRequest) Reset() {
	*x = DelexpiredinvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelexpiredinvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelexpiredinvoiceRequest) ProtoMessage() {}

func (x *DelexpiredinvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelexpiredinvoiceRequest.ProtoReflect.Descriptor instead.
func (*DelexpiredinvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{44}
}

func (x *DelexpiredinvoiceRequest) GetMaxexpirytime() uint64 {
	if x != nil && x.Maxexpirytime != nil {
		return *x.Maxexpirytime
	}
	return 0
}

type DelexpiredinvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelexpiredinvoiceResponse) Reset() {
	*x = DelexpiredinvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelexpiredinvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelexpiredinvoiceResponse) ProtoMessage() {}

func (x *DelexpiredinvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelexpiredinvoiceResponse.ProtoReflect.Descriptor instead.
func (*DelexpiredinvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{45}
}

type DelinvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label    string                             `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Status   DelinvoiceRequest_DelinvoiceStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cln.DelinvoiceRequest_DelinvoiceStatus" json:"status,omitempty"`
	Desconly *bool                              `protobuf:"varint,3,opt,name=desconly,proto3,oneof" json:"desconly,omitempty"`
}

func (x *DelinvoiceRequest) Reset() {
	*x = DelinvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelinvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelinvoiceRequest) ProtoMessage() {}

func (x *DelinvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelinvoiceRequest.ProtoReflect.Descriptor instead.
func (*DelinvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{46}
}

func (x *DelinvoiceRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DelinvoiceRequest) GetStatus() DelinvoiceRequest_DelinvoiceStatus {
	if x != nil {
		return x.Status
	}
	return DelinvoiceRequest_PAID
}

func (x *DelinvoiceRequest) GetDesconly() bool {
	if x != nil && x.Desconly != nil {
		return *x.Desconly
	}
	return false
}

type DelinvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        string                              `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Bolt11       *string                             `protobuf:"bytes,2,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12       *string                             `protobuf:"bytes,3,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	AmountMsat   *Amount                             `protobuf:"bytes,4,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Description  *string                             `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	PaymentHash  []byte                              `protobuf:"bytes,6,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status       DelinvoiceResponse_DelinvoiceStatus `protobuf:"varint,7,opt,name=status,proto3,enum=cln.DelinvoiceResponse_DelinvoiceStatus" json:"status,omitempty"`
	ExpiresAt    uint64                              `protobuf:"varint,8,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	LocalOfferId []byte                              `protobuf:"bytes,9,opt,name=local_offer_id,json=localOfferId,proto3,oneof" json:"local_offer_id,omitempty"`
	PayerNote    *string                             `protobuf:"bytes,10,opt,name=payer_note,json=payerNote,proto3,oneof" json:"payer_note,omitempty"`
}

func (x *DelinvoiceResponse) Reset() {
	*x = DelinvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelinvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelinvoiceResponse) ProtoMessage() {}

func (x *DelinvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelinvoiceResponse.ProtoReflect.Descriptor instead.
func (*DelinvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{47}
}

func (x *DelinvoiceResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DelinvoiceResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *DelinvoiceResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *DelinvoiceResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *DelinvoiceResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DelinvoiceResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *DelinvoiceResponse) GetStatus() DelinvoiceResponse_DelinvoiceStatus {
	if x != nil {
		return x.Status
	}
	return DelinvoiceResponse_PAID
}

func (x *DelinvoiceResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *DelinvoiceResponse) GetLocalOfferId() []byte {
	if x != nil {
		return x.LocalOfferId
	}
	return nil
}

func (x *DelinvoiceResponse) GetPayerNote() string {
	if x != nil && x.PayerNote != nil {
		return *x.PayerNote
	}
	return ""
}

type InvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msatoshi              *AmountOrAny `protobuf:"bytes,1,opt,name=msatoshi,proto3" json:"msatoshi,omitempty"`
	Description           string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Label                 string       `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Expiry                *uint64      `protobuf:"varint,7,opt,name=expiry,proto3,oneof" json:"expiry,omitempty"`
	Fallbacks             []string     `protobuf:"bytes,4,rep,name=fallbacks,proto3" json:"fallbacks,omitempty"`
	Preimage              []byte       `protobuf:"bytes,5,opt,name=preimage,proto3,oneof" json:"preimage,omitempty"`
	Exposeprivatechannels *bool        `protobuf:"varint,8,opt,name=exposeprivatechannels,proto3,oneof" json:"exposeprivatechannels,omitempty"`
	Cltv                  *uint32      `protobuf:"varint,6,opt,name=cltv,proto3,oneof" json:"cltv,omitempty"`
	Deschashonly          *bool        `protobuf:"varint,9,opt,name=deschashonly,proto3,oneof" json:"deschashonly,omitempty"`
}

func (x *InvoiceRequest) Reset() {
	*x = InvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceRequest) ProtoMessage() {}

func (x *InvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceRequest.ProtoReflect.Descriptor instead.
func (*InvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{48}
}

func (x *InvoiceRequest) GetMsatoshi() *AmountOrAny {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *InvoiceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InvoiceRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *InvoiceRequest) GetExpiry() uint64 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *InvoiceRequest) GetFallbacks() []string {
	if x != nil {
		return x.Fallbacks
	}
	return nil
}

func (x *InvoiceRequest) GetPreimage() []byte {
	if x != nil {
		return x.Preimage
	}
	return nil
}

func (x *InvoiceRequest) GetExposeprivatechannels() bool {
	if x != nil && x.Exposeprivatechannels != nil {
		return *x.Exposeprivatechannels
	}
	return false
}

func (x *InvoiceRequest) GetCltv() uint32 {
	if x != nil && x.Cltv != nil {
		return *x.Cltv
	}
	return 0
}

func (x *InvoiceRequest) GetDeschashonly() bool {
	if x != nil && x.Deschashonly != nil {
		return *x.Deschashonly
	}
	return false
}

type InvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bolt11               string  `protobuf:"bytes,1,opt,name=bolt11,proto3" json:"bolt11,omitempty"`
	PaymentHash          []byte  `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	PaymentSecret        []byte  `protobuf:"bytes,3,opt,name=payment_secret,json=paymentSecret,proto3" json:"payment_secret,omitempty"`
	ExpiresAt            uint64  `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	WarningCapacity      *string `protobuf:"bytes,5,opt,name=warning_capacity,json=warningCapacity,proto3,oneof" json:"warning_capacity,omitempty"`
	WarningOffline       *string `protobuf:"bytes,6,opt,name=warning_offline,json=warningOffline,proto3,oneof" json:"warning_offline,omitempty"`
	WarningDeadends      *string `protobuf:"bytes,7,opt,name=warning_deadends,json=warningDeadends,proto3,oneof" json:"warning_deadends,omitempty"`
	WarningPrivateUnused *string `protobuf:"bytes,8,opt,name=warning_private_unused,json=warningPrivateUnused,proto3,oneof" json:"warning_private_unused,omitempty"`
	WarningMpp           *string `protobuf:"bytes,9,opt,name=warning_mpp,json=warningMpp,proto3,oneof" json:"warning_mpp,omitempty"`
}

func (x *InvoiceResponse) Reset() {
	*x = InvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceResponse) ProtoMessage() {}

func (x *InvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceResponse.ProtoReflect.Descriptor instead.
func (*InvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{49}
}

func (x *InvoiceResponse) GetBolt11() string {
	if x != nil {
		return x.Bolt11
	}
	return ""
}

func (x *InvoiceResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *InvoiceResponse) GetPaymentSecret() []byte {
	if x != nil {
		return x.PaymentSecret
	}
	return nil
}

func (x *InvoiceResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *InvoiceResponse) GetWarningCapacity() string {
	if x != nil && x.WarningCapacity != nil {
		return *x.WarningCapacity
	}
	return ""
}

func (x *InvoiceResponse) GetWarningOffline() string {
	if x != nil && x.WarningOffline != nil {
		return *x.WarningOffline
	}
	return ""
}

func (x *InvoiceResponse) GetWarningDeadends() string {
	if x != nil && x.WarningDeadends != nil {
		return *x.WarningDeadends
	}
	return ""
}

func (x *InvoiceResponse) GetWarningPrivateUnused() string {
	if x != nil && x.WarningPrivateUnused != nil {
		return *x.WarningPrivateUnused
	}
	return ""
}

func (x *InvoiceResponse) GetWarningMpp() string {
	if x != nil && x.WarningMpp != nil {
		return *x.WarningMpp
	}
	return ""
}

type ListdatastoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []string `protobuf:"bytes,2,rep,name=key,proto3" json:"key,omitempty"`
}

func (x *ListdatastoreRequest) Reset() {
	*x = ListdatastoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListdatastoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListdatastoreRequest) ProtoMessage() {}

func (x *ListdatastoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListdatastoreRequest.ProtoReflect.Descriptor instead.
func (*ListdatastoreRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{50}
}

func (x *ListdatastoreRequest) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

type ListdatastoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datastore []*ListdatastoreDatastore `protobuf:"bytes,1,rep,name=datastore,proto3" json:"datastore,omitempty"`
}

func (x *ListdatastoreResponse) Reset() {
	*x = ListdatastoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListdatastoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListdatastoreResponse) ProtoMessage() {}

func (x *ListdatastoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListdatastoreResponse.ProtoReflect.Descriptor instead.
func (*ListdatastoreResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{51}
}

func (x *ListdatastoreResponse) GetDatastore() []*ListdatastoreDatastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

type ListdatastoreDatastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        []string `protobuf:"bytes,1,rep,name=key,proto3" json:"key,omitempty"`
	Generation *uint64  `protobuf:"varint,2,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
	Hex        []byte   `protobuf:"bytes,3,opt,name=hex,proto3,oneof" json:"hex,omitempty"`
	String_    *string  `protobuf:"bytes,4,opt,name=string,proto3,oneof" json:"string,omitempty"`
}

func (x *ListdatastoreDatastore) Reset() {
	*x = ListdatastoreDatastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListdatastoreDatastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListdatastoreDatastore) ProtoMessage() {}

func (x *ListdatastoreDatastore) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListdatastoreDatastore.ProtoReflect.Descriptor instead.
func (*ListdatastoreDatastore) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{52}
}

func (x *ListdatastoreDatastore) GetKey() []string {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ListdatastoreDatastore) GetGeneration() uint64 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *ListdatastoreDatastore) GetHex() []byte {
	if x != nil {
		return x.Hex
	}
	return nil
}

func (x *ListdatastoreDatastore) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

type ListinvoicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       *string `protobuf:"bytes,1,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Invstring   *string `protobuf:"bytes,2,opt,name=invstring,proto3,oneof" json:"invstring,omitempty"`
	PaymentHash []byte  `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3,oneof" json:"payment_hash,omitempty"`
	OfferId     *string `protobuf:"bytes,4,opt,name=offer_id,json=offerId,proto3,oneof" json:"offer_id,omitempty"`
}

func (x *ListinvoicesRequest) Reset() {
	*x = ListinvoicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListinvoicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListinvoicesRequest) ProtoMessage() {}

func (x *ListinvoicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListinvoicesRequest.ProtoReflect.Descriptor instead.
func (*ListinvoicesRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{53}
}

func (x *ListinvoicesRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ListinvoicesRequest) GetInvstring() string {
	if x != nil && x.Invstring != nil {
		return *x.Invstring
	}
	return ""
}

func (x *ListinvoicesRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListinvoicesRequest) GetOfferId() string {
	if x != nil && x.OfferId != nil {
		return *x.OfferId
	}
	return ""
}

type ListinvoicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Invoices []*ListinvoicesInvoices `protobuf:"bytes,1,rep,name=invoices,proto3" json:"invoices,omitempty"`
}

func (x *ListinvoicesResponse) Reset() {
	*x = ListinvoicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListinvoicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListinvoicesResponse) ProtoMessage() {}

func (x *ListinvoicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListinvoicesResponse.ProtoReflect.Descriptor instead.
func (*ListinvoicesResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{54}
}

func (x *ListinvoicesResponse) GetInvoices() []*ListinvoicesInvoices {
	if x != nil {
		return x.Invoices
	}
	return nil
}

type ListinvoicesInvoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label              string                                          `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Description        *string                                         `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	PaymentHash        []byte                                          `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status             ListinvoicesInvoices_ListinvoicesInvoicesStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.ListinvoicesInvoices_ListinvoicesInvoicesStatus" json:"status,omitempty"`
	ExpiresAt          uint64                                          `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	AmountMsat         *Amount                                         `protobuf:"bytes,6,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Bolt11             *string                                         `protobuf:"bytes,7,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12             *string                                         `protobuf:"bytes,8,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	LocalOfferId       []byte                                          `protobuf:"bytes,9,opt,name=local_offer_id,json=localOfferId,proto3,oneof" json:"local_offer_id,omitempty"`
	PayerNote          *string                                         `protobuf:"bytes,10,opt,name=payer_note,json=payerNote,proto3,oneof" json:"payer_note,omitempty"`
	PayIndex           *uint64                                         `protobuf:"varint,11,opt,name=pay_index,json=payIndex,proto3,oneof" json:"pay_index,omitempty"`
	AmountReceivedMsat *Amount                                         `protobuf:"bytes,12,opt,name=amount_received_msat,json=amountReceivedMsat,proto3,oneof" json:"amount_received_msat,omitempty"`
	PaidAt             *uint64                                         `protobuf:"varint,13,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
	PaymentPreimage    []byte                                          `protobuf:"bytes,14,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
}

func (x *ListinvoicesInvoices) Reset() {
	*x = ListinvoicesInvoices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListinvoicesInvoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListinvoicesInvoices) ProtoMessage() {}

func (x *ListinvoicesInvoices) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListinvoicesInvoices.ProtoReflect.Descriptor instead.
func (*ListinvoicesInvoices) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{55}
}

func (x *ListinvoicesInvoices) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ListinvoicesInvoices) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ListinvoicesInvoices) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListinvoicesInvoices) GetStatus() ListinvoicesInvoices_ListinvoicesInvoicesStatus {
	if x != nil {
		return x.Status
	}
	return ListinvoicesInvoices_UNPAID
}

func (x *ListinvoicesInvoices) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ListinvoicesInvoices) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListinvoicesInvoices) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *ListinvoicesInvoices) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *ListinvoicesInvoices) GetLocalOfferId() []byte {
	if x != nil {
		return x.LocalOfferId
	}
	return nil
}

func (x *ListinvoicesInvoices) GetPayerNote() string {
	if x != nil && x.PayerNote != nil {
		return *x.PayerNote
	}
	return ""
}

func (x *ListinvoicesInvoices) GetPayIndex() uint64 {
	if x != nil && x.PayIndex != nil {
		return *x.PayIndex
	}
	return 0
}

func (x *ListinvoicesInvoices) GetAmountReceivedMsat() *Amount {
	if x != nil {
		return x.AmountReceivedMsat
	}
	return nil
}

func (x *ListinvoicesInvoices) GetPaidAt() uint64 {
	if x != nil && x.PaidAt != nil {
		return *x.PaidAt
	}
	return 0
}

func (x *ListinvoicesInvoices) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

type SendonionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Onion         []byte   `protobuf:"bytes,1,opt,name=onion,proto3" json:"onion,omitempty"`
	PaymentHash   []byte   `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Label         *string  `protobuf:"bytes,4,opt,name=label,proto3,oneof" json:"label,omitempty"`
	SharedSecrets [][]byte `protobuf:"bytes,5,rep,name=shared_secrets,json=sharedSecrets,proto3" json:"shared_secrets,omitempty"`
	Partid        *uint32  `protobuf:"varint,6,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	Bolt11        *string  `protobuf:"bytes,7,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Msatoshi      *Amount  `protobuf:"bytes,8,opt,name=msatoshi,proto3,oneof" json:"msatoshi,omitempty"`
	Destination   []byte   `protobuf:"bytes,9,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	Localofferid  []byte   `protobuf:"bytes,10,opt,name=localofferid,proto3,oneof" json:"localofferid,omitempty"`
	Groupid       *uint64  `protobuf:"varint,11,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
}

func (x *SendonionRequest) Reset() {
	*x = SendonionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendonionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendonionRequest) ProtoMessage() {}

func (x *SendonionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendonionRequest.ProtoReflect.Descriptor instead.
func (*SendonionRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{56}
}

func (x *SendonionRequest) GetOnion() []byte {
	if x != nil {
		return x.Onion
	}
	return nil
}

func (x *SendonionRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *SendonionRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *SendonionRequest) GetSharedSecrets() [][]byte {
	if x != nil {
		return x.SharedSecrets
	}
	return nil
}

func (x *SendonionRequest) GetPartid() uint32 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *SendonionRequest) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *SendonionRequest) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *SendonionRequest) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendonionRequest) GetLocalofferid() []byte {
	if x != nil {
		return x.Localofferid
	}
	return nil
}

func (x *SendonionRequest) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

type SendonionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentHash     []byte                            `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status          SendonionResponse_SendonionStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cln.SendonionResponse_SendonionStatus" json:"status,omitempty"`
	AmountMsat      *Amount                           `protobuf:"bytes,4,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Destination     []byte                            `protobuf:"bytes,5,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	CreatedAt       uint64                            `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AmountSentMsat  *Amount                           `protobuf:"bytes,7,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	Label           *string                           `protobuf:"bytes,8,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Bolt11          *string                           `protobuf:"bytes,9,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12          *string                           `protobuf:"bytes,10,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	Partid          *uint64                           `protobuf:"varint,13,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	PaymentPreimage []byte                            `protobuf:"bytes,11,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
	Message         *string                           `protobuf:"bytes,12,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *SendonionResponse) Reset() {
	*x = SendonionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendonionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendonionResponse) ProtoMessage() {}

func (x *SendonionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendonionResponse.ProtoReflect.Descriptor instead.
func (*SendonionResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{57}
}

func (x *SendonionResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SendonionResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *SendonionResponse) GetStatus() SendonionResponse_SendonionStatus {
	if x != nil {
		return x.Status
	}
	return SendonionResponse_PENDING
}

func (x *SendonionResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *SendonionResponse) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *SendonionResponse) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SendonionResponse) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *SendonionResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *SendonionResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *SendonionResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *SendonionResponse) GetPartid() uint64 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *SendonionResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *SendonionResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type SendonionFirstHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AmountMsat *Amount `protobuf:"bytes,2,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	Delay      uint32  `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *SendonionFirstHop) Reset() {
	*x = SendonionFirstHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendonionFirstHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendonionFirstHop) ProtoMessage() {}

func (x *SendonionFirstHop) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendonionFirstHop.ProtoReflect.Descriptor instead.
func (*SendonionFirstHop) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{58}
}

func (x *SendonionFirstHop) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SendonionFirstHop) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *SendonionFirstHop) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type ListsendpaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bolt11      *string                                 `protobuf:"bytes,1,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	PaymentHash []byte                                  `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3,oneof" json:"payment_hash,omitempty"`
	Status      *ListsendpaysRequest_ListsendpaysStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cln.ListsendpaysRequest_ListsendpaysStatus,oneof" json:"status,omitempty"`
}

func (x *ListsendpaysRequest) Reset() {
	*x = ListsendpaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsendpaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsendpaysRequest) ProtoMessage() {}

func (x *ListsendpaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsendpaysRequest.ProtoReflect.Descriptor instead.
func (*ListsendpaysRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{59}
}

func (x *ListsendpaysRequest) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *ListsendpaysRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListsendpaysRequest) GetStatus() ListsendpaysRequest_ListsendpaysStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ListsendpaysRequest_PENDING
}

type ListsendpaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payments []*ListsendpaysPayments `protobuf:"bytes,1,rep,name=payments,proto3" json:"payments,omitempty"`
}

func (x *ListsendpaysResponse) Reset() {
	*x = ListsendpaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsendpaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsendpaysResponse) ProtoMessage() {}

func (x *ListsendpaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsendpaysResponse.ProtoReflect.Descriptor instead.
func (*ListsendpaysResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{60}
}

func (x *ListsendpaysResponse) GetPayments() []*ListsendpaysPayments {
	if x != nil {
		return x.Payments
	}
	return nil
}

type ListsendpaysPayments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Groupid         *uint64                                         `protobuf:"varint,2,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
	PaymentHash     []byte                                          `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status          ListsendpaysPayments_ListsendpaysPaymentsStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.ListsendpaysPayments_ListsendpaysPaymentsStatus" json:"status,omitempty"`
	AmountMsat      *Amount                                         `protobuf:"bytes,5,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Destination     []byte                                          `protobuf:"bytes,6,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	CreatedAt       uint64                                          `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AmountSentMsat  *Amount                                         `protobuf:"bytes,8,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	Label           *string                                         `protobuf:"bytes,9,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Bolt11          *string                                         `protobuf:"bytes,10,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12          *string                                         `protobuf:"bytes,11,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PaymentPreimage []byte                                          `protobuf:"bytes,12,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
	Erroronion      []byte                                          `protobuf:"bytes,13,opt,name=erroronion,proto3,oneof" json:"erroronion,omitempty"`
}

func (x *ListsendpaysPayments) Reset() {
	*x = ListsendpaysPayments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsendpaysPayments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsendpaysPayments) ProtoMessage() {}

func (x *ListsendpaysPayments) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsendpaysPayments.ProtoReflect.Descriptor instead.
func (*ListsendpaysPayments) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{61}
}

func (x *ListsendpaysPayments) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListsendpaysPayments) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *ListsendpaysPayments) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListsendpaysPayments) GetStatus() ListsendpaysPayments_ListsendpaysPaymentsStatus {
	if x != nil {
		return x.Status
	}
	return ListsendpaysPayments_PENDING
}

func (x *ListsendpaysPayments) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListsendpaysPayments) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *ListsendpaysPayments) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ListsendpaysPayments) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *ListsendpaysPayments) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ListsendpaysPayments) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *ListsendpaysPayments) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *ListsendpaysPayments) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *ListsendpaysPayments) GetErroronion() []byte {
	if x != nil {
		return x.Erroronion
	}
	return nil
}

type ListtransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListtransactionsRequest) Reset() {
	*x = ListtransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListtransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListtransactionsRequest) ProtoMessage() {}

func (x *ListtransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListtransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListtransactionsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{62}
}

type ListtransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*ListtransactionsTransactions `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ListtransactionsResponse) Reset() {
	*x = ListtransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListtransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListtransactionsResponse) ProtoMessage() {}

func (x *ListtransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListtransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListtransactionsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{63}
}

func (x *ListtransactionsResponse) GetTransactions() []*ListtransactionsTransactions {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type ListtransactionsTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        []byte                                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Rawtx       []byte                                 `protobuf:"bytes,2,opt,name=rawtx,proto3" json:"rawtx,omitempty"`
	Blockheight uint32                                 `protobuf:"varint,3,opt,name=blockheight,proto3" json:"blockheight,omitempty"`
	Txindex     uint32                                 `protobuf:"varint,4,opt,name=txindex,proto3" json:"txindex,omitempty"`
	Channel     *string                                `protobuf:"bytes,6,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
	Locktime    uint32                                 `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"`
	Version     uint32                                 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Inputs      []*ListtransactionsTransactionsInputs  `protobuf:"bytes,9,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs     []*ListtransactionsTransactionsOutputs `protobuf:"bytes,10,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ListtransactionsTransactions) Reset() {
	*x = ListtransactionsTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListtransactionsTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListtransactionsTransactions) ProtoMessage() {}

func (x *ListtransactionsTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListtransactionsTransactions.ProtoReflect.Descriptor instead.
func (*ListtransactionsTransactions) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{64}
}

func (x *ListtransactionsTransactions) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ListtransactionsTransactions) GetRawtx() []byte {
	if x != nil {
		return x.Rawtx
	}
	return nil
}

func (x *ListtransactionsTransactions) GetBlockheight() uint32 {
	if x != nil {
		return x.Blockheight
	}
	return 0
}

func (x *ListtransactionsTransactions) GetTxindex() uint32 {
	if x != nil {
		return x.Txindex
	}
	return 0
}

func (x *ListtransactionsTransactions) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

func (x *ListtransactionsTransactions) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *ListtransactionsTransactions) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ListtransactionsTransactions) GetInputs() []*ListtransactionsTransactionsInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ListtransactionsTransactions) GetOutputs() []*ListtransactionsTransactionsOutputs {
	if x != nil {
		return x.Outputs
	}
	return nil
}

type ListtransactionsTransactionsInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid     []byte                                                                     `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Index    uint32                                                                     `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sequence uint32                                                                     `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ItemType *ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType `protobuf:"varint,4,opt,name=item_type,json=itemType,proto3,enum=cln.ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType,oneof" json:"item_type,omitempty"`
	Channel  *string                                                                    `protobuf:"bytes,5,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
}

func (x *ListtransactionsTransactionsInputs) Reset() {
	*x = ListtransactionsTransactionsInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListtransactionsTransactionsInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListtransactionsTransactionsInputs) ProtoMessage() {}

func (x *ListtransactionsTransactionsInputs) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListtransactionsTransactionsInputs.ProtoReflect.Descriptor instead.
func (*ListtransactionsTransactionsInputs) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{65}
}

func (x *ListtransactionsTransactionsInputs) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *ListtransactionsTransactionsInputs) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListtransactionsTransactionsInputs) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ListtransactionsTransactionsInputs) GetItemType() ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return ListtransactionsTransactionsInputs_THEIRS
}

func (x *ListtransactionsTransactionsInputs) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

type ListtransactionsTransactionsOutputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index        uint32                                                                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Msat         *Amount                                                                      `protobuf:"bytes,2,opt,name=msat,proto3" json:"msat,omitempty"`
	ScriptPubKey []byte                                                                       `protobuf:"bytes,3,opt,name=scriptPubKey,proto3" json:"scriptPubKey,omitempty"`
	ItemType     *ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType `protobuf:"varint,4,opt,name=item_type,json=itemType,proto3,enum=cln.ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType,oneof" json:"item_type,omitempty"`
	Channel      *string                                                                      `protobuf:"bytes,5,opt,name=channel,proto3,oneof" json:"channel,omitempty"`
}

func (x *ListtransactionsTransactionsOutputs) Reset() {
	*x = ListtransactionsTransactionsOutputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListtransactionsTransactionsOutputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListtransactionsTransactionsOutputs) ProtoMessage() {}

func (x *ListtransactionsTransactionsOutputs) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListtransactionsTransactionsOutputs.ProtoReflect.Descriptor instead.
func (*ListtransactionsTransactionsOutputs) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{66}
}

func (x *ListtransactionsTransactionsOutputs) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListtransactionsTransactionsOutputs) GetMsat() *Amount {
	if x != nil {
		return x.Msat
	}
	return nil
}

func (x *ListtransactionsTransactionsOutputs) GetScriptPubKey() []byte {
	if x != nil {
		return x.ScriptPubKey
	}
	return nil
}

func (x *ListtransactionsTransactionsOutputs) GetItemType() ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType {
	if x != nil && x.ItemType != nil {
		return *x.ItemType
	}
	return ListtransactionsTransactionsOutputs_THEIRS
}

func (x *ListtransactionsTransactionsOutputs) GetChannel() string {
	if x != nil && x.Channel != nil {
		return *x.Channel
	}
	return ""
}

type PayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bolt11        string   `protobuf:"bytes,1,opt,name=bolt11,proto3" json:"bolt11,omitempty"`
	Msatoshi      *Amount  `protobuf:"bytes,2,opt,name=msatoshi,proto3,oneof" json:"msatoshi,omitempty"`
	Label         *string  `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Riskfactor    *float64 `protobuf:"fixed64,8,opt,name=riskfactor,proto3,oneof" json:"riskfactor,omitempty"`
	Maxfeepercent *float64 `protobuf:"fixed64,4,opt,name=maxfeepercent,proto3,oneof" json:"maxfeepercent,omitempty"`
	RetryFor      *uint32  `protobuf:"varint,5,opt,name=retry_for,json=retryFor,proto3,oneof" json:"retry_for,omitempty"`
	Maxdelay      *uint32  `protobuf:"varint,6,opt,name=maxdelay,proto3,oneof" json:"maxdelay,omitempty"`
	Exemptfee     *Amount  `protobuf:"bytes,7,opt,name=exemptfee,proto3,oneof" json:"exemptfee,omitempty"`
	Localofferid  []byte   `protobuf:"bytes,9,opt,name=localofferid,proto3,oneof" json:"localofferid,omitempty"`
	Exclude       []string `protobuf:"bytes,10,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *PayRequest) Reset() {
	*x = PayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRequest) ProtoMessage() {}

func (x *PayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRequest.ProtoReflect.Descriptor instead.
func (*PayRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{67}
}

func (x *PayRequest) GetBolt11() string {
	if x != nil {
		return x.Bolt11
	}
	return ""
}

func (x *PayRequest) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *PayRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *PayRequest) GetRiskfactor() float64 {
	if x != nil && x.Riskfactor != nil {
		return *x.Riskfactor
	}
	return 0
}

func (x *PayRequest) GetMaxfeepercent() float64 {
	if x != nil && x.Maxfeepercent != nil {
		return *x.Maxfeepercent
	}
	return 0
}

func (x *PayRequest) GetRetryFor() uint32 {
	if x != nil && x.RetryFor != nil {
		return *x.RetryFor
	}
	return 0
}

func (x *PayRequest) GetMaxdelay() uint32 {
	if x != nil && x.Maxdelay != nil {
		return *x.Maxdelay
	}
	return 0
}

func (x *PayRequest) GetExemptfee() *Amount {
	if x != nil {
		return x.Exemptfee
	}
	return nil
}

func (x *PayRequest) GetLocalofferid() []byte {
	if x != nil {
		return x.Localofferid
	}
	return nil
}

func (x *PayRequest) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type PayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentPreimage          []byte                `protobuf:"bytes,1,opt,name=payment_preimage,json=paymentPreimage,proto3" json:"payment_preimage,omitempty"`
	Destination              []byte                `protobuf:"bytes,2,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	PaymentHash              []byte                `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	CreatedAt                float64               `protobuf:"fixed64,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Parts                    uint32                `protobuf:"varint,5,opt,name=parts,proto3" json:"parts,omitempty"`
	AmountMsat               *Amount               `protobuf:"bytes,6,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	AmountSentMsat           *Amount               `protobuf:"bytes,7,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	WarningPartialCompletion *string               `protobuf:"bytes,8,opt,name=warning_partial_completion,json=warningPartialCompletion,proto3,oneof" json:"warning_partial_completion,omitempty"`
	Status                   PayResponse_PayStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cln.PayResponse_PayStatus" json:"status,omitempty"`
}

func (x *PayResponse) Reset() {
	*x = PayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayResponse) ProtoMessage() {}

func (x *PayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayResponse.ProtoReflect.Descriptor instead.
func (*PayResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{68}
}

func (x *PayResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *PayResponse) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *PayResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *PayResponse) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PayResponse) GetParts() uint32 {
	if x != nil {
		return x.Parts
	}
	return 0
}

func (x *PayResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *PayResponse) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *PayResponse) GetWarningPartialCompletion() string {
	if x != nil && x.WarningPartialCompletion != nil {
		return *x.WarningPartialCompletion
	}
	return ""
}

func (x *PayResponse) GetStatus() PayResponse_PayStatus {
	if x != nil {
		return x.Status
	}
	return PayResponse_COMPLETE
}

type ListnodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *ListnodesRequest) Reset() {
	*x = ListnodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListnodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListnodesRequest) ProtoMessage() {}

func (x *ListnodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListnodesRequest.ProtoReflect.Descriptor instead.
func (*ListnodesRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{69}
}

func (x *ListnodesRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListnodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ListnodesNodes `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListnodesResponse) Reset() {
	*x = ListnodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListnodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListnodesResponse) ProtoMessage() {}

func (x *ListnodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListnodesResponse.ProtoReflect.Descriptor instead.
func (*ListnodesResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{70}
}

func (x *ListnodesResponse) GetNodes() []*ListnodesNodes {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListnodesNodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodeid        []byte                     `protobuf:"bytes,1,opt,name=nodeid,proto3" json:"nodeid,omitempty"`
	LastTimestamp *uint32                    `protobuf:"varint,2,opt,name=last_timestamp,json=lastTimestamp,proto3,oneof" json:"last_timestamp,omitempty"`
	Alias         *string                    `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Color         []byte                     `protobuf:"bytes,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
	Features      []byte                     `protobuf:"bytes,5,opt,name=features,proto3,oneof" json:"features,omitempty"`
	Addresses     []*ListnodesNodesAddresses `protobuf:"bytes,6,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ListnodesNodes) Reset() {
	*x = ListnodesNodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListnodesNodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListnodesNodes) ProtoMessage() {}

func (x *ListnodesNodes) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListnodesNodes.ProtoReflect.Descriptor instead.
func (*ListnodesNodes) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{71}
}

func (x *ListnodesNodes) GetNodeid() []byte {
	if x != nil {
		return x.Nodeid
	}
	return nil
}

func (x *ListnodesNodes) GetLastTimestamp() uint32 {
	if x != nil && x.LastTimestamp != nil {
		return *x.LastTimestamp
	}
	return 0
}

func (x *ListnodesNodes) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *ListnodesNodes) GetColor() []byte {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ListnodesNodes) GetFeatures() []byte {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *ListnodesNodes) GetAddresses() []*ListnodesNodesAddresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ListnodesNodesAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemType ListnodesNodesAddresses_ListnodesNodesAddressesType `protobuf:"varint,1,opt,name=item_type,json=itemType,proto3,enum=cln.ListnodesNodesAddresses_ListnodesNodesAddressesType" json:"item_type,omitempty"`
	Port     uint32                                              `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Address  *string                                             `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
}

func (x *ListnodesNodesAddresses) Reset() {
	*x = ListnodesNodesAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListnodesNodesAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListnodesNodesAddresses) ProtoMessage() {}

func (x *ListnodesNodesAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListnodesNodesAddresses.ProtoReflect.Descriptor instead.
func (*ListnodesNodesAddresses) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{72}
}

func (x *ListnodesNodesAddresses) GetItemType() ListnodesNodesAddresses_ListnodesNodesAddressesType {
	if x != nil {
		return x.ItemType
	}
	return ListnodesNodesAddresses_DNS
}

func (x *ListnodesNodesAddresses) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ListnodesNodesAddresses) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type WaitanyinvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastpayIndex *uint64 `protobuf:"varint,1,opt,name=lastpay_index,json=lastpayIndex,proto3,oneof" json:"lastpay_index,omitempty"`
	Timeout      *uint64 `protobuf:"varint,2,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *WaitanyinvoiceRequest) Reset() {
	*x = WaitanyinvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitanyinvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitanyinvoiceRequest) ProtoMessage() {}

func (x *WaitanyinvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitanyinvoiceRequest.ProtoReflect.Descriptor instead.
func (*WaitanyinvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{73}
}

func (x *WaitanyinvoiceRequest) GetLastpayIndex() uint64 {
	if x != nil && x.LastpayIndex != nil {
		return *x.LastpayIndex
	}
	return 0
}

func (x *WaitanyinvoiceRequest) GetTimeout() uint64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type WaitanyinvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label              string                                      `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Description        string                                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PaymentHash        []byte                                      `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status             WaitanyinvoiceResponse_WaitanyinvoiceStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.WaitanyinvoiceResponse_WaitanyinvoiceStatus" json:"status,omitempty"`
	ExpiresAt          uint64                                      `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	AmountMsat         *Amount                                     `protobuf:"bytes,6,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Bolt11             *string                                     `protobuf:"bytes,7,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12             *string                                     `protobuf:"bytes,8,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PayIndex           *uint64                                     `protobuf:"varint,9,opt,name=pay_index,json=payIndex,proto3,oneof" json:"pay_index,omitempty"`
	AmountReceivedMsat *Amount                                     `protobuf:"bytes,10,opt,name=amount_received_msat,json=amountReceivedMsat,proto3,oneof" json:"amount_received_msat,omitempty"`
	PaidAt             *uint64                                     `protobuf:"varint,11,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
	PaymentPreimage    []byte                                      `protobuf:"bytes,12,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
}

func (x *WaitanyinvoiceResponse) Reset() {
	*x = WaitanyinvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitanyinvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitanyinvoiceResponse) ProtoMessage() {}

func (x *WaitanyinvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitanyinvoiceResponse.ProtoReflect.Descriptor instead.
func (*WaitanyinvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{74}
}

func (x *WaitanyinvoiceResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WaitanyinvoiceResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WaitanyinvoiceResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *WaitanyinvoiceResponse) GetStatus() WaitanyinvoiceResponse_WaitanyinvoiceStatus {
	if x != nil {
		return x.Status
	}
	return WaitanyinvoiceResponse_PAID
}

func (x *WaitanyinvoiceResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *WaitanyinvoiceResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *WaitanyinvoiceResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *WaitanyinvoiceResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *WaitanyinvoiceResponse) GetPayIndex() uint64 {
	if x != nil && x.PayIndex != nil {
		return *x.PayIndex
	}
	return 0
}

func (x *WaitanyinvoiceResponse) GetAmountReceivedMsat() *Amount {
	if x != nil {
		return x.AmountReceivedMsat
	}
	return nil
}

func (x *WaitanyinvoiceResponse) GetPaidAt() uint64 {
	if x != nil && x.PaidAt != nil {
		return *x.PaidAt
	}
	return 0
}

func (x *WaitanyinvoiceResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

type WaitinvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *WaitinvoiceRequest) Reset() {
	*x = WaitinvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitinvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitinvoiceRequest) ProtoMessage() {}

func (x *WaitinvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitinvoiceRequest.ProtoReflect.Descriptor instead.
func (*WaitinvoiceRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{75}
}

func (x *WaitinvoiceRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type WaitinvoiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label              string                                `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Description        string                                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PaymentHash        []byte                                `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status             WaitinvoiceResponse_WaitinvoiceStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.WaitinvoiceResponse_WaitinvoiceStatus" json:"status,omitempty"`
	ExpiresAt          uint64                                `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	AmountMsat         *Amount                               `protobuf:"bytes,6,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Bolt11             *string                               `protobuf:"bytes,7,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12             *string                               `protobuf:"bytes,8,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PayIndex           *uint64                               `protobuf:"varint,9,opt,name=pay_index,json=payIndex,proto3,oneof" json:"pay_index,omitempty"`
	AmountReceivedMsat *Amount                               `protobuf:"bytes,10,opt,name=amount_received_msat,json=amountReceivedMsat,proto3,oneof" json:"amount_received_msat,omitempty"`
	PaidAt             *uint64                               `protobuf:"varint,11,opt,name=paid_at,json=paidAt,proto3,oneof" json:"paid_at,omitempty"`
	PaymentPreimage    []byte                                `protobuf:"bytes,12,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
}

func (x *WaitinvoiceResponse) Reset() {
	*x = WaitinvoiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitinvoiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitinvoiceResponse) ProtoMessage() {}

func (x *WaitinvoiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitinvoiceResponse.ProtoReflect.Descriptor instead.
func (*WaitinvoiceResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{76}
}

func (x *WaitinvoiceResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WaitinvoiceResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WaitinvoiceResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *WaitinvoiceResponse) GetStatus() WaitinvoiceResponse_WaitinvoiceStatus {
	if x != nil {
		return x.Status
	}
	return WaitinvoiceResponse_PAID
}

func (x *WaitinvoiceResponse) GetExpiresAt() uint64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *WaitinvoiceResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *WaitinvoiceResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *WaitinvoiceResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *WaitinvoiceResponse) GetPayIndex() uint64 {
	if x != nil && x.PayIndex != nil {
		return *x.PayIndex
	}
	return 0
}

func (x *WaitinvoiceResponse) GetAmountReceivedMsat() *Amount {
	if x != nil {
		return x.AmountReceivedMsat
	}
	return nil
}

func (x *WaitinvoiceResponse) GetPaidAt() uint64 {
	if x != nil && x.PaidAt != nil {
		return *x.PaidAt
	}
	return 0
}

func (x *WaitinvoiceResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

type WaitsendpayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentHash []byte  `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Timeout     *uint32 `protobuf:"varint,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	Partid      *uint64 `protobuf:"varint,2,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	Groupid     *uint64 `protobuf:"varint,4,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
}

func (x *WaitsendpayRequest) Reset() {
	*x = WaitsendpayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitsendpayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitsendpayRequest) ProtoMessage() {}

func (x *WaitsendpayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitsendpayRequest.ProtoReflect.Descriptor instead.
func (*WaitsendpayRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{77}
}

func (x *WaitsendpayRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *WaitsendpayRequest) GetTimeout() uint32 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

func (x *WaitsendpayRequest) GetPartid() uint64 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *WaitsendpayRequest) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

type WaitsendpayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Groupid         *uint64                               `protobuf:"varint,2,opt,name=groupid,proto3,oneof" json:"groupid,omitempty"`
	PaymentHash     []byte                                `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status          WaitsendpayResponse_WaitsendpayStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cln.WaitsendpayResponse_WaitsendpayStatus" json:"status,omitempty"`
	AmountMsat      *Amount                               `protobuf:"bytes,5,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	Destination     []byte                                `protobuf:"bytes,6,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	CreatedAt       uint64                                `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	AmountSentMsat  *Amount                               `protobuf:"bytes,8,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	Label           *string                               `protobuf:"bytes,9,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Partid          *uint64                               `protobuf:"varint,10,opt,name=partid,proto3,oneof" json:"partid,omitempty"`
	Bolt11          *string                               `protobuf:"bytes,11,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12          *string                               `protobuf:"bytes,12,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	PaymentPreimage []byte                                `protobuf:"bytes,13,opt,name=payment_preimage,json=paymentPreimage,proto3,oneof" json:"payment_preimage,omitempty"`
}

func (x *WaitsendpayResponse) Reset() {
	*x = WaitsendpayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitsendpayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitsendpayResponse) ProtoMessage() {}

func (x *WaitsendpayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitsendpayResponse.ProtoReflect.Descriptor instead.
func (*WaitsendpayResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{78}
}

func (x *WaitsendpayResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WaitsendpayResponse) GetGroupid() uint64 {
	if x != nil && x.Groupid != nil {
		return *x.Groupid
	}
	return 0
}

func (x *WaitsendpayResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *WaitsendpayResponse) GetStatus() WaitsendpayResponse_WaitsendpayStatus {
	if x != nil {
		return x.Status
	}
	return WaitsendpayResponse_COMPLETE
}

func (x *WaitsendpayResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *WaitsendpayResponse) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *WaitsendpayResponse) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WaitsendpayResponse) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *WaitsendpayResponse) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *WaitsendpayResponse) GetPartid() uint64 {
	if x != nil && x.Partid != nil {
		return *x.Partid
	}
	return 0
}

func (x *WaitsendpayResponse) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *WaitsendpayResponse) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *WaitsendpayResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

type NewaddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresstype *NewaddrRequest_NewaddrAddresstype `protobuf:"varint,1,opt,name=addresstype,proto3,enum=cln.NewaddrRequest_NewaddrAddresstype,oneof" json:"addresstype,omitempty"`
}

func (x *NewaddrRequest) Reset() {
	*x = NewaddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewaddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewaddrRequest) ProtoMessage() {}

func (x *NewaddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewaddrRequest.ProtoReflect.Descriptor instead.
func (*NewaddrRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{79}
}

func (x *NewaddrRequest) GetAddresstype() NewaddrRequest_NewaddrAddresstype {
	if x != nil && x.Addresstype != nil {
		return *x.Addresstype
	}
	return NewaddrRequest_BECH32
}

type NewaddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bech32     *string `protobuf:"bytes,1,opt,name=bech32,proto3,oneof" json:"bech32,omitempty"`
	P2ShSegwit *string `protobuf:"bytes,2,opt,name=p2sh_segwit,json=p2shSegwit,proto3,oneof" json:"p2sh_segwit,omitempty"`
}

func (x *NewaddrResponse) Reset() {
	*x = NewaddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewaddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewaddrResponse) ProtoMessage() {}

func (x *NewaddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewaddrResponse.ProtoReflect.Descriptor instead.
func (*NewaddrResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{80}
}

func (x *NewaddrResponse) GetBech32() string {
	if x != nil && x.Bech32 != nil {
		return *x.Bech32
	}
	return ""
}

func (x *NewaddrResponse) GetP2ShSegwit() string {
	if x != nil && x.P2ShSegwit != nil {
		return *x.P2ShSegwit
	}
	return ""
}

type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string       `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Satoshi     *AmountOrAll `protobuf:"bytes,2,opt,name=satoshi,proto3,oneof" json:"satoshi,omitempty"`
	Feerate     *Feerate     `protobuf:"bytes,5,opt,name=feerate,proto3,oneof" json:"feerate,omitempty"`
	Minconf     *uint32      `protobuf:"varint,3,opt,name=minconf,proto3,oneof" json:"minconf,omitempty"`
	Utxos       []*Outpoint  `protobuf:"bytes,4,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{81}
}

func (x *WithdrawRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *WithdrawRequest) GetSatoshi() *AmountOrAll {
	if x != nil {
		return x.Satoshi
	}
	return nil
}

func (x *WithdrawRequest) GetFeerate() *Feerate {
	if x != nil {
		return x.Feerate
	}
	return nil
}

func (x *WithdrawRequest) GetMinconf() uint32 {
	if x != nil && x.Minconf != nil {
		return *x.Minconf
	}
	return 0
}

func (x *WithdrawRequest) GetUtxos() []*Outpoint {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type WithdrawResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx   []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Txid []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Psbt string `protobuf:"bytes,3,opt,name=psbt,proto3" json:"psbt,omitempty"`
}

func (x *WithdrawResponse) Reset() {
	*x = WithdrawResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawResponse) ProtoMessage() {}

func (x *WithdrawResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawResponse.ProtoReflect.Descriptor instead.
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{82}
}

func (x *WithdrawResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *WithdrawResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *WithdrawResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

type KeysendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination   []byte         `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Msatoshi      *Amount        `protobuf:"bytes,2,opt,name=msatoshi,proto3" json:"msatoshi,omitempty"`
	Label         *string        `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Maxfeepercent *float64       `protobuf:"fixed64,4,opt,name=maxfeepercent,proto3,oneof" json:"maxfeepercent,omitempty"`
	RetryFor      *uint32        `protobuf:"varint,5,opt,name=retry_for,json=retryFor,proto3,oneof" json:"retry_for,omitempty"`
	Maxdelay      *uint32        `protobuf:"varint,6,opt,name=maxdelay,proto3,oneof" json:"maxdelay,omitempty"`
	Exemptfee     *Amount        `protobuf:"bytes,7,opt,name=exemptfee,proto3,oneof" json:"exemptfee,omitempty"`
	Routehints    *RoutehintList `protobuf:"bytes,8,opt,name=routehints,proto3,oneof" json:"routehints,omitempty"`
}

func (x *KeysendRequest) Reset() {
	*x = KeysendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysendRequest) ProtoMessage() {}

func (x *KeysendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysendRequest.ProtoReflect.Descriptor instead.
func (*KeysendRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{83}
}

func (x *KeysendRequest) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *KeysendRequest) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *KeysendRequest) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *KeysendRequest) GetMaxfeepercent() float64 {
	if x != nil && x.Maxfeepercent != nil {
		return *x.Maxfeepercent
	}
	return 0
}

func (x *KeysendRequest) GetRetryFor() uint32 {
	if x != nil && x.RetryFor != nil {
		return *x.RetryFor
	}
	return 0
}

func (x *KeysendRequest) GetMaxdelay() uint32 {
	if x != nil && x.Maxdelay != nil {
		return *x.Maxdelay
	}
	return 0
}

func (x *KeysendRequest) GetExemptfee() *Amount {
	if x != nil {
		return x.Exemptfee
	}
	return nil
}

func (x *KeysendRequest) GetRoutehints() *RoutehintList {
	if x != nil {
		return x.Routehints
	}
	return nil
}

type KeysendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentPreimage          []byte                        `protobuf:"bytes,1,opt,name=payment_preimage,json=paymentPreimage,proto3" json:"payment_preimage,omitempty"`
	Destination              []byte                        `protobuf:"bytes,2,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	PaymentHash              []byte                        `protobuf:"bytes,3,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	CreatedAt                float64                       `protobuf:"fixed64,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Parts                    uint32                        `protobuf:"varint,5,opt,name=parts,proto3" json:"parts,omitempty"`
	AmountMsat               *Amount                       `protobuf:"bytes,6,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	AmountSentMsat           *Amount                       `protobuf:"bytes,7,opt,name=amount_sent_msat,json=amountSentMsat,proto3" json:"amount_sent_msat,omitempty"`
	WarningPartialCompletion *string                       `protobuf:"bytes,8,opt,name=warning_partial_completion,json=warningPartialCompletion,proto3,oneof" json:"warning_partial_completion,omitempty"`
	Status                   KeysendResponse_KeysendStatus `protobuf:"varint,9,opt,name=status,proto3,enum=cln.KeysendResponse_KeysendStatus" json:"status,omitempty"`
}

func (x *KeysendResponse) Reset() {
	*x = KeysendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysendResponse) ProtoMessage() {}

func (x *KeysendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysendResponse.ProtoReflect.Descriptor instead.
func (*KeysendResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{84}
}

func (x *KeysendResponse) GetPaymentPreimage() []byte {
	if x != nil {
		return x.PaymentPreimage
	}
	return nil
}

func (x *KeysendResponse) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *KeysendResponse) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *KeysendResponse) GetCreatedAt() float64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *KeysendResponse) GetParts() uint32 {
	if x != nil {
		return x.Parts
	}
	return 0
}

func (x *KeysendResponse) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *KeysendResponse) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *KeysendResponse) GetWarningPartialCompletion() string {
	if x != nil && x.WarningPartialCompletion != nil {
		return *x.WarningPartialCompletion
	}
	return ""
}

func (x *KeysendResponse) GetStatus() KeysendResponse_KeysendStatus {
	if x != nil {
		return x.Status
	}
	return KeysendResponse_COMPLETE
}

type KeysendExtratlvs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeysendExtratlvs) Reset() {
	*x = KeysendExtratlvs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysendExtratlvs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysendExtratlvs) ProtoMessage() {}

func (x *KeysendExtratlvs) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysendExtratlvs.ProtoReflect.Descriptor instead.
func (*KeysendExtratlvs) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{85}
}

type FundpsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Satoshi          *Amount  `protobuf:"bytes,1,opt,name=satoshi,proto3" json:"satoshi,omitempty"`
	Feerate          *Feerate `protobuf:"bytes,2,opt,name=feerate,proto3" json:"feerate,omitempty"`
	Startweight      uint32   `protobuf:"varint,3,opt,name=startweight,proto3" json:"startweight,omitempty"`
	Minconf          *uint32  `protobuf:"varint,4,opt,name=minconf,proto3,oneof" json:"minconf,omitempty"`
	Reserve          *uint32  `protobuf:"varint,5,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	Locktime         *uint32  `protobuf:"varint,6,opt,name=locktime,proto3,oneof" json:"locktime,omitempty"`
	MinWitnessWeight *uint32  `protobuf:"varint,7,opt,name=min_witness_weight,json=minWitnessWeight,proto3,oneof" json:"min_witness_weight,omitempty"`
	ExcessAsChange   *bool    `protobuf:"varint,8,opt,name=excess_as_change,json=excessAsChange,proto3,oneof" json:"excess_as_change,omitempty"`
}

func (x *FundpsbtRequest) Reset() {
	*x = FundpsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundpsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundpsbtRequest) ProtoMessage() {}

func (x *FundpsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundpsbtRequest.ProtoReflect.Descriptor instead.
func (*FundpsbtRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{86}
}

func (x *FundpsbtRequest) GetSatoshi() *Amount {
	if x != nil {
		return x.Satoshi
	}
	return nil
}

func (x *FundpsbtRequest) GetFeerate() *Feerate {
	if x != nil {
		return x.Feerate
	}
	return nil
}

func (x *FundpsbtRequest) GetStartweight() uint32 {
	if x != nil {
		return x.Startweight
	}
	return 0
}

func (x *FundpsbtRequest) GetMinconf() uint32 {
	if x != nil && x.Minconf != nil {
		return *x.Minconf
	}
	return 0
}

func (x *FundpsbtRequest) GetReserve() uint32 {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return 0
}

func (x *FundpsbtRequest) GetLocktime() uint32 {
	if x != nil && x.Locktime != nil {
		return *x.Locktime
	}
	return 0
}

func (x *FundpsbtRequest) GetMinWitnessWeight() uint32 {
	if x != nil && x.MinWitnessWeight != nil {
		return *x.MinWitnessWeight
	}
	return 0
}

func (x *FundpsbtRequest) GetExcessAsChange() bool {
	if x != nil && x.ExcessAsChange != nil {
		return *x.ExcessAsChange
	}
	return false
}

type FundpsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt                 string                  `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	FeeratePerKw         uint32                  `protobuf:"varint,2,opt,name=feerate_per_kw,json=feeratePerKw,proto3" json:"feerate_per_kw,omitempty"`
	EstimatedFinalWeight uint32                  `protobuf:"varint,3,opt,name=estimated_final_weight,json=estimatedFinalWeight,proto3" json:"estimated_final_weight,omitempty"`
	ExcessMsat           *Amount                 `protobuf:"bytes,4,opt,name=excess_msat,json=excessMsat,proto3" json:"excess_msat,omitempty"`
	ChangeOutnum         *uint32                 `protobuf:"varint,5,opt,name=change_outnum,json=changeOutnum,proto3,oneof" json:"change_outnum,omitempty"`
	Reservations         []*FundpsbtReservations `protobuf:"bytes,6,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *FundpsbtResponse) Reset() {
	*x = FundpsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundpsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundpsbtResponse) ProtoMessage() {}

func (x *FundpsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundpsbtResponse.ProtoReflect.Descriptor instead.
func (*FundpsbtResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{87}
}

func (x *FundpsbtResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *FundpsbtResponse) GetFeeratePerKw() uint32 {
	if x != nil {
		return x.FeeratePerKw
	}
	return 0
}

func (x *FundpsbtResponse) GetEstimatedFinalWeight() uint32 {
	if x != nil {
		return x.EstimatedFinalWeight
	}
	return 0
}

func (x *FundpsbtResponse) GetExcessMsat() *Amount {
	if x != nil {
		return x.ExcessMsat
	}
	return nil
}

func (x *FundpsbtResponse) GetChangeOutnum() uint32 {
	if x != nil && x.ChangeOutnum != nil {
		return *x.ChangeOutnum
	}
	return 0
}

func (x *FundpsbtResponse) GetReservations() []*FundpsbtReservations {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type FundpsbtReservations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid            []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout            uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	WasReserved     bool   `protobuf:"varint,3,opt,name=was_reserved,json=wasReserved,proto3" json:"was_reserved,omitempty"`
	Reserved        bool   `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
	ReservedToBlock uint32 `protobuf:"varint,5,opt,name=reserved_to_block,json=reservedToBlock,proto3" json:"reserved_to_block,omitempty"`
}

func (x *FundpsbtReservations) Reset() {
	*x = FundpsbtReservations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundpsbtReservations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundpsbtReservations) ProtoMessage() {}

func (x *FundpsbtReservations) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundpsbtReservations.ProtoReflect.Descriptor instead.
func (*FundpsbtReservations) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{88}
}

func (x *FundpsbtReservations) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *FundpsbtReservations) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *FundpsbtReservations) GetWasReserved() bool {
	if x != nil {
		return x.WasReserved
	}
	return false
}

func (x *FundpsbtReservations) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *FundpsbtReservations) GetReservedToBlock() uint32 {
	if x != nil {
		return x.ReservedToBlock
	}
	return 0
}

type SendpsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt    string `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	Reserve *bool  `protobuf:"varint,2,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
}

func (x *SendpsbtRequest) Reset() {
	*x = SendpsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendpsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendpsbtRequest) ProtoMessage() {}

func (x *SendpsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendpsbtRequest.ProtoReflect.Descriptor instead.
func (*SendpsbtRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{89}
}

func (x *SendpsbtRequest) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *SendpsbtRequest) GetReserve() bool {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return false
}

type SendpsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx   []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Txid []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *SendpsbtResponse) Reset() {
	*x = SendpsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendpsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendpsbtResponse) ProtoMessage() {}

func (x *SendpsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendpsbtResponse.ProtoReflect.Descriptor instead.
func (*SendpsbtResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{90}
}

func (x *SendpsbtResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *SendpsbtResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type SignpsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt     string   `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	Signonly []uint32 `protobuf:"varint,2,rep,packed,name=signonly,proto3" json:"signonly,omitempty"`
}

func (x *SignpsbtRequest) Reset() {
	*x = SignpsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignpsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignpsbtRequest) ProtoMessage() {}

func (x *SignpsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignpsbtRequest.ProtoReflect.Descriptor instead.
func (*SignpsbtRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{91}
}

func (x *SignpsbtRequest) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *SignpsbtRequest) GetSignonly() []uint32 {
	if x != nil {
		return x.Signonly
	}
	return nil
}

type SignpsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedPsbt string `protobuf:"bytes,1,opt,name=signed_psbt,json=signedPsbt,proto3" json:"signed_psbt,omitempty"`
}

func (x *SignpsbtResponse) Reset() {
	*x = SignpsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignpsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignpsbtResponse) ProtoMessage() {}

func (x *SignpsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignpsbtResponse.ProtoReflect.Descriptor instead.
func (*SignpsbtResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{92}
}

func (x *SignpsbtResponse) GetSignedPsbt() string {
	if x != nil {
		return x.SignedPsbt
	}
	return ""
}

type UtxopsbtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Satoshi          *Amount     `protobuf:"bytes,1,opt,name=satoshi,proto3" json:"satoshi,omitempty"`
	Feerate          *Feerate    `protobuf:"bytes,2,opt,name=feerate,proto3" json:"feerate,omitempty"`
	Startweight      uint32      `protobuf:"varint,3,opt,name=startweight,proto3" json:"startweight,omitempty"`
	Utxos            []*Outpoint `protobuf:"bytes,4,rep,name=utxos,proto3" json:"utxos,omitempty"`
	Reserve          *uint32     `protobuf:"varint,5,opt,name=reserve,proto3,oneof" json:"reserve,omitempty"`
	Reservedok       *bool       `protobuf:"varint,8,opt,name=reservedok,proto3,oneof" json:"reservedok,omitempty"`
	Locktime         *uint32     `protobuf:"varint,6,opt,name=locktime,proto3,oneof" json:"locktime,omitempty"`
	MinWitnessWeight *uint32     `protobuf:"varint,7,opt,name=min_witness_weight,json=minWitnessWeight,proto3,oneof" json:"min_witness_weight,omitempty"`
	ExcessAsChange   *bool       `protobuf:"varint,9,opt,name=excess_as_change,json=excessAsChange,proto3,oneof" json:"excess_as_change,omitempty"`
}

func (x *UtxopsbtRequest) Reset() {
	*x = UtxopsbtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxopsbtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxopsbtRequest) ProtoMessage() {}

func (x *UtxopsbtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxopsbtRequest.ProtoReflect.Descriptor instead.
func (*UtxopsbtRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{93}
}

func (x *UtxopsbtRequest) GetSatoshi() *Amount {
	if x != nil {
		return x.Satoshi
	}
	return nil
}

func (x *UtxopsbtRequest) GetFeerate() *Feerate {
	if x != nil {
		return x.Feerate
	}
	return nil
}

func (x *UtxopsbtRequest) GetStartweight() uint32 {
	if x != nil {
		return x.Startweight
	}
	return 0
}

func (x *UtxopsbtRequest) GetUtxos() []*Outpoint {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *UtxopsbtRequest) GetReserve() uint32 {
	if x != nil && x.Reserve != nil {
		return *x.Reserve
	}
	return 0
}

func (x *UtxopsbtRequest) GetReservedok() bool {
	if x != nil && x.Reservedok != nil {
		return *x.Reservedok
	}
	return false
}

func (x *UtxopsbtRequest) GetLocktime() uint32 {
	if x != nil && x.Locktime != nil {
		return *x.Locktime
	}
	return 0
}

func (x *UtxopsbtRequest) GetMinWitnessWeight() uint32 {
	if x != nil && x.MinWitnessWeight != nil {
		return *x.MinWitnessWeight
	}
	return 0
}

func (x *UtxopsbtRequest) GetExcessAsChange() bool {
	if x != nil && x.ExcessAsChange != nil {
		return *x.ExcessAsChange
	}
	return false
}

type UtxopsbtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt                 string                  `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	FeeratePerKw         uint32                  `protobuf:"varint,2,opt,name=feerate_per_kw,json=feeratePerKw,proto3" json:"feerate_per_kw,omitempty"`
	EstimatedFinalWeight uint32                  `protobuf:"varint,3,opt,name=estimated_final_weight,json=estimatedFinalWeight,proto3" json:"estimated_final_weight,omitempty"`
	ExcessMsat           *Amount                 `protobuf:"bytes,4,opt,name=excess_msat,json=excessMsat,proto3" json:"excess_msat,omitempty"`
	ChangeOutnum         *uint32                 `protobuf:"varint,5,opt,name=change_outnum,json=changeOutnum,proto3,oneof" json:"change_outnum,omitempty"`
	Reservations         []*UtxopsbtReservations `protobuf:"bytes,6,rep,name=reservations,proto3" json:"reservations,omitempty"`
}

func (x *UtxopsbtResponse) Reset() {
	*x = UtxopsbtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxopsbtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxopsbtResponse) ProtoMessage() {}

func (x *UtxopsbtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxopsbtResponse.ProtoReflect.Descriptor instead.
func (*UtxopsbtResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{94}
}

func (x *UtxopsbtResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *UtxopsbtResponse) GetFeeratePerKw() uint32 {
	if x != nil {
		return x.FeeratePerKw
	}
	return 0
}

func (x *UtxopsbtResponse) GetEstimatedFinalWeight() uint32 {
	if x != nil {
		return x.EstimatedFinalWeight
	}
	return 0
}

func (x *UtxopsbtResponse) GetExcessMsat() *Amount {
	if x != nil {
		return x.ExcessMsat
	}
	return nil
}

func (x *UtxopsbtResponse) GetChangeOutnum() uint32 {
	if x != nil && x.ChangeOutnum != nil {
		return *x.ChangeOutnum
	}
	return 0
}

func (x *UtxopsbtResponse) GetReservations() []*UtxopsbtReservations {
	if x != nil {
		return x.Reservations
	}
	return nil
}

type UtxopsbtReservations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid            []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Vout            uint32 `protobuf:"varint,2,opt,name=vout,proto3" json:"vout,omitempty"`
	WasReserved     bool   `protobuf:"varint,3,opt,name=was_reserved,json=wasReserved,proto3" json:"was_reserved,omitempty"`
	Reserved        bool   `protobuf:"varint,4,opt,name=reserved,proto3" json:"reserved,omitempty"`
	ReservedToBlock uint32 `protobuf:"varint,5,opt,name=reserved_to_block,json=reservedToBlock,proto3" json:"reserved_to_block,omitempty"`
}

func (x *UtxopsbtReservations) Reset() {
	*x = UtxopsbtReservations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxopsbtReservations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxopsbtReservations) ProtoMessage() {}

func (x *UtxopsbtReservations) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxopsbtReservations.ProtoReflect.Descriptor instead.
func (*UtxopsbtReservations) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{95}
}

func (x *UtxopsbtReservations) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *UtxopsbtReservations) GetVout() uint32 {
	if x != nil {
		return x.Vout
	}
	return 0
}

func (x *UtxopsbtReservations) GetWasReserved() bool {
	if x != nil {
		return x.WasReserved
	}
	return false
}

func (x *UtxopsbtReservations) GetReserved() bool {
	if x != nil {
		return x.Reserved
	}
	return false
}

func (x *UtxopsbtReservations) GetReservedToBlock() uint32 {
	if x != nil {
		return x.ReservedToBlock
	}
	return 0
}

type TxdiscardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *TxdiscardRequest) Reset() {
	*x = TxdiscardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxdiscardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxdiscardRequest) ProtoMessage() {}

func (x *TxdiscardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxdiscardRequest.ProtoReflect.Descriptor instead.
func (*TxdiscardRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{96}
}

func (x *TxdiscardRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type TxdiscardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnsignedTx []byte `protobuf:"bytes,1,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
	Txid       []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *TxdiscardResponse) Reset() {
	*x = TxdiscardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxdiscardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxdiscardResponse) ProtoMessage() {}

func (x *TxdiscardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxdiscardResponse.ProtoReflect.Descriptor instead.
func (*TxdiscardResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{97}
}

func (x *TxdiscardResponse) GetUnsignedTx() []byte {
	if x != nil {
		return x.UnsignedTx
	}
	return nil
}

func (x *TxdiscardResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type TxprepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outputs []*OutputDesc `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Feerate *Feerate      `protobuf:"bytes,2,opt,name=feerate,proto3,oneof" json:"feerate,omitempty"`
	Minconf *uint32       `protobuf:"varint,3,opt,name=minconf,proto3,oneof" json:"minconf,omitempty"`
	Utxos   []*Outpoint   `protobuf:"bytes,4,rep,name=utxos,proto3" json:"utxos,omitempty"`
}

func (x *TxprepareRequest) Reset() {
	*x = TxprepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxprepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxprepareRequest) ProtoMessage() {}

func (x *TxprepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxprepareRequest.ProtoReflect.Descriptor instead.
func (*TxprepareRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{98}
}

func (x *TxprepareRequest) GetOutputs() []*OutputDesc {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TxprepareRequest) GetFeerate() *Feerate {
	if x != nil {
		return x.Feerate
	}
	return nil
}

func (x *TxprepareRequest) GetMinconf() uint32 {
	if x != nil && x.Minconf != nil {
		return *x.Minconf
	}
	return 0
}

func (x *TxprepareRequest) GetUtxos() []*Outpoint {
	if x != nil {
		return x.Utxos
	}
	return nil
}

type TxprepareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt       string `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	UnsignedTx []byte `protobuf:"bytes,2,opt,name=unsigned_tx,json=unsignedTx,proto3" json:"unsigned_tx,omitempty"`
	Txid       []byte `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *TxprepareResponse) Reset() {
	*x = TxprepareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxprepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxprepareResponse) ProtoMessage() {}

func (x *TxprepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxprepareResponse.ProtoReflect.Descriptor instead.
func (*TxprepareResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{99}
}

func (x *TxprepareResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *TxprepareResponse) GetUnsignedTx() []byte {
	if x != nil {
		return x.UnsignedTx
	}
	return nil
}

func (x *TxprepareResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type TxsendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *TxsendRequest) Reset() {
	*x = TxsendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxsendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsendRequest) ProtoMessage() {}

func (x *TxsendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsendRequest.ProtoReflect.Descriptor instead.
func (*TxsendRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{100}
}

func (x *TxsendRequest) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type TxsendResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Psbt string `protobuf:"bytes,1,opt,name=psbt,proto3" json:"psbt,omitempty"`
	Tx   []byte `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Txid []byte `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *TxsendResponse) Reset() {
	*x = TxsendResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxsendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxsendResponse) ProtoMessage() {}

func (x *TxsendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxsendResponse.ProtoReflect.Descriptor instead.
func (*TxsendResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{101}
}

func (x *TxsendResponse) GetPsbt() string {
	if x != nil {
		return x.Psbt
	}
	return ""
}

func (x *TxsendResponse) GetTx() []byte {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxsendResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Force *bool  `protobuf:"varint,2,opt,name=force,proto3,oneof" json:"force,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{102}
}

func (x *DisconnectRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DisconnectRequest) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{103}
}

type FeeratesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Style FeeratesRequest_FeeratesStyle `protobuf:"varint,1,opt,name=style,proto3,enum=cln.FeeratesRequest_FeeratesStyle" json:"style,omitempty"`
}

func (x *FeeratesRequest) Reset() {
	*x = FeeratesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeratesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeratesRequest) ProtoMessage() {}

func (x *FeeratesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeratesRequest.ProtoReflect.Descriptor instead.
func (*FeeratesRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{104}
}

func (x *FeeratesRequest) GetStyle() FeeratesRequest_FeeratesStyle {
	if x != nil {
		return x.Style
	}
	return FeeratesRequest_PERKB
}

type FeeratesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningMissingFeerates *string `protobuf:"bytes,1,opt,name=warning_missing_feerates,json=warningMissingFeerates,proto3,oneof" json:"warning_missing_feerates,omitempty"`
}

func (x *FeeratesResponse) Reset() {
	*x = FeeratesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeratesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeratesResponse) ProtoMessage() {}

func (x *FeeratesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeratesResponse.ProtoReflect.Descriptor instead.
func (*FeeratesResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{105}
}

func (x *FeeratesResponse) GetWarningMissingFeerates() string {
	if x != nil && x.WarningMissingFeerates != nil {
		return *x.WarningMissingFeerates
	}
	return ""
}

type FeeratesPerkb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinAcceptable   uint32  `protobuf:"varint,1,opt,name=min_acceptable,json=minAcceptable,proto3" json:"min_acceptable,omitempty"`
	MaxAcceptable   uint32  `protobuf:"varint,2,opt,name=max_acceptable,json=maxAcceptable,proto3" json:"max_acceptable,omitempty"`
	Opening         *uint32 `protobuf:"varint,3,opt,name=opening,proto3,oneof" json:"opening,omitempty"`
	MutualClose     *uint32 `protobuf:"varint,4,opt,name=mutual_close,json=mutualClose,proto3,oneof" json:"mutual_close,omitempty"`
	UnilateralClose *uint32 `protobuf:"varint,5,opt,name=unilateral_close,json=unilateralClose,proto3,oneof" json:"unilateral_close,omitempty"`
	DelayedToUs     *uint32 `protobuf:"varint,6,opt,name=delayed_to_us,json=delayedToUs,proto3,oneof" json:"delayed_to_us,omitempty"`
	HtlcResolution  *uint32 `protobuf:"varint,7,opt,name=htlc_resolution,json=htlcResolution,proto3,oneof" json:"htlc_resolution,omitempty"`
	Penalty         *uint32 `protobuf:"varint,8,opt,name=penalty,proto3,oneof" json:"penalty,omitempty"`
}

func (x *FeeratesPerkb) Reset() {
	*x = FeeratesPerkb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeratesPerkb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeratesPerkb) ProtoMessage() {}

func (x *FeeratesPerkb) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeratesPerkb.ProtoReflect.Descriptor instead.
func (*FeeratesPerkb) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{106}
}

func (x *FeeratesPerkb) GetMinAcceptable() uint32 {
	if x != nil {
		return x.MinAcceptable
	}
	return 0
}

func (x *FeeratesPerkb) GetMaxAcceptable() uint32 {
	if x != nil {
		return x.MaxAcceptable
	}
	return 0
}

func (x *FeeratesPerkb) GetOpening() uint32 {
	if x != nil && x.Opening != nil {
		return *x.Opening
	}
	return 0
}

func (x *FeeratesPerkb) GetMutualClose() uint32 {
	if x != nil && x.MutualClose != nil {
		return *x.MutualClose
	}
	return 0
}

func (x *FeeratesPerkb) GetUnilateralClose() uint32 {
	if x != nil && x.UnilateralClose != nil {
		return *x.UnilateralClose
	}
	return 0
}

func (x *FeeratesPerkb) GetDelayedToUs() uint32 {
	if x != nil && x.DelayedToUs != nil {
		return *x.DelayedToUs
	}
	return 0
}

func (x *FeeratesPerkb) GetHtlcResolution() uint32 {
	if x != nil && x.HtlcResolution != nil {
		return *x.HtlcResolution
	}
	return 0
}

func (x *FeeratesPerkb) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type FeeratesPerkw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinAcceptable   uint32  `protobuf:"varint,1,opt,name=min_acceptable,json=minAcceptable,proto3" json:"min_acceptable,omitempty"`
	MaxAcceptable   uint32  `protobuf:"varint,2,opt,name=max_acceptable,json=maxAcceptable,proto3" json:"max_acceptable,omitempty"`
	Opening         *uint32 `protobuf:"varint,3,opt,name=opening,proto3,oneof" json:"opening,omitempty"`
	MutualClose     *uint32 `protobuf:"varint,4,opt,name=mutual_close,json=mutualClose,proto3,oneof" json:"mutual_close,omitempty"`
	UnilateralClose *uint32 `protobuf:"varint,5,opt,name=unilateral_close,json=unilateralClose,proto3,oneof" json:"unilateral_close,omitempty"`
	DelayedToUs     *uint32 `protobuf:"varint,6,opt,name=delayed_to_us,json=delayedToUs,proto3,oneof" json:"delayed_to_us,omitempty"`
	HtlcResolution  *uint32 `protobuf:"varint,7,opt,name=htlc_resolution,json=htlcResolution,proto3,oneof" json:"htlc_resolution,omitempty"`
	Penalty         *uint32 `protobuf:"varint,8,opt,name=penalty,proto3,oneof" json:"penalty,omitempty"`
}

func (x *FeeratesPerkw) Reset() {
	*x = FeeratesPerkw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeratesPerkw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeratesPerkw) ProtoMessage() {}

func (x *FeeratesPerkw) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeratesPerkw.ProtoReflect.Descriptor instead.
func (*FeeratesPerkw) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{107}
}

func (x *FeeratesPerkw) GetMinAcceptable() uint32 {
	if x != nil {
		return x.MinAcceptable
	}
	return 0
}

func (x *FeeratesPerkw) GetMaxAcceptable() uint32 {
	if x != nil {
		return x.MaxAcceptable
	}
	return 0
}

func (x *FeeratesPerkw) GetOpening() uint32 {
	if x != nil && x.Opening != nil {
		return *x.Opening
	}
	return 0
}

func (x *FeeratesPerkw) GetMutualClose() uint32 {
	if x != nil && x.MutualClose != nil {
		return *x.MutualClose
	}
	return 0
}

func (x *FeeratesPerkw) GetUnilateralClose() uint32 {
	if x != nil && x.UnilateralClose != nil {
		return *x.UnilateralClose
	}
	return 0
}

func (x *FeeratesPerkw) GetDelayedToUs() uint32 {
	if x != nil && x.DelayedToUs != nil {
		return *x.DelayedToUs
	}
	return 0
}

func (x *FeeratesPerkw) GetHtlcResolution() uint32 {
	if x != nil && x.HtlcResolution != nil {
		return *x.HtlcResolution
	}
	return 0
}

func (x *FeeratesPerkw) GetPenalty() uint32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

type FeeratesOnchainFeeEstimates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpeningChannelSatoshis  uint64 `protobuf:"varint,1,opt,name=opening_channel_satoshis,json=openingChannelSatoshis,proto3" json:"opening_channel_satoshis,omitempty"`
	MutualCloseSatoshis     uint64 `protobuf:"varint,2,opt,name=mutual_close_satoshis,json=mutualCloseSatoshis,proto3" json:"mutual_close_satoshis,omitempty"`
	UnilateralCloseSatoshis uint64 `protobuf:"varint,3,opt,name=unilateral_close_satoshis,json=unilateralCloseSatoshis,proto3" json:"unilateral_close_satoshis,omitempty"`
	HtlcTimeoutSatoshis     uint64 `protobuf:"varint,4,opt,name=htlc_timeout_satoshis,json=htlcTimeoutSatoshis,proto3" json:"htlc_timeout_satoshis,omitempty"`
	HtlcSuccessSatoshis     uint64 `protobuf:"varint,5,opt,name=htlc_success_satoshis,json=htlcSuccessSatoshis,proto3" json:"htlc_success_satoshis,omitempty"`
}

func (x *FeeratesOnchainFeeEstimates) Reset() {
	*x = FeeratesOnchainFeeEstimates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeratesOnchainFeeEstimates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeratesOnchainFeeEstimates) ProtoMessage() {}

func (x *FeeratesOnchainFeeEstimates) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeratesOnchainFeeEstimates.ProtoReflect.Descriptor instead.
func (*FeeratesOnchainFeeEstimates) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{108}
}

func (x *FeeratesOnchainFeeEstimates) GetOpeningChannelSatoshis() uint64 {
	if x != nil {
		return x.OpeningChannelSatoshis
	}
	return 0
}

func (x *FeeratesOnchainFeeEstimates) GetMutualCloseSatoshis() uint64 {
	if x != nil {
		return x.MutualCloseSatoshis
	}
	return 0
}

func (x *FeeratesOnchainFeeEstimates) GetUnilateralCloseSatoshis() uint64 {
	if x != nil {
		return x.UnilateralCloseSatoshis
	}
	return 0
}

func (x *FeeratesOnchainFeeEstimates) GetHtlcTimeoutSatoshis() uint64 {
	if x != nil {
		return x.HtlcTimeoutSatoshis
	}
	return 0
}

func (x *FeeratesOnchainFeeEstimates) GetHtlcSuccessSatoshis() uint64 {
	if x != nil {
		return x.HtlcSuccessSatoshis
	}
	return 0
}

type GetrouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msatoshi    *Amount  `protobuf:"bytes,2,opt,name=msatoshi,proto3" json:"msatoshi,omitempty"`
	Riskfactor  uint64   `protobuf:"varint,3,opt,name=riskfactor,proto3" json:"riskfactor,omitempty"`
	Cltv        *float64 `protobuf:"fixed64,4,opt,name=cltv,proto3,oneof" json:"cltv,omitempty"`
	Fromid      []byte   `protobuf:"bytes,5,opt,name=fromid,proto3,oneof" json:"fromid,omitempty"`
	Fuzzpercent *uint32  `protobuf:"varint,6,opt,name=fuzzpercent,proto3,oneof" json:"fuzzpercent,omitempty"`
	Exclude     []string `protobuf:"bytes,7,rep,name=exclude,proto3" json:"exclude,omitempty"`
	Maxhops     *uint32  `protobuf:"varint,8,opt,name=maxhops,proto3,oneof" json:"maxhops,omitempty"`
}

func (x *GetrouteRequest) Reset() {
	*x = GetrouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetrouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetrouteRequest) ProtoMessage() {}

func (x *GetrouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetrouteRequest.ProtoReflect.Descriptor instead.
func (*GetrouteRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{109}
}

func (x *GetrouteRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetrouteRequest) GetMsatoshi() *Amount {
	if x != nil {
		return x.Msatoshi
	}
	return nil
}

func (x *GetrouteRequest) GetRiskfactor() uint64 {
	if x != nil {
		return x.Riskfactor
	}
	return 0
}

func (x *GetrouteRequest) GetCltv() float64 {
	if x != nil && x.Cltv != nil {
		return *x.Cltv
	}
	return 0
}

func (x *GetrouteRequest) GetFromid() []byte {
	if x != nil {
		return x.Fromid
	}
	return nil
}

func (x *GetrouteRequest) GetFuzzpercent() uint32 {
	if x != nil && x.Fuzzpercent != nil {
		return *x.Fuzzpercent
	}
	return 0
}

func (x *GetrouteRequest) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *GetrouteRequest) GetMaxhops() uint32 {
	if x != nil && x.Maxhops != nil {
		return *x.Maxhops
	}
	return 0
}

type GetrouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route []*GetrouteRoute `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty"`
}

func (x *GetrouteResponse) Reset() {
	*x = GetrouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetrouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetrouteResponse) ProtoMessage() {}

func (x *GetrouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetrouteResponse.ProtoReflect.Descriptor instead.
func (*GetrouteResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{110}
}

func (x *GetrouteResponse) GetRoute() []*GetrouteRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

type GetrouteRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Channel    string                           `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Direction  uint32                           `protobuf:"varint,3,opt,name=direction,proto3" json:"direction,omitempty"`
	AmountMsat *Amount                          `protobuf:"bytes,4,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	Delay      uint32                           `protobuf:"varint,5,opt,name=delay,proto3" json:"delay,omitempty"`
	Style      GetrouteRoute_GetrouteRouteStyle `protobuf:"varint,6,opt,name=style,proto3,enum=cln.GetrouteRoute_GetrouteRouteStyle" json:"style,omitempty"`
}

func (x *GetrouteRoute) Reset() {
	*x = GetrouteRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetrouteRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetrouteRoute) ProtoMessage() {}

func (x *GetrouteRoute) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetrouteRoute.ProtoReflect.Descriptor instead.
func (*GetrouteRoute) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{111}
}

func (x *GetrouteRoute) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetrouteRoute) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *GetrouteRoute) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *GetrouteRoute) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *GetrouteRoute) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *GetrouteRoute) GetStyle() GetrouteRoute_GetrouteRouteStyle {
	if x != nil {
		return x.Style
	}
	return GetrouteRoute_TLV
}

type ListforwardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     *ListforwardsRequest_ListforwardsStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cln.ListforwardsRequest_ListforwardsStatus,oneof" json:"status,omitempty"`
	InChannel  *string                                 `protobuf:"bytes,2,opt,name=in_channel,json=inChannel,proto3,oneof" json:"in_channel,omitempty"`
	OutChannel *string                                 `protobuf:"bytes,3,opt,name=out_channel,json=outChannel,proto3,oneof" json:"out_channel,omitempty"`
}

func (x *ListforwardsRequest) Reset() {
	*x = ListforwardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListforwardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListforwardsRequest) ProtoMessage() {}

func (x *ListforwardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListforwardsRequest.ProtoReflect.Descriptor instead.
func (*ListforwardsRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{112}
}

func (x *ListforwardsRequest) GetStatus() ListforwardsRequest_ListforwardsStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ListforwardsRequest_OFFERED
}

func (x *ListforwardsRequest) GetInChannel() string {
	if x != nil && x.InChannel != nil {
		return *x.InChannel
	}
	return ""
}

func (x *ListforwardsRequest) GetOutChannel() string {
	if x != nil && x.OutChannel != nil {
		return *x.OutChannel
	}
	return ""
}

type ListforwardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwards []*ListforwardsForwards `protobuf:"bytes,1,rep,name=forwards,proto3" json:"forwards,omitempty"`
}

func (x *ListforwardsResponse) Reset() {
	*x = ListforwardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListforwardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListforwardsResponse) ProtoMessage() {}

func (x *ListforwardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListforwardsResponse.ProtoReflect.Descriptor instead.
func (*ListforwardsResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{113}
}

func (x *ListforwardsResponse) GetForwards() []*ListforwardsForwards {
	if x != nil {
		return x.Forwards
	}
	return nil
}

type ListforwardsForwards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InChannel    string                                          `protobuf:"bytes,1,opt,name=in_channel,json=inChannel,proto3" json:"in_channel,omitempty"`
	InMsat       *Amount                                         `protobuf:"bytes,2,opt,name=in_msat,json=inMsat,proto3" json:"in_msat,omitempty"`
	Status       ListforwardsForwards_ListforwardsForwardsStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cln.ListforwardsForwards_ListforwardsForwardsStatus" json:"status,omitempty"`
	ReceivedTime float64                                         `protobuf:"fixed64,4,opt,name=received_time,json=receivedTime,proto3" json:"received_time,omitempty"`
	OutChannel   *string                                         `protobuf:"bytes,5,opt,name=out_channel,json=outChannel,proto3,oneof" json:"out_channel,omitempty"`
	PaymentHash  []byte                                          `protobuf:"bytes,6,opt,name=payment_hash,json=paymentHash,proto3,oneof" json:"payment_hash,omitempty"`
	Style        *ListforwardsForwards_ListforwardsForwardsStyle `protobuf:"varint,9,opt,name=style,proto3,enum=cln.ListforwardsForwards_ListforwardsForwardsStyle,oneof" json:"style,omitempty"`
	FeeMsat      *Amount                                         `protobuf:"bytes,7,opt,name=fee_msat,json=feeMsat,proto3,oneof" json:"fee_msat,omitempty"`
	OutMsat      *Amount                                         `protobuf:"bytes,8,opt,name=out_msat,json=outMsat,proto3,oneof" json:"out_msat,omitempty"`
}

func (x *ListforwardsForwards) Reset() {
	*x = ListforwardsForwards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListforwardsForwards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListforwardsForwards) ProtoMessage() {}

func (x *ListforwardsForwards) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListforwardsForwards.ProtoReflect.Descriptor instead.
func (*ListforwardsForwards) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{114}
}

func (x *ListforwardsForwards) GetInChannel() string {
	if x != nil {
		return x.InChannel
	}
	return ""
}

func (x *ListforwardsForwards) GetInMsat() *Amount {
	if x != nil {
		return x.InMsat
	}
	return nil
}

func (x *ListforwardsForwards) GetStatus() ListforwardsForwards_ListforwardsForwardsStatus {
	if x != nil {
		return x.Status
	}
	return ListforwardsForwards_OFFERED
}

func (x *ListforwardsForwards) GetReceivedTime() float64 {
	if x != nil {
		return x.ReceivedTime
	}
	return 0
}

func (x *ListforwardsForwards) GetOutChannel() string {
	if x != nil && x.OutChannel != nil {
		return *x.OutChannel
	}
	return ""
}

func (x *ListforwardsForwards) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListforwardsForwards) GetStyle() ListforwardsForwards_ListforwardsForwardsStyle {
	if x != nil && x.Style != nil {
		return *x.Style
	}
	return ListforwardsForwards_LEGACY
}

func (x *ListforwardsForwards) GetFeeMsat() *Amount {
	if x != nil {
		return x.FeeMsat
	}
	return nil
}

func (x *ListforwardsForwards) GetOutMsat() *Amount {
	if x != nil {
		return x.OutMsat
	}
	return nil
}

type ListpaysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bolt11      *string                         `protobuf:"bytes,1,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	PaymentHash []byte                          `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3,oneof" json:"payment_hash,omitempty"`
	Status      *ListpaysRequest_ListpaysStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cln.ListpaysRequest_ListpaysStatus,oneof" json:"status,omitempty"`
}

func (x *ListpaysRequest) Reset() {
	*x = ListpaysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpaysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpaysRequest) ProtoMessage() {}

func (x *ListpaysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpaysRequest.ProtoReflect.Descriptor instead.
func (*ListpaysRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{115}
}

func (x *ListpaysRequest) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *ListpaysRequest) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListpaysRequest) GetStatus() ListpaysRequest_ListpaysStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ListpaysRequest_PENDING
}

type ListpaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pays []*ListpaysPays `protobuf:"bytes,1,rep,name=pays,proto3" json:"pays,omitempty"`
}

func (x *ListpaysResponse) Reset() {
	*x = ListpaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpaysResponse) ProtoMessage() {}

func (x *ListpaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpaysResponse.ProtoReflect.Descriptor instead.
func (*ListpaysResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{116}
}

func (x *ListpaysResponse) GetPays() []*ListpaysPays {
	if x != nil {
		return x.Pays
	}
	return nil
}

type ListpaysPays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentHash    []byte                          `protobuf:"bytes,1,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash,omitempty"`
	Status         ListpaysPays_ListpaysPaysStatus `protobuf:"varint,2,opt,name=status,proto3,enum=cln.ListpaysPays_ListpaysPaysStatus" json:"status,omitempty"`
	Destination    []byte                          `protobuf:"bytes,3,opt,name=destination,proto3,oneof" json:"destination,omitempty"`
	CreatedAt      uint64                          `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Label          *string                         `protobuf:"bytes,5,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Bolt11         *string                         `protobuf:"bytes,6,opt,name=bolt11,proto3,oneof" json:"bolt11,omitempty"`
	Bolt12         *string                         `protobuf:"bytes,7,opt,name=bolt12,proto3,oneof" json:"bolt12,omitempty"`
	AmountMsat     *Amount                         `protobuf:"bytes,8,opt,name=amount_msat,json=amountMsat,proto3,oneof" json:"amount_msat,omitempty"`
	AmountSentMsat *Amount                         `protobuf:"bytes,9,opt,name=amount_sent_msat,json=amountSentMsat,proto3,oneof" json:"amount_sent_msat,omitempty"`
	Erroronion     []byte                          `protobuf:"bytes,10,opt,name=erroronion,proto3,oneof" json:"erroronion,omitempty"`
}

func (x *ListpaysPays) Reset() {
	*x = ListpaysPays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListpaysPays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListpaysPays) ProtoMessage() {}

func (x *ListpaysPays) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListpaysPays.ProtoReflect.Descriptor instead.
func (*ListpaysPays) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{117}
}

func (x *ListpaysPays) GetPaymentHash() []byte {
	if x != nil {
		return x.PaymentHash
	}
	return nil
}

func (x *ListpaysPays) GetStatus() ListpaysPays_ListpaysPaysStatus {
	if x != nil {
		return x.Status
	}
	return ListpaysPays_PENDING
}

func (x *ListpaysPays) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *ListpaysPays) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ListpaysPays) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ListpaysPays) GetBolt11() string {
	if x != nil && x.Bolt11 != nil {
		return *x.Bolt11
	}
	return ""
}

func (x *ListpaysPays) GetBolt12() string {
	if x != nil && x.Bolt12 != nil {
		return *x.Bolt12
	}
	return ""
}

func (x *ListpaysPays) GetAmountMsat() *Amount {
	if x != nil {
		return x.AmountMsat
	}
	return nil
}

func (x *ListpaysPays) GetAmountSentMsat() *Amount {
	if x != nil {
		return x.AmountSentMsat
	}
	return nil
}

func (x *ListpaysPays) GetErroronion() []byte {
	if x != nil {
		return x.Erroronion
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Len       *float64 `protobuf:"fixed64,2,opt,name=len,proto3,oneof" json:"len,omitempty"`
	Pongbytes *float64 `protobuf:"fixed64,3,opt,name=pongbytes,proto3,oneof" json:"pongbytes,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{118}
}

func (x *PingRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PingRequest) GetLen() float64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *PingRequest) GetPongbytes() float64 {
	if x != nil && x.Pongbytes != nil {
		return *x.Pongbytes
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Totlen uint32 `protobuf:"varint,1,opt,name=totlen,proto3" json:"totlen,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{119}
}

func (x *PingResponse) GetTotlen() uint32 {
	if x != nil {
		return x.Totlen
	}
	return 0
}

type SignmessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SignmessageRequest) Reset() {
	*x = SignmessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignmessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignmessageRequest) ProtoMessage() {}

func (x *SignmessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignmessageRequest.ProtoReflect.Descriptor instead.
func (*SignmessageRequest) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{120}
}

func (x *SignmessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SignmessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Recid     []byte `protobuf:"bytes,2,opt,name=recid,proto3" json:"recid,omitempty"`
	Zbase     string `protobuf:"bytes,3,opt,name=zbase,proto3" json:"zbase,omitempty"`
}

func (x *SignmessageResponse) Reset() {
	*x = SignmessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignmessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignmessageResponse) ProtoMessage() {}

func (x *SignmessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignmessageResponse.ProtoReflect.Descriptor instead.
func (*SignmessageResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{121}
}

func (x *SignmessageResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignmessageResponse) GetRecid() []byte {
	if x != nil {
		return x.Recid
	}
	return nil
}

func (x *SignmessageResponse) GetZbase() string {
	if x != nil {
		return x.Zbase
	}
	return ""
}

var File_node_proto protoreflect.FileDescriptor

var file_node_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x63, 0x6c,
	0x6e, 0x1a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc2, 0x05, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6e, 0x75, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x13, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x11, 0x66,
	0x65, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2d, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x37,
	0x0a, 0x15, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x13, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64,
	0x53, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x15, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x64, 0x53, 0x79, 0x6e,
	0x63, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x71, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x4f, 0x75, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xec, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x4f, 0x52, 0x56, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x56, 0x33, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9c, 0x02, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x43, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x69, 0x6e, 0x66, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x56, 0x32, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x56, 0x33, 0x10, 0x04, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x53, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0x3e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x22, 0xe9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f,
	0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb4, 0x03, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4c,
	0x6f, 0x67, 0x12, 0x49, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x22, 0x69, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x55,
	0x53, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4f, 0x5f, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4f, 0x5f, 0x4f, 0x55, 0x54,
	0x10, 0x06, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x67, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xe9, 0x1a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x4d,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0c, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x54, 0x78,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x75,
	0x74, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x46, 0x65, 0x65, 0x53, 0x74, 0x65, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0b, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x64, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x0c, 0x52, 0x08, 0x74, 0x6f, 0x55, 0x73, 0x4d, 0x73, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x54, 0x6f, 0x55, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x0e, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x55, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x0f, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x73, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x10, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x66, 0x65, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x69,
	0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11,
	0x52, 0x19, 0x66, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x0f, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x12, 0x52, 0x0d, 0x64, 0x75, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x13, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x12, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x14, 0x52, 0x10, 0x74, 0x68, 0x65, 0x69, 0x72,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x10, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x15, 0x52, 0x0e, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x16, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x73, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x17, 0x52, 0x0e, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x69,
	0x6e, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x18, 0x52, 0x11, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x48, 0x74, 0x6c, 0x63, 0x49, 0x6e, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x74, 0x6c,
	0x63, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x19, 0x52,
	0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x74, 0x6c, 0x63, 0x4f, 0x75, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x1a, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x74, 0x6c,
	0x63, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1b, 0x52, 0x10, 0x74, 0x68, 0x65, 0x69,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x11, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1c, 0x52, 0x0e, 0x6f, 0x75,
	0x72, 0x54, 0x6f, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x74, 0x6c, 0x63, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1d, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x48, 0x74, 0x6c, 0x63, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x25, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x48, 0x1e, 0x52, 0x11, 0x69, 0x6e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x1f, 0x52, 0x0d, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x15, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x48, 0x20, 0x52, 0x13, 0x69, 0x6e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x21, 0x52, 0x0f, 0x69, 0x6e,
	0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x22,
	0x52, 0x12, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x23,
	0x52, 0x0e, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x24, 0x52, 0x14, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x25, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x46, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x05, 0x68, 0x74, 0x6c, 0x63, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x74, 0x6c, 0x63, 0x73, 0x52,
	0x05, 0x68, 0x74, 0x6c, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x26, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x22,
	0xa1, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x48, 0x55,
	0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e,
	0x47, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x4e, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x55, 0x41, 0x4c, 0x4f, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x55, 0x41, 0x4c, 0x4f, 0x50, 0x45, 0x4e,
	0x44, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x49,
	0x4e, 0x10, 0x0a, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x78, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x78, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x6f, 0x5f, 0x75,
	0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x66, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x64, 0x75, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x68, 0x74, 0x6c, 0x63, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x74, 0x6c, 0x63,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68,
	0x74, 0x6c, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x75, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x74, 0x6c, 0x63,
	0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75,
	0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x5f, 0x66,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x66,
	0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x22,
	0x4b, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x65, 0x72, 0x6b, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x62, 0x22, 0x99, 0x02, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75,
	0x74, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x35,
	0x0a, 0x10, 0x6f, 0x75, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x63, 0x72,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x78, 0x69, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73,
	0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x73, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x73,
	0x61, 0x74, 0x22, 0x98, 0x03, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x74, 0x6c,
	0x63, 0x73, 0x12, 0x63, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x48, 0x74, 0x6c, 0x63, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x48, 0x74,
	0x6c, 0x63, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x37, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x48, 0x74, 0x6c, 0x63, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x6d,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x22, 0xb7, 0x03, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x22, 0x43, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0f, 0x6f, 0x75, 0x72,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0d, 0x6f, 0x75, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x78, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x22, 0xb0, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61,
	0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x6d,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x73,
	0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x22, 0xb4, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x35, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x07, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x70,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x77, 0x0a, 0x0c, 0x53,
	0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6d,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6d, 0x73, 0x61, 0x74,
	0x6f, 0x73, 0x68, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xe2,
	0x04, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x11, 0x68, 0x74,
	0x6c, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0f, 0x68, 0x74, 0x6c, 0x63, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x11, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x68,
	0x74, 0x6c, 0x63, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0xa3, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x75, 0x62, 0x6b,
	0x65, 0x79, 0x22, 0x9e, 0x03, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x11, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x11, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x14, 0x66, 0x65, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x66,
	0x65, 0x65, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x0c, 0x77,
	0x72, 0x6f, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x10, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x66, 0x65, 0x65, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x77,
	0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02,
	0x74, 0x78, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x88, 0x01, 0x01, 0x22, 0x35,
	0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x55, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x4c, 0x41,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x4f, 0x50, 0x45,
	0x4e, 0x45, 0x44, 0x10, 0x02, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x78, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x78, 0x69, 0x64, 0x22, 0x64, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x23, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x55, 0x54, 0x10, 0x01, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x22, 0x50, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x4f, 0x52, 0x56, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52,
	0x56, 0x33, 0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x66, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x93, 0x06, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x14, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x04, 0x52, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x07, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01, 0x22, 0x38, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x50, 0x41, 0x49, 0x44,
	0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x68, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x02, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x22, 0x70, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x55, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44,
	0x10, 0x04, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x68, 0x65, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01,
	0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x68, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x68, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x68, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xc5, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x6e,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x52, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x5b, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa3,
	0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x68, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x68,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x68, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x57, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x78, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x6f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x22, 0x35, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xa0, 0x04, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x22, 0x35, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x4e, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74,
	0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x22,
	0x9b, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4f, 0x72, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x63, 0x6c, 0x74, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x04, 0x63, 0x6c, 0x74, 0x76, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63,
	0x68, 0x61, 0x73, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x68, 0x61, 0x73, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x73, 0x65, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6c, 0x74, 0x76, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x68, 0x61, 0x73, 0x68, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0xea, 0x03,
	0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x65, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x14, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x70, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0a, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x70, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x65, 0x6e, 0x64, 0x73, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x70, 0x70, 0x22, 0x28, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x68, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x03, 0x68, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x68, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xd1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x76,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x22, 0xb4, 0x06, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x08, 0x70, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x14, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x07, 0x52, 0x12, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x06,
	0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x3f, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x50, 0x41, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x10, 0x53,
	0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31,
	0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x05, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31,
	0x31, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x22, 0x91, 0x05, 0x0a, 0x11,
	0x53, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x6f,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a,
	0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74,
	0x4d, 0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06,
	0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x06, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x2c, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d,
	0x73, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c,
	0x74, 0x31, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x68, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x22, 0x3b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64,
	0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xc5, 0x05, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64,
	0x70, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79,
	0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65,
	0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0b,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01,
	0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x43, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65,
	0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x1c, 0x4c, 0x69,
	0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x61, 0x77, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72,
	0x61, 0x77, 0x74, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xae, 0x04, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x48, 0x45, 0x49, 0x52, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53,
	0x57, 0x45, 0x45, 0x50, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x07,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x54, 0x4c, 0x43,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x4c, 0x41,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x41, 0x54, 0x10, 0x0a, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xc7, 0x04, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x04, 0x6d, 0x73, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x72, 0x0a, 0x09, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x97, 0x02,
	0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x48, 0x45,
	0x49, 0x52, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x4c, 0x41,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x57, 0x45, 0x45, 0x50, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x54, 0x4c, 0x43,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x54, 0x4c, 0x43, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x50, 0x45, 0x4e, 0x41, 0x4c, 0x54, 0x59, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x43, 0x48, 0x45, 0x41, 0x54, 0x10, 0x0a, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xe5, 0x03, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x73, 0x61, 0x74,
	0x6f, 0x73, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f,
	0x73, 0x68, 0x69, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x66, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x66, 0x65, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x06, 0x52, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x6f, 0x73, 0x68, 0x69, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x69, 0x73, 0x6b, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x66, 0x65, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x64, 0x22, 0xf6, 0x03, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61,
	0x74, 0x12, 0x35, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x41, 0x0a, 0x1a, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x18,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x32, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x22, 0x3e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x03, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0x90, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x22, 0x5f, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x52, 0x56, 0x32, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x4f, 0x52, 0x56, 0x33, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x53,
	0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x05, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x7e, 0x0a, 0x15, 0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x70, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x22, 0x9a, 0x05, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x14, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x12,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x73,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x22, 0x2d, 0x0a, 0x14, 0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x2a, 0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8e, 0x05, 0x0a,
	0x13, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x14, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x04, 0x52, 0x12,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x73,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52,
	0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x22, 0x2a, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x79, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x01,
	0x0a, 0x12, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x64, 0x22, 0x8c, 0x05, 0x0a, 0x13, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65,
	0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65,
	0x6e, 0x64, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x10,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x62,
	0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74,
	0x31, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74,
	0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x07, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0x21, 0x0a, 0x11, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65, 0x6e,
	0x64, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f,
	0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x22, 0x3a, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x45, 0x43, 0x48, 0x33, 0x32, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x32, 0x53, 0x48,
	0x5f, 0x53, 0x45, 0x47, 0x57, 0x49, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x6f, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x32, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x67, 0x77, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x70, 0x32, 0x73, 0x68, 0x53,
	0x65, 0x67, 0x77, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x65, 0x63,
	0x68, 0x33, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x32, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x67,
	0x77, 0x69, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x61, 0x74,
	0x6f, 0x73, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x65,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x48, 0x01, 0x52, 0x07, 0x66, 0x65, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x65, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x22,
	0x4a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74, 0x22, 0xa1, 0x03, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x6d, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x66, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x66, 0x65, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x04, 0x52, 0x09, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x05, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x66, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x78, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x66, 0x65, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0xed, 0x03, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x10, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x73,
	0x61, 0x74, 0x12, 0x41, 0x0a, 0x1a, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x18, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x1d, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x12, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x74,
	0x6c, 0x76, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x12, 0x26,
	0x0a, 0x07, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b,
	0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x46,
	0x75, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x73, 0x62, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2c, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x28, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x75,
	0x74, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x46, 0x75, 0x6e,
	0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x77, 0x61, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x6f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x50, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x73,
	0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x41,
	0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x73, 0x62, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x6c,
	0x79, 0x22, 0x33, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x50, 0x73, 0x62, 0x74, 0x22, 0xc2, 0x03, 0x0a, 0x0f, 0x55, 0x74, 0x78, 0x6f, 0x70,
	0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x61,
	0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68,
	0x69, 0x12, 0x26, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x07, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x75,
	0x74, 0x78, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6f, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6f,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x6f, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x10,
	0x55, 0x74, 0x78, 0x6f, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x73, 0x62, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x65,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x2c, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x61, 0x74, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x6e, 0x75, 0x6d, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x55, 0x74,
	0x78, 0x6f, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x77, 0x61, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x6f,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x26, 0x0a, 0x10, 0x54, 0x78, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x11, 0x54, 0x78, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x10, 0x54, 0x78, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x65, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46,
	0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x65, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x22, 0x5c, 0x0a, 0x11, 0x54, 0x78, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x23,
	0x0a, 0x0d, 0x54, 0x78, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x54, 0x78, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x73, 0x62, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x73, 0x62, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x48, 0x0a,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a,
	0x0f, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x46, 0x65,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x45, 0x52, 0x4b, 0x42, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x45, 0x52, 0x4b, 0x57, 0x10,
	0x01, 0x22, 0x6e, 0x0a, 0x10, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x16, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x22, 0xae, 0x03, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x6b, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x68, 0x74,
	0x6c, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d,
	0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x22, 0xae, 0x03, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x6b, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x75, 0x61,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x6e, 0x69,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x68,
	0x74, 0x6c, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x22, 0xb1, 0x02, 0x0a, 0x1d, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73,
	0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x6d, 0x75, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x75, 0x6e, 0x69, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x68, 0x74, 0x6c, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x61, 0x74, 0x6f, 0x73,
	0x68, 0x69, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x74, 0x6c, 0x63, 0x5f, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x68, 0x74, 0x6c, 0x63, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x6d,
	0x73, 0x61, 0x74, 0x6f, 0x73, 0x68, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6d, 0x73, 0x61, 0x74,
	0x6f, 0x73, 0x68, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6c, 0x74, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6c, 0x74, 0x76, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x06, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x66, 0x75,
	0x7a, 0x7a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x68, 0x6f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6c, 0x74, 0x76, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x69, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x75, 0x7a, 0x7a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x61, 0x78, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x3c, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x22, 0x1d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4c, 0x56,
	0x10, 0x00, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0a, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x22, 0x4c,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x24, 0x0a,
	0x07, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x4d,
	0x73, 0x61, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x48, 0x02, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x07, 0x66, 0x65, 0x65, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x04, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x22, 0x54,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54,
	0x54, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x22, 0x30, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x4c, 0x56, 0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70,
	0x61, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x37, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61,
	0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x39, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61,
	0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x73, 0x52, 0x04, 0x70, 0x61, 0x79,
	0x73, 0x22, 0xbf, 0x04, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x50, 0x61,
	0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x70, 0x61, 0x79, 0x73, 0x50, 0x61, 0x79, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79,
	0x73, 0x50, 0x61, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x06, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x0b, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x04, 0x52, 0x0a, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x73, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x05, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x06, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x22, 0x3b, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x50, 0x61,
	0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f,
	0x6c, 0x74, 0x31, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x6c, 0x74, 0x31, 0x32, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x73, 0x61, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x6d, 0x73, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x6f, 0x6e,
	0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x6f, 0x6e,
	0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x09,
	0x70, 0x6f, 0x6e, 0x67, 0x62, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x6c, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x6c, 0x65, 0x6e, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x13, 0x53, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x72, 0x65, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x7a, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x62, 0x61, 0x73, 0x65, 0x32, 0xfd, 0x15, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x65, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x61, 0x79, 0x12, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x47, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x67, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x30, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x11, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x19,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x6f, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x6f,
	0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x73, 0x12, 0x18,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x03, 0x50, 0x61, 0x79, 0x12,
	0x0f, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x57, 0x61, 0x69, 0x74, 0x41, 0x6e, 0x79, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x61,
	0x6e, 0x79, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x61, 0x6e, 0x79, 0x69, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x17,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x61, 0x79, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65, 0x6e,
	0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x73, 0x65, 0x6e, 0x64, 0x70, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x61, 0x64, 0x64, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4e, 0x65,
	0x77, 0x61, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x14, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x50, 0x73, 0x62, 0x74, 0x12, 0x14,
	0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x64, 0x70,
	0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x08, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x73, 0x62, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e,
	0x50, 0x73, 0x62, 0x74, 0x12, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x70,
	0x73, 0x62, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x6e,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x55, 0x74, 0x78, 0x6f, 0x50, 0x73, 0x62, 0x74, 0x12,
	0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x70, 0x73, 0x62, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x70, 0x73, 0x62, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x09, 0x54, 0x78, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x63, 0x6c,
	0x6e, 0x2e, 0x54, 0x78, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x54, 0x78, 0x64, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09,
	0x54, 0x78, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x54, 0x78, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x54, 0x78, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x54, 0x78,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x54, 0x78, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x54,
	0x78, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x63,
	0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x63, 0x6c, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x6c, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x70, 0x61, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x63, 0x6c, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x29, 0x5a, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x69, 0x74, 0x7a, 0x2d,
	0x62, 0x65, 0x2f, 0x63, 0x6c, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x63,
	0x6c, 0x6e, 0x3b, 0x63, 0x6c, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData = file_node_proto_rawDesc
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_proto_rawDescData)
	})
	return file_node_proto_rawDescData
}

var file_node_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 122)
var file_node_proto_goTypes = []interface{}{
	(GetinfoAddress_GetinfoAddressType)(0),                                           // 0: cln.GetinfoAddress.GetinfoAddressType
	(GetinfoBinding_GetinfoBindingType)(0),                                           // 1: cln.GetinfoBinding.GetinfoBindingType
	(ListpeersPeersLog_ListpeersPeersLogType)(0),                                     // 2: cln.ListpeersPeersLog.ListpeersPeersLogType
	(ListpeersPeersChannels_ListpeersPeersChannelsState)(0),                          // 3: cln.ListpeersPeersChannels.ListpeersPeersChannelsState
	(ListpeersPeersChannelsHtlcs_ListpeersPeersChannelsHtlcsDirection)(0),            // 4: cln.ListpeersPeersChannelsHtlcs.ListpeersPeersChannelsHtlcsDirection
	(ListfundsOutputs_ListfundsOutputsStatus)(0),                                     // 5: cln.ListfundsOutputs.ListfundsOutputsStatus
	(SendpayResponse_SendpayStatus)(0),                                               // 6: cln.SendpayResponse.SendpayStatus
	(CloseResponse_CloseType)(0),                                                     // 7: cln.CloseResponse.CloseType
	(ConnectResponse_ConnectDirection)(0),                                            // 8: cln.ConnectResponse.ConnectDirection
	(ConnectAddress_ConnectAddressType)(0),                                           // 9: cln.ConnectAddress.ConnectAddressType
	(CreateinvoiceResponse_CreateinvoiceStatus)(0),                                   // 10: cln.CreateinvoiceResponse.CreateinvoiceStatus
	(DatastoreRequest_DatastoreMode)(0),                                              // 11: cln.DatastoreRequest.DatastoreMode
	(DelinvoiceRequest_DelinvoiceStatus)(0),                                          // 12: cln.DelinvoiceRequest.DelinvoiceStatus
	(DelinvoiceResponse_DelinvoiceStatus)(0),                                         // 13: cln.DelinvoiceResponse.DelinvoiceStatus
	(ListinvoicesInvoices_ListinvoicesInvoicesStatus)(0),                             // 14: cln.ListinvoicesInvoices.ListinvoicesInvoicesStatus
	(SendonionResponse_SendonionStatus)(0),                                           // 15: cln.SendonionResponse.SendonionStatus
	(ListsendpaysRequest_ListsendpaysStatus)(0),                                      // 16: cln.ListsendpaysRequest.ListsendpaysStatus
	(ListsendpaysPayments_ListsendpaysPaymentsStatus)(0),                             // 17: cln.ListsendpaysPayments.ListsendpaysPaymentsStatus
	(ListtransactionsTransactionsInputs_ListtransactionsTransactionsInputsType)(0),   // 18: cln.ListtransactionsTransactionsInputs.ListtransactionsTransactionsInputsType
	(ListtransactionsTransactionsOutputs_ListtransactionsTransactionsOutputsType)(0), // 19: cln.ListtransactionsTransactionsOutputs.ListtransactionsTransactionsOutputsType
	(PayResponse_PayStatus)(0),                                                       // 20: cln.PayResponse.PayStatus
	(ListnodesNodesAddresses_ListnodesNodesAddressesType)(0),                         // 21: cln.ListnodesNodesAddresses.ListnodesNodesAddressesType
	(WaitanyinvoiceResponse_WaitanyinvoiceStatus)(0),                                 // 22: cln.WaitanyinvoiceResponse.WaitanyinvoiceStatus
	(WaitinvoiceResponse_WaitinvoiceStatus)(0),                                       // 23: cln.WaitinvoiceResponse.WaitinvoiceStatus
	(WaitsendpayResponse_WaitsendpayStatus)(0),                                       // 24: cln.WaitsendpayResponse.WaitsendpayStatus
	(NewaddrRequest_NewaddrAddresstype)(0),                                           // 25: cln.NewaddrRequest.NewaddrAddresstype
	(KeysendResponse_KeysendStatus)(0),                                               // 26: cln.KeysendResponse.KeysendStatus
	(FeeratesRequest_FeeratesStyle)(0),                                               // 27: cln.FeeratesRequest.FeeratesStyle
	(GetrouteRoute_GetrouteRouteStyle)(0),                                            // 28: cln.GetrouteRoute.GetrouteRouteStyle
	(ListforwardsRequest_ListforwardsStatus)(0),                                      // 29: cln.ListforwardsRequest.ListforwardsStatus
	(ListforwardsForwards_ListforwardsForwardsStatus)(0),                             // 30: cln.ListforwardsForwards.ListforwardsForwardsStatus
	(ListforwardsForwards_ListforwardsForwardsStyle)(0),                              // 31: cln.ListforwardsForwards.ListforwardsForwardsStyle
	(ListpaysRequest_ListpaysStatus)(0),                                              // 32: cln.ListpaysRequest.ListpaysStatus
	(ListpaysPays_ListpaysPaysStatus)(0),                                             // 33: cln.ListpaysPays.ListpaysPaysStatus
	(*GetinfoRequest)(nil),                                                           // 34: cln.GetinfoRequest
	(*GetinfoResponse)(nil),                                                          // 35: cln.GetinfoResponse
	(*GetinfoOurFeatures)(nil),                                                       // 36: cln.GetinfoOur_features
	(*GetinfoAddress)(nil),                                                           // 37: cln.GetinfoAddress
	(*GetinfoBinding)(nil),                                                           // 38: cln.GetinfoBinding
	(*ListpeersRequest)(nil),                                                         // 39: cln.ListpeersRequest
	(*ListpeersResponse)(nil),                                                        // 40: cln.ListpeersResponse
	(*ListpeersPeers)(nil),                                                           // 41: cln.ListpeersPeers
	(*ListpeersPeersLog)(nil),                                                        // 42: cln.ListpeersPeersLog
	(*ListpeersPeersChannels)(nil),                                                   // 43: cln.ListpeersPeersChannels
	(*ListpeersPeersChannelsFeerate)(nil),                                            // 44: cln.ListpeersPeersChannelsFeerate
	(*ListpeersPeersChannelsInflight)(nil),                                           // 45: cln.ListpeersPeersChannelsInflight
	(*ListpeersPeersChannelsFunding)(nil),                                            // 46: cln.ListpeersPeersChannelsFunding
	(*ListpeersPeersChannelsHtlcs)(nil),                                              // 47: cln.ListpeersPeersChannelsHtlcs
	(*ListfundsRequest)(nil),                                                         // 48: cln.ListfundsRequest
	(*ListfundsResponse)(nil),                                                        // 49: cln.ListfundsResponse
	(*ListfundsOutputs)(nil),                                                         // 50: cln.ListfundsOutputs
	(*ListfundsChannels)(nil),                                                        // 51: cln.ListfundsChannels
	(*SendpayRequest)(nil),                                                           // 52: cln.SendpayRequest
	(*SendpayResponse)(nil),                                                          // 53: cln.SendpayResponse
	(*SendpayRoute)(nil),                                                             // 54: cln.SendpayRoute
	(*ListchannelsRequest)(nil),                                                      // 55: cln.ListchannelsRequest
	(*ListchannelsResponse)(nil),                                                     // 56: cln.ListchannelsResponse
	(*ListchannelsChannels)(nil),                                                     // 57: cln.ListchannelsChannels
	(*AddgossipRequest)(nil),                                                         // 58: cln.AddgossipRequest
	(*AddgossipResponse)(nil),                                                        // 59: cln.AddgossipResponse
	(*AutocleaninvoiceRequest)(nil),                                                  // 60: cln.AutocleaninvoiceRequest
	(*AutocleaninvoiceResponse)(nil),                                                 // 61: cln.AutocleaninvoiceResponse
	(*CheckmessageRequest)(nil),                                                      // 62: cln.CheckmessageRequest
	(*CheckmessageResponse)(nil),                                                     // 63: cln.CheckmessageResponse
	(*CloseRequest)(nil),                                                             // 64: cln.CloseRequest
	(*CloseResponse)(nil),                                                            // 65: cln.CloseResponse
	(*ConnectRequest)(nil),                                                           // 66: cln.ConnectRequest
	(*ConnectResponse)(nil),                                                          // 67: cln.ConnectResponse
	(*ConnectAddress)(nil),                                                           // 68: cln.ConnectAddress
	(*CreateinvoiceRequest)(nil),                                                     // 69: cln.CreateinvoiceRequest
	(*CreateinvoiceResponse)(nil),                                                    // 70: cln.CreateinvoiceResponse
	(*DatastoreRequest)(nil),                                                         // 71: cln.DatastoreRequest
	(*DatastoreResponse)(nil),                                                        // 72: cln.DatastoreResponse
	(*CreateonionRequest)(nil),                                                       // 73: cln.CreateonionRequest
	(*CreateonionResponse)(nil),                                                      // 74: cln.CreateonionResponse
	(*CreateonionHops)(nil),                                                          // 75: cln.CreateonionHops
	(*DeldatastoreRequest)(nil),                                                      // 76: cln.DeldatastoreRequest
	(*DeldatastoreResponse)(nil),                                                     // 77: cln.DeldatastoreResponse
	(*DelexpiredinvoiceRequest)(nil),                                                 // 78: cln.DelexpiredinvoiceRequest
	(*DelexpiredinvoiceResponse)(nil),                                                // 79: cln.DelexpiredinvoiceResponse
	(*DelinvoiceRequest)(nil),                                                        // 80: cln.DelinvoiceRequest
	(*DelinvoiceResponse)(nil),                                                       // 81: cln.DelinvoiceResponse
	(*InvoiceRequest)(nil),                                                           // 82: cln.InvoiceRequest
	(*InvoiceResponse)(nil),                                                          // 83: cln.InvoiceResponse
	(*ListdatastoreRequest)(nil),                                                     // 84: cln.ListdatastoreRequest
	(*ListdatastoreResponse)(nil),                                                    // 85: cln.ListdatastoreResponse
	(*ListdatastoreDatastore)(nil),                                                   // 86: cln.ListdatastoreDatastore
	(*ListinvoicesRequest)(nil),                                                      // 87: cln.ListinvoicesRequest
	(*ListinvoicesResponse)(nil),                                                     // 88: cln.ListinvoicesResponse
	(*ListinvoicesInvoices)(nil),                                                     // 89: cln.ListinvoicesInvoices
	(*SendonionRequest)(nil),                                                         // 90: cln.SendonionRequest
	(*SendonionResponse)(nil),                                                        // 91: cln.SendonionResponse
	(*SendonionFirstHop)(nil),                                                        // 92: cln.SendonionFirst_hop
	(*ListsendpaysRequest)(nil),                                                      // 93: cln.ListsendpaysRequest
	(*ListsendpaysResponse)(nil),                                                     // 94: cln.ListsendpaysResponse
	(*ListsendpaysPayments)(nil),                                                     // 95: cln.ListsendpaysPayments
	(*ListtransactionsRequest)(nil),                                                  // 96: cln.ListtransactionsRequest
	(*ListtransactionsResponse)(nil),                                                 // 97: cln.ListtransactionsResponse
	(*ListtransactionsTransactions)(nil),                                             // 98: cln.ListtransactionsTransactions
	(*ListtransactionsTransactionsInputs)(nil),                                       // 99: cln.ListtransactionsTransactionsInputs
	(*ListtransactionsTransactionsOutputs)(nil),                                      // 100: cln.ListtransactionsTransactionsOutputs
	(*PayRequest)(nil),                                                               // 101: cln.PayRequest
	(*PayResponse)(nil),                                                              // 102: cln.PayResponse
	(*ListnodesRequest)(nil),                                                         // 103: cln.ListnodesRequest
	(*ListnodesResponse)(nil),                                                        // 104: cln.ListnodesResponse
	(*ListnodesNodes)(nil),                                                           // 105: cln.ListnodesNodes
	(*ListnodesNodesAddresses)(nil),                                                  // 106: cln.ListnodesNodesAddresses
	(*WaitanyinvoiceRequest)(nil),                                                    // 107: cln.WaitanyinvoiceRequest
	(*WaitanyinvoiceResponse)(nil),                                                   // 108: cln.WaitanyinvoiceResponse
	(*WaitinvoiceRequest)(nil),                                                       // 109: cln.WaitinvoiceRequest
	(*WaitinvoiceResponse)(nil),                                                      // 110: cln.WaitinvoiceResponse
	(*WaitsendpayRequest)(nil),                                                       // 111: cln.WaitsendpayRequest
	(*WaitsendpayResponse)(nil),                                                      // 112: cln.WaitsendpayResponse
	(*NewaddrRequest)(nil),                                                           // 113: cln.NewaddrRequest
	(*NewaddrResponse)(nil),                                                          // 114: cln.NewaddrResponse
	(*WithdrawRequest)(nil),                                                          // 115: cln.WithdrawRequest
	(*WithdrawResponse)(nil),                                                         // 116: cln.WithdrawResponse
	(*KeysendRequest)(nil),                                                           // 117: cln.KeysendRequest
	(*KeysendResponse)(nil),                                                          // 118: cln.KeysendResponse
	(*KeysendExtratlvs)(nil),                                                         // 119: cln.KeysendExtratlvs
	(*FundpsbtRequest)(nil),                                                          // 120: cln.FundpsbtRequest
	(*FundpsbtResponse)(nil),                                                         // 121: cln.FundpsbtResponse
	(*FundpsbtReservations)(nil),                                                     // 122: cln.FundpsbtReservations
	(*SendpsbtRequest)(nil),                                                          // 123: cln.SendpsbtRequest
	(*SendpsbtResponse)(nil),                                                         // 124: cln.SendpsbtResponse
	(*SignpsbtRequest)(nil),                                                          // 125: cln.SignpsbtRequest
	(*SignpsbtResponse)(nil),                                                         // 126: cln.SignpsbtResponse
	(*UtxopsbtRequest)(nil),                                                          // 127: cln.UtxopsbtRequest
	(*UtxopsbtResponse)(nil),                                                         // 128: cln.UtxopsbtResponse
	(*UtxopsbtReservations)(nil),                                                     // 129: cln.UtxopsbtReservations
	(*TxdiscardRequest)(nil),                                                         // 130: cln.TxdiscardRequest
	(*TxdiscardResponse)(nil),                                                        // 131: cln.TxdiscardResponse
	(*TxprepareRequest)(nil),                                                         // 132: cln.TxprepareRequest
	(*TxprepareResponse)(nil),                                                        // 133: cln.TxprepareResponse
	(*TxsendRequest)(nil),                                                            // 134: cln.TxsendRequest
	(*TxsendResponse)(nil),                                                           // 135: cln.TxsendResponse
	(*DisconnectRequest)(nil),                                                        // 136: cln.DisconnectRequest
	(*DisconnectResponse)(nil),                                                       // 137: cln.DisconnectResponse
	(*FeeratesRequest)(nil),                                                          // 138: cln.FeeratesRequest
	(*FeeratesResponse)(nil),                                                         // 139: cln.FeeratesResponse
	(*FeeratesPerkb)(nil),                                                            // 140: cln.FeeratesPerkb
	(*FeeratesPerkw)(nil),                                                            // 141: cln.FeeratesPerkw
	(*FeeratesOnchainFeeEstimates)(nil),                                              // 142: cln.FeeratesOnchain_fee_estimates
	(*GetrouteRequest)(nil),                                                          // 143: cln.GetrouteRequest
	(*GetrouteResponse)(nil),                                                         // 144: cln.GetrouteResponse
	(*GetrouteRoute)(nil),                                                            // 145: cln.GetrouteRoute
	(*ListforwardsRequest)(nil),                                                      // 146: cln.ListforwardsRequest
	(*ListforwardsResponse)(nil),                                                     // 147: cln.ListforwardsResponse
	(*ListforwardsForwards)(nil),                                                     // 148: cln.ListforwardsForwards
	(*ListpaysRequest)(nil),                                                          // 149: cln.ListpaysRequest
	(*ListpaysResponse)(nil),                                                         // 150: cln.ListpaysResponse
	(*ListpaysPays)(nil),                                                             // 151: cln.ListpaysPays
	(*PingRequest)(nil),                                                              // 152: cln.PingRequest
	(*PingResponse)(nil),                                                             // 153: cln.PingResponse
	(*SignmessageRequest)(nil),                                                       // 154: cln.SignmessageRequest
	(*SignmessageResponse)(nil),                                                      // 155: cln.SignmessageResponse
	(*Amount)(nil),                                                                   // 156: cln.Amount
	(ChannelSide)(0),                                                                 // 157: cln.ChannelSide
	(ChannelState)(0),                                                                // 158: cln.ChannelState
	(*Feerate)(nil),                                                                  // 159: cln.Feerate
	(*AmountOrAny)(nil),                                                              // 160: cln.AmountOrAny
	(*AmountOrAll)(nil),                                                              // 161: cln.AmountOrAll
	(*Outpoint)(nil),                                                                 // 162: cln.Outpoint
	(*RoutehintList)(nil),                                                            // 163: cln.RoutehintList
	(*OutputDesc)(nil),                                                               // 164: cln.OutputDesc
}
var file_node_proto_depIdxs = []int32{
	156, // 0: cln.GetinfoResponse.fees_collected_msat:type_name -> cln.Amount
	37,  // 1: cln.GetinfoResponse.address:type_name -> cln.GetinfoAddress
	38,  // 2: cln.GetinfoResponse.binding:type_name -> cln.GetinfoBinding
	0,   // 3: cln.GetinfoAddress.item_type:type_name -> cln.GetinfoAddress.GetinfoAddressType
	1,   // 4: cln.GetinfoBinding.item_type:type_name -> cln.GetinfoBinding.GetinfoBindingType
	41,  // 5: cln.ListpeersResponse.peers:type_name -> cln.ListpeersPeers
	42,  // 6: cln.ListpeersPeers.log:type_name -> cln.ListpeersPeersLog
	43,  // 7: cln.ListpeersPeers.channels:type_name -> cln.ListpeersPeersChannels
	2,   // 8: cln.ListpeersPeersLog.item_type:type_name -> cln.ListpeersPeersLog.ListpeersPeersLogType
	3,   // 9: cln.ListpeersPeersChannels.state:type_name -> cln.ListpeersPeersChannels.ListpeersPeersChannelsState
	45,  // 10: cln.ListpeersPeersChannels.inflight:type_name -> cln.ListpeersPeersChannelsInflight
	157, // 11: cln.ListpeersPeersChannels.opener:type_name -> cln.ChannelSide
	156, // 12: cln.ListpeersPeersChannels.to_us_msat:type_name -> cln.Amount
	156, // 13: cln.ListpeersPeersChannels.min_to_us_msat:type_name -> cln.Amount
	156, // 14: cln.ListpeersPeersChannels.max_to_us_msat:type_name -> cln.Amount
	156, // 15: cln.ListpeersPeersChannels.total_msat:type_name -> cln.Amount
	156, // 16: cln.ListpeersPeersChannels.fee_base_msat:type_name -> cln.Amount
	156, // 17: cln.ListpeersPeersChannels.dust_limit_msat:type_name -> cln.Amount
	156, // 18: cln.ListpeersPeersChannels.max_total_htlc_in_msat:type_name -> cln.Amount
	156, // 19: cln.ListpeersPeersChannels.their_reserve_msat:type_name -> cln.Amount
	156, // 20: cln.ListpeersPeersChannels.our_reserve_msat:type_name -> cln.Amount
	156, // 21: cln.ListpeersPeersChannels.spendable_msat:type_name -> cln.Amount
	156, // 22: cln.ListpeersPeersChannels.receivable_msat:type_name -> cln.Amount
	156, // 23: cln.ListpeersPeersChannels.minimum_htlc_in_msat:type_name -> cln.Amount
	156, // 24: cln.ListpeersPeersChannels.minimum_htlc_out_msat:type_name -> cln.Amount
	156, // 25: cln.ListpeersPeersChannels.maximum_htlc_out_msat:type_name -> cln.Amount
	156, // 26: cln.ListpeersPeersChannels.in_offered_msat:type_name -> cln.Amount
	156, // 27: cln.ListpeersPeersChannels.in_fulfilled_msat:type_name -> cln.Amount
	156, // 28: cln.ListpeersPeersChannels.out_offered_msat:type_name -> cln.Amount
	156, // 29: cln.ListpeersPeersChannels.out_fulfilled_msat:type_name -> cln.Amount
	47,  // 30: cln.ListpeersPeersChannels.htlcs:type_name -> cln.ListpeersPeersChannelsHtlcs
	156, // 31: cln.ListpeersPeersChannelsInflight.total_funding_msat:type_name -> cln.Amount
	156, // 32: cln.ListpeersPeersChannelsInflight.our_funding_msat:type_name -> cln.Amount
	156, // 33: cln.ListpeersPeersChannelsFunding.local_msat:type_name -> cln.Amount
	156, // 34: cln.ListpeersPeersChannelsFunding.remote_msat:type_name -> cln.Amount
	156, // 35: cln.ListpeersPeersChannelsFunding.pushed_msat:type_name -> cln.Amount
	4,   // 36: cln.ListpeersPeersChannelsHtlcs.direction:type_name -> cln.ListpeersPeersChannelsHtlcs.ListpeersPeersChannelsHtlcsDirection
	156, // 37: cln.ListpeersPeersChannelsHtlcs.amount_msat:type_name -> cln.Amount
	50,  // 38: cln.ListfundsResponse.outputs:type_name -> cln.ListfundsOutputs
	51,  // 39: cln.ListfundsResponse.channels:type_name -> cln.ListfundsChannels
	156, // 40: cln.ListfundsOutputs.amount_msat:type_name -> cln.Amount
	5,   // 41: cln.ListfundsOutputs.status:type_name -> cln.ListfundsOutputs.ListfundsOutputsStatus
	156, // 42: cln.ListfundsChannels.our_amount_msat:type_name -> cln.Amount
	156, // 43: cln.ListfundsChannels.amount_msat:type_name -> cln.Amount
	158, // 44: cln.ListfundsChannels.state:type_name -> cln.ChannelState
	54,  // 45: cln.SendpayRequest.route:type_name -> cln.SendpayRoute
	156, // 46: cln.SendpayRequest.msatoshi:type_name -> cln.Amount
	6,   // 47: cln.SendpayResponse.status:type_name -> cln.SendpayResponse.SendpayStatus
	156, // 48: cln.SendpayResponse.amount_msat:type_name -> cln.Amount
	156, // 49: cln.SendpayResponse.amount_sent_msat:type_name -> cln.Amount
	156, // 50: cln.SendpayRoute.msatoshi:type_name -> cln.Amount
	57,  // 51: cln.ListchannelsResponse.channels:type_name -> cln.ListchannelsChannels
	156, // 52: cln.ListchannelsChannels.amount_msat:type_name -> cln.Amount
	156, // 53: cln.ListchannelsChannels.htlc_minimum_msat:type_name -> cln.Amount
	156, // 54: cln.ListchannelsChannels.htlc_maximum_msat:type_name -> cln.Amount
	159, // 55: cln.CloseRequest.feerange:type_name -> cln.Feerate
	7,   // 56: cln.CloseResponse.item_type:type_name -> cln.CloseResponse.CloseType
	8,   // 57: cln.ConnectResponse.direction:type_name -> cln.ConnectResponse.ConnectDirection
	9,   // 58: cln.ConnectAddress.item_type:type_name -> cln.ConnectAddress.ConnectAddressType
	156, // 59: cln.CreateinvoiceResponse.amount_msat:type_name -> cln.Amount
	10,  // 60: cln.CreateinvoiceResponse.status:type_name -> cln.CreateinvoiceResponse.CreateinvoiceStatus
	156, // 61: cln.CreateinvoiceResponse.amount_received_msat:type_name -> cln.Amount
	11,  // 62: cln.DatastoreRequest.mode:type_name -> cln.DatastoreRequest.DatastoreMode
	75,  // 63: cln.CreateonionRequest.hops:type_name -> cln.CreateonionHops
	12,  // 64: cln.DelinvoiceRequest.status:type_name -> cln.DelinvoiceRequest.DelinvoiceStatus
	156, // 65: cln.DelinvoiceResponse.amount_msat:type_name -> cln.Amount
	13,  // 66: cln.DelinvoiceResponse.status:type_name -> cln.DelinvoiceResponse.DelinvoiceStatus
	160, // 67: cln.InvoiceRequest.msatoshi:type_name -> cln.AmountOrAny
	86,  // 68: cln.ListdatastoreResponse.datastore:type_name -> cln.ListdatastoreDatastore
	89,  // 69: cln.ListinvoicesResponse.invoices:type_name -> cln.ListinvoicesInvoices
	14,  // 70: cln.ListinvoicesInvoices.status:type_name -> cln.ListinvoicesInvoices.ListinvoicesInvoicesStatus
	156, // 71: cln.ListinvoicesInvoices.amount_msat:type_name -> cln.Amount
	156, // 72: cln.ListinvoicesInvoices.amount_received_msat:type_name -> cln.Amount
	156, // 73: cln.SendonionRequest.msatoshi:type_name -> cln.Amount
	15,  // 74: cln.SendonionResponse.status:type_name -> cln.SendonionResponse.SendonionStatus
	156, // 75: cln.SendonionResponse.amount_msat:type_name -> cln.Amount
	156, // 76: cln.SendonionResponse.amount_sent_msat:type_name -> cln.Amount
	156, // 77: cln.SendonionFirst_hop.amount_msat:type_name -> cln.Amount
	16,  // 78: cln.ListsendpaysRequest.status:type_name -> cln.ListsendpaysRequest.ListsendpaysStatus
	95,  // 79: cln.ListsendpaysResponse.payments:type_name -> cln.ListsendpaysPayments
	17,  // 80: cln.ListsendpaysPayments.status:type_name -> cln.ListsendpaysPayments.ListsendpaysPaymentsStatus
	156, // 81: cln.ListsendpaysPayments.amount_msat:type_name -> cln.Amount
	156, // 82: cln.ListsendpaysPayments.amount_sent_msat:type_name -> cln.Amount
	98,  // 83: cln.ListtransactionsResponse.transactions:type_name -> cln.ListtransactionsTransactions
	99,  // 84: cln.ListtransactionsTransactions.inputs:type_name -> cln.ListtransactionsTransactionsInputs
	100, // 85: cln.ListtransactionsTransactions.outputs:type_name -> cln.ListtransactionsTransactionsOutputs
	18,  // 86: cln.ListtransactionsTransactionsInputs.item_type:type_name -> cln.ListtransactionsTransactionsInputs.ListtransactionsTransactionsInputsType
	156, // 87: cln.ListtransactionsTransactionsOutputs.msat:type_name -> cln.Amount
	19,  // 88: cln.ListtransactionsTransactionsOutputs.item_type:type_name -> cln.ListtransactionsTransactionsOutputs.ListtransactionsTransactionsOutputsType
	156, // 89: cln.PayRequest.msatoshi:type_name -> cln.Amount
	156, // 90: cln.PayRequest.exemptfee:type_name -> cln.Amount
	156, // 91: cln.PayResponse.amount_msat:type_name -> cln.Amount
	156, // 92: cln.PayResponse.amount_sent_msat:type_name -> cln.Amount
	20,  // 93: cln.PayResponse.status:type_name -> cln.PayResponse.PayStatus
	105, // 94: cln.ListnodesResponse.nodes:type_name -> cln.ListnodesNodes
	106, // 95: cln.ListnodesNodes.addresses:type_name -> cln.ListnodesNodesAddresses
	21,  // 96: cln.ListnodesNodesAddresses.item_type:type_name -> cln.ListnodesNodesAddresses.ListnodesNodesAddressesType
	22,  // 97: cln.WaitanyinvoiceResponse.status:type_name -> cln.WaitanyinvoiceResponse.WaitanyinvoiceStatus
	156, // 98: cln.WaitanyinvoiceResponse.amount_msat:type_name -> cln.Amount
	156, // 99: cln.WaitanyinvoiceResponse.amount_received_msat:type_name -> cln.Amount
	23,  // 100: cln.WaitinvoiceResponse.status:type_name -> cln.WaitinvoiceResponse.WaitinvoiceStatus
	156, // 101: cln.WaitinvoiceResponse.amount_msat:type_name -> cln.Amount
	156, // 102: cln.WaitinvoiceResponse.amount_received_msat:type_name -> cln.Amount
	24,  // 103: cln.WaitsendpayResponse.status:type_name -> cln.WaitsendpayResponse.WaitsendpayStatus
	156, // 104: cln.WaitsendpayResponse.amount_msat:type_name -> cln.Amount
	156, // 105: cln.WaitsendpayResponse.amount_sent_msat:type_name -> cln.Amount
	25,  // 106: cln.NewaddrRequest.addresstype:type_name -> cln.NewaddrRequest.NewaddrAddresstype
	161, // 107: cln.WithdrawRequest.satoshi:type_name -> cln.AmountOrAll
	159, // 108: cln.WithdrawRequest.feerate:type_name -> cln.Feerate
	162, // 109: cln.WithdrawRequest.utxos:type_name -> cln.Outpoint
	156, // 110: cln.KeysendRequest.msatoshi:type_name -> cln.Amount
	156, // 111: cln.KeysendRequest.exemptfee:type_name -> cln.Amount
	163, // 112: cln.KeysendRequest.routehints:type_name -> cln.RoutehintList
	156, // 113: cln.KeysendResponse.amount_msat:type_name -> cln.Amount
	156, // 114: cln.KeysendResponse.amount_sent_msat:type_name -> cln.Amount
	26,  // 115: cln.KeysendResponse.status:type_name -> cln.KeysendResponse.KeysendStatus
	156, // 116: cln.FundpsbtRequest.satoshi:type_name -> cln.Amount
	159, // 117: cln.FundpsbtRequest.feerate:type_name -> cln.Feerate
	156, // 118: cln.FundpsbtResponse.excess_msat:type_name -> cln.Amount
	122, // 119: cln.FundpsbtResponse.reservations:type_name -> cln.FundpsbtReservations
	156, // 120: cln.UtxopsbtRequest.satoshi:type_name -> cln.Amount
	159, // 121: cln.UtxopsbtRequest.feerate:type_name -> cln.Feerate
	162, // 122: cln.UtxopsbtRequest.utxos:type_name -> cln.Outpoint
	156, // 123: cln.UtxopsbtResponse.excess_msat:type_name -> cln.Amount
	129, // 124: cln.UtxopsbtResponse.reservations:type_name -> cln.UtxopsbtReservations
	164, // 125: cln.TxprepareRequest.outputs:type_name -> cln.OutputDesc
	159, // 126: cln.TxprepareRequest.feerate:type_name -> cln.Feerate
	162, // 127: cln.TxprepareRequest.utxos:type_name -> cln.Outpoint
	27,  // 128: cln.FeeratesRequest.style:type_name -> cln.FeeratesRequest.FeeratesStyle
	156, // 129: cln.GetrouteRequest.msatoshi:type_name -> cln.Amount
	145, // 130: cln.GetrouteResponse.route:type_name -> cln.GetrouteRoute
	156, // 131: cln.GetrouteRoute.amount_msat:type_name -> cln.Amount
	28,  // 132: cln.GetrouteRoute.style:type_name -> cln.GetrouteRoute.GetrouteRouteStyle
	29,  // 133: cln.ListforwardsRequest.status:type_name -> cln.ListforwardsRequest.ListforwardsStatus
	148, // 134: cln.ListforwardsResponse.forwards:type_name -> cln.ListforwardsForwards
	156, // 135: cln.ListforwardsForwards.in_msat:type_name -> cln.Amount
	30,  // 136: cln.ListforwardsForwards.status:type_name -> cln.ListforwardsForwards.ListforwardsForwardsStatus
	31,  // 137: cln.ListforwardsForwards.style:type_name -> cln.ListforwardsForwards.ListforwardsForwardsStyle
	156, // 138: cln.ListforwardsForwards.fee_msat:type_name -> cln.Amount
	156, // 139: cln.ListforwardsForwards.out_msat:type_name -> cln.Amount
	32,  // 140: cln.ListpaysRequest.status:type_name -> cln.ListpaysRequest.ListpaysStatus
	151, // 141: cln.ListpaysResponse.pays:type_name -> cln.ListpaysPays
	33,  // 142: cln.ListpaysPays.status:type_name -> cln.ListpaysPays.ListpaysPaysStatus
	156, // 143: cln.ListpaysPays.amount_msat:type_name -> cln.Amount
	156, // 144: cln.ListpaysPays.amount_sent_msat:type_name -> cln.Amount
	34,  // 145: cln.Node.Getinfo:input_type -> cln.GetinfoRequest
	39,  // 146: cln.Node.ListPeers:input_type -> cln.ListpeersRequest
	48,  // 147: cln.Node.ListFunds:input_type -> cln.ListfundsRequest
	52,  // 148: cln.Node.SendPay:input_type -> cln.SendpayRequest
	55,  // 149: cln.Node.ListChannels:input_type -> cln.ListchannelsRequest
	58,  // 150: cln.Node.AddGossip:input_type -> cln.AddgossipRequest
	60,  // 151: cln.Node.AutoCleanInvoice:input_type -> cln.AutocleaninvoiceRequest
	62,  // 152: cln.Node.CheckMessage:input_type -> cln.CheckmessageRequest
	64,  // 153: cln.Node.Close:input_type -> cln.CloseRequest
	66,  // 154: cln.Node.ConnectPeer:input_type -> cln.ConnectRequest
	69,  // 155: cln.Node.CreateInvoice:input_type -> cln.CreateinvoiceRequest
	71,  // 156: cln.Node.Datastore:input_type -> cln.DatastoreRequest
	73,  // 157: cln.Node.CreateOnion:input_type -> cln.CreateonionRequest
	76,  // 158: cln.Node.DelDatastore:input_type -> cln.DeldatastoreRequest
	78,  // 159: cln.Node.DelExpiredInvoice:input_type -> cln.DelexpiredinvoiceRequest
	80,  // 160: cln.Node.DelInvoice:input_type -> cln.DelinvoiceRequest
	82,  // 161: cln.Node.Invoice:input_type -> cln.InvoiceRequest
	84,  // 162: cln.Node.ListDatastore:input_type -> cln.ListdatastoreRequest
	87,  // 163: cln.Node.ListInvoices:input_type -> cln.ListinvoicesRequest
	90,  // 164: cln.Node.SendOnion:input_type -> cln.SendonionRequest
	93,  // 165: cln.Node.ListSendPays:input_type -> cln.ListsendpaysRequest
	96,  // 166: cln.Node.ListTransactions:input_type -> cln.ListtransactionsRequest
	101, // 167: cln.Node.Pay:input_type -> cln.PayRequest
	103, // 168: cln.Node.ListNodes:input_type -> cln.ListnodesRequest
	107, // 169: cln.Node.WaitAnyInvoice:input_type -> cln.WaitanyinvoiceRequest
	109, // 170: cln.Node.WaitInvoice:input_type -> cln.WaitinvoiceRequest
	111, // 171: cln.Node.WaitSendPay:input_type -> cln.WaitsendpayRequest
	113, // 172: cln.Node.NewAddr:input_type -> cln.NewaddrRequest
	115, // 173: cln.Node.Withdraw:input_type -> cln.WithdrawRequest
	117, // 174: cln.Node.KeySend:input_type -> cln.KeysendRequest
	120, // 175: cln.Node.FundPsbt:input_type -> cln.FundpsbtRequest
	123, // 176: cln.Node.SendPsbt:input_type -> cln.SendpsbtRequest
	125, // 177: cln.Node.SignPsbt:input_type -> cln.SignpsbtRequest
	127, // 178: cln.Node.UtxoPsbt:input_type -> cln.UtxopsbtRequest
	130, // 179: cln.Node.TxDiscard:input_type -> cln.TxdiscardRequest
	132, // 180: cln.Node.TxPrepare:input_type -> cln.TxprepareRequest
	134, // 181: cln.Node.TxSend:input_type -> cln.TxsendRequest
	136, // 182: cln.Node.Disconnect:input_type -> cln.DisconnectRequest
	138, // 183: cln.Node.Feerates:input_type -> cln.FeeratesRequest
	143, // 184: cln.Node.GetRoute:input_type -> cln.GetrouteRequest
	146, // 185: cln.Node.ListForwards:input_type -> cln.ListforwardsRequest
	149, // 186: cln.Node.ListPays:input_type -> cln.ListpaysRequest
	152, // 187: cln.Node.Ping:input_type -> cln.PingRequest
	154, // 188: cln.Node.SignMessage:input_type -> cln.SignmessageRequest
	35,  // 189: cln.Node.Getinfo:output_type -> cln.GetinfoResponse
	40,  // 190: cln.Node.ListPeers:output_type -> cln.ListpeersResponse
	49,  // 191: cln.Node.ListFunds:output_type -> cln.ListfundsResponse
	53,  // 192: cln.Node.SendPay:output_type -> cln.SendpayResponse
	56,  // 193: cln.Node.ListChannels:output_type -> cln.ListchannelsResponse
	59,  // 194: cln.Node.AddGossip:output_type -> cln.AddgossipResponse
	61,  // 195: cln.Node.AutoCleanInvoice:output_type -> cln.AutocleaninvoiceResponse
	63,  // 196: cln.Node.CheckMessage:output_type -> cln.CheckmessageResponse
	65,  // 197: cln.Node.Close:output_type -> cln.CloseResponse
	67,  // 198: cln.Node.ConnectPeer:output_type -> cln.ConnectResponse
	70,  // 199: cln.Node.CreateInvoice:output_type -> cln.CreateinvoiceResponse
	72,  // 200: cln.Node.Datastore:output_type -> cln.DatastoreResponse
	74,  // 201: cln.Node.CreateOnion:output_type -> cln.CreateonionResponse
	77,  // 202: cln.Node.DelDatastore:output_type -> cln.DeldatastoreResponse
	79,  // 203: cln.Node.DelExpiredInvoice:output_type -> cln.DelexpiredinvoiceResponse
	81,  // 204: cln.Node.DelInvoice:output_type -> cln.DelinvoiceResponse
	83,  // 205: cln.Node.Invoice:output_type -> cln.InvoiceResponse
	85,  // 206: cln.Node.ListDatastore:output_type -> cln.ListdatastoreResponse
	88,  // 207: cln.Node.ListInvoices:output_type -> cln.ListinvoicesResponse
	91,  // 208: cln.Node.SendOnion:output_type -> cln.SendonionResponse
	94,  // 209: cln.Node.ListSendPays:output_type -> cln.ListsendpaysResponse
	97,  // 210: cln.Node.ListTransactions:output_type -> cln.ListtransactionsResponse
	102, // 211: cln.Node.Pay:output_type -> cln.PayResponse
	104, // 212: cln.Node.ListNodes:output_type -> cln.ListnodesResponse
	108, // 213: cln.Node.WaitAnyInvoice:output_type -> cln.WaitanyinvoiceResponse
	110, // 214: cln.Node.WaitInvoice:output_type -> cln.WaitinvoiceResponse
	112, // 215: cln.Node.WaitSendPay:output_type -> cln.WaitsendpayResponse
	114, // 216: cln.Node.NewAddr:output_type -> cln.NewaddrResponse
	116, // 217: cln.Node.Withdraw:output_type -> cln.WithdrawResponse
	118, // 218: cln.Node.KeySend:output_type -> cln.KeysendResponse
	121, // 219: cln.Node.FundPsbt:output_type -> cln.FundpsbtResponse
	124, // 220: cln.Node.SendPsbt:output_type -> cln.SendpsbtResponse
	126, // 221: cln.Node.SignPsbt:output_type -> cln.SignpsbtResponse
	128, // 222: cln.Node.UtxoPsbt:output_type -> cln.UtxopsbtResponse
	131, // 223: cln.Node.TxDiscard:output_type -> cln.TxdiscardResponse
	133, // 224: cln.Node.TxPrepare:output_type -> cln.TxprepareResponse
	135, // 225: cln.Node.TxSend:output_type -> cln.TxsendResponse
	137, // 226: cln.Node.Disconnect:output_type -> cln.DisconnectResponse
	139, // 227: cln.Node.Feerates:output_type -> cln.FeeratesResponse
	144, // 228: cln.Node.GetRoute:output_type -> cln.GetrouteResponse
	147, // 229: cln.Node.ListForwards:output_type -> cln.ListforwardsResponse
	150, // 230: cln.Node.ListPays:output_type -> cln.ListpaysResponse
	153, // 231: cln.Node.Ping:output_type -> cln.PingResponse
	155, // 232: cln.Node.SignMessage:output_type -> cln.SignmessageResponse
	189, // [189:233] is the sub-list for method output_type
	145, // [145:189] is the sub-list for method input_type
	145, // [145:145] is the sub-list for extension type_name
	145, // [145:145] is the sub-list for extension extendee
	0,   // [0:145] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	file_primitives_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetinfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetinfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetinfoOurFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetinfoAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetinfoBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersChannelsFeerate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersChannelsInflight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersChannelsFunding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpeersPeersChannelsHtlcs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListfundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListfundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListfundsOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListfundsChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendpayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendpayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendpayRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListchannelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListchannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListchannelsChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddgossipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddgossipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutocleaninvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutocleaninvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckmessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckmessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateinvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateinvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateonionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateonionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateonionHops); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeldatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeldatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelexpiredinvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelexpiredinvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelinvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelinvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListdatastoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListdatastoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListdatastoreDatastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListinvoicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListinvoicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListinvoicesInvoices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendonionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendonionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendonionFirstHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsendpaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsendpaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsendpaysPayments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListtransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListtransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListtransactionsTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListtransactionsTransactionsInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListtransactionsTransactionsOutputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListnodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListnodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListnodesNodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListnodesNodesAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitanyinvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitanyinvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitinvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitinvoiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitsendpayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitsendpayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewaddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewaddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysendExtratlvs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundpsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundpsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundpsbtReservations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendpsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendpsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignpsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignpsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxopsbtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxopsbtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxopsbtReservations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxdiscardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxdiscardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxprepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxprepareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxsendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxsendResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeratesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeratesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeratesPerkb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeratesPerkw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeratesOnchainFeeEstimates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetrouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetrouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetrouteRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListforwardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListforwardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListforwardsForwards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpaysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListpaysPays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignmessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignmessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_node_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[42].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[53].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[55].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[57].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[59].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[61].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[65].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[67].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[69].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[71].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[73].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[74].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[77].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[78].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[79].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[89].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[93].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[94].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[98].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[105].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[106].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[107].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[109].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[112].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[114].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[115].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[117].OneofWrappers = []interface{}{}
	file_node_proto_msgTypes[118].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   122,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		EnumInfos:         file_node_proto_enumTypes,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_rawDesc = nil
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
