// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/getAlby/lndhub.go/rabbitmq (interfaces: LndHubService,AMQPClient)

// Package mock_rabbitmq is a generated GoMock package.
package mock_rabbitmq

import (
	context "context"
	reflect "reflect"

	models "github.com/getAlby/lndhub.go/db/models"
	rabbitmq "github.com/getAlby/lndhub.go/rabbitmq"
	gomock "github.com/golang/mock/gomock"
	amqp091 "github.com/rabbitmq/amqp091-go"
)

// MockLndHubService is a mock of LndHubService interface.
type MockLndHubService struct {
	ctrl     *gomock.Controller
	recorder *MockLndHubServiceMockRecorder
}

// MockLndHubServiceMockRecorder is the mock recorder for MockLndHubService.
type MockLndHubServiceMockRecorder struct {
	mock *MockLndHubService
}

// NewMockLndHubService creates a new mock instance.
func NewMockLndHubService(ctrl *gomock.Controller) *MockLndHubService {
	mock := &MockLndHubService{ctrl: ctrl}
	mock.recorder = &MockLndHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLndHubService) EXPECT() *MockLndHubServiceMockRecorder {
	return m.recorder
}

// GetAllPendingPayments mocks base method.
func (m *MockLndHubService) GetAllPendingPayments(arg0 context.Context) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPendingPayments", arg0)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPendingPayments indicates an expected call of GetAllPendingPayments.
func (mr *MockLndHubServiceMockRecorder) GetAllPendingPayments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPendingPayments", reflect.TypeOf((*MockLndHubService)(nil).GetAllPendingPayments), arg0)
}

// GetTransactionEntryByInvoiceId mocks base method.
func (m *MockLndHubService) GetTransactionEntryByInvoiceId(arg0 context.Context, arg1 int64) (models.TransactionEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionEntryByInvoiceId", arg0, arg1)
	ret0, _ := ret[0].(models.TransactionEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionEntryByInvoiceId indicates an expected call of GetTransactionEntryByInvoiceId.
func (mr *MockLndHubServiceMockRecorder) GetTransactionEntryByInvoiceId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionEntryByInvoiceId", reflect.TypeOf((*MockLndHubService)(nil).GetTransactionEntryByInvoiceId), arg0, arg1)
}

// HandleFailedPayment mocks base method.
func (m *MockLndHubService) HandleFailedPayment(arg0 context.Context, arg1 *models.Invoice, arg2 models.TransactionEntry, arg3 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFailedPayment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFailedPayment indicates an expected call of HandleFailedPayment.
func (mr *MockLndHubServiceMockRecorder) HandleFailedPayment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFailedPayment", reflect.TypeOf((*MockLndHubService)(nil).HandleFailedPayment), arg0, arg1, arg2, arg3)
}

// HandleSuccessfulPayment mocks base method.
func (m *MockLndHubService) HandleSuccessfulPayment(arg0 context.Context, arg1 *models.Invoice, arg2 models.TransactionEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSuccessfulPayment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSuccessfulPayment indicates an expected call of HandleSuccessfulPayment.
func (mr *MockLndHubServiceMockRecorder) HandleSuccessfulPayment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSuccessfulPayment", reflect.TypeOf((*MockLndHubService)(nil).HandleSuccessfulPayment), arg0, arg1, arg2)
}

// MockAMQPClient is a mock of AMQPClient interface.
type MockAMQPClient struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPClientMockRecorder
}

// MockAMQPClientMockRecorder is the mock recorder for MockAMQPClient.
type MockAMQPClientMockRecorder struct {
	mock *MockAMQPClient
}

// NewMockAMQPClient creates a new mock instance.
func NewMockAMQPClient(ctrl *gomock.Controller) *MockAMQPClient {
	mock := &MockAMQPClient{ctrl: ctrl}
	mock.recorder = &MockAMQPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMQPClient) EXPECT() *MockAMQPClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAMQPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAMQPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAMQPClient)(nil).Close))
}

// ExchangeDeclare mocks base method.
func (m *MockAMQPClient) ExchangeDeclare(arg0, arg1 string, arg2, arg3, arg4, arg5 bool, arg6 amqp091.Table) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeDeclare", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExchangeDeclare indicates an expected call of ExchangeDeclare.
func (mr *MockAMQPClientMockRecorder) ExchangeDeclare(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeDeclare", reflect.TypeOf((*MockAMQPClient)(nil).ExchangeDeclare), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Listen mocks base method.
func (m *MockAMQPClient) Listen(arg0 context.Context, arg1, arg2, arg3 string, arg4 ...func(rabbitmq.ListenOptions) rabbitmq.ListenOptions) (<-chan amqp091.Delivery, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Listen", varargs...)
	ret0, _ := ret[0].(<-chan amqp091.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockAMQPClientMockRecorder) Listen(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockAMQPClient)(nil).Listen), varargs...)
}

// PublishWithContext mocks base method.
func (m *MockAMQPClient) PublishWithContext(arg0 context.Context, arg1, arg2 string, arg3, arg4 bool, arg5 amqp091.Publishing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishWithContext", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockAMQPClientMockRecorder) PublishWithContext(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockAMQPClient)(nil).PublishWithContext), arg0, arg1, arg2, arg3, arg4, arg5)
}
